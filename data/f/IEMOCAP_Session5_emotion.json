{
  "annotation": [
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood, state it in one word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Tell the speaker's mood and state it in one word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "<Emotion_Tag>",
              "inst": "Tell the speaker's mood; state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"<Emotion_Tag>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<affect>",
              "inst": "Tell the speaker's mood and state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow up by appending \"<affect>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the speaker's mood and state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"<s>\" as the left boundary and \"</s>\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and state it in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object and the SER value should be indexed by \"emotion_tag\". The output must match this structure: {\"emotion_tag\": \"(mood)\"} ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling, restricted to one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format ",
          "lower_case": "Express the speaker's feeling and restricted to one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "*Emotional_State*",
              "inst": "Express the speaker's feeling and restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin the output using \"*Emotional_State*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Express the speaker's feeling and restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; suffixed with \"*emotional_tone*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's feeling. Restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; restricted to one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and serialize the result into json form. Structure your json so that SER is labeled as \"emotion_output\". The data should be formatted like this: {\"emotion_output\": \"(perceived emotion)\"}. ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_F017.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion; addressed in one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters ",
          "lower_case": "Express the speaker's emotion, addressed in one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Express the speaker's emotion and addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[VOICE_EMOTION]\" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "Express the speaker's emotion and addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"*emotion_result*\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's emotion and addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"'\" as prefix and \"'\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, addressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax. ensure \"emotion_tag\" is used as the access key for SER; the correct json format includes: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_F018.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion; addressed in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output: ",
          "lower_case": "Explain the speaker's emotion, addressed in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Explain the speaker's emotion and addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Identified emotional tone: \" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "**PERCEIVED_EMOTION**",
              "inst": "Explain the speaker's emotion; addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"**PERCEIVED_EMOTION**\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the speaker's emotion; addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make use of \"#\" and \"#\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and addressed in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure. The key for SER should be \"emotion_tag\" respectively and the correct json format includes: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_F020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker. presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker and presented in one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER result in uppercase format only: ",
          "lower_case": "Express the emotion of the speaker and presented in one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Express the emotion of the speaker. Presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and introduced by \"The emotional tone detected: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Express the emotion of the speaker, presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"[emotion_result]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the emotion of the speaker; presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"<s>\" and \"</s>\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, presented in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout. The output variable for SER is expected to be labeled \"speaker_emotion\". the output should resemble: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion and defined in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Point out the speaker's emotion. Defined in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "*Emotion_Label*",
              "inst": "Point out the speaker's emotion, defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*Emotion_Label*\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Point out the speaker's emotion and defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"*affect*\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Point out the speaker's emotion and defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"\"\" on the left and \"\"\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. Defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object; SER must be stored in the json under the key \"speaker_emotion\", an illustration of the format would be: {\"speaker_emotion\": \"(affect)\"}: ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro01/Ses05F_impro01_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "state in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, state in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling; state in one word. Return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the detected result contains only uppercase characters ",
          "lower_case": "State the speaker's feeling, state in one word. return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "<speaker_emotion>",
              "inst": "State the speaker's feeling and state in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"<speaker_emotion>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Mood>",
              "inst": "State the speaker's feeling, state in one word. return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"<Mood>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the speaker's feeling and state in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result between the symbols \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and state in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout; SER should appear under the json key \"emotion\", the formatting guide is: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings, expressed in one word; the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only. ",
          "lower_case": "Describe the speaker's feelings. Expressed in one word; the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Describe the speaker's feelings; expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"Identified emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "Describe the speaker's feelings. expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"*speaker_emotion*\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the speaker's feelings and expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". attach \"***\" to the beginning and \"***\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, expressed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json. Link the key \"emotion_label\" directly to the SER data. output a json string such as: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and summed in one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Respond with the recognized emotion written in uppercase only. ",
          "lower_case": "Describe the emotion of the speaker; summed in one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "{FEELING}",
              "inst": "Describe the emotion of the speaker. Summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; commence with \"{FEELING}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[PREDICTED_EMOTION]",
              "inst": "Describe the emotion of the speaker. Summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"[PREDICTED_EMOTION]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the emotion of the speaker; summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". guard the result with \"<start>\" on the left and \"<end>\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, summed in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format. Write the SER result with \"sentiment\" as its property name; here is a sample representation: {\"sentiment\": \"(affect)\"}. ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion; mention in one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase. ",
          "lower_case": "State the speaker's emotion. Mention in one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "State the speaker's emotion, mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Predicted sentiment state: \" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_output*",
              "inst": "State the speaker's emotion; mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finalize it by adding \"*emotion_output*\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's emotion. mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, mention in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result in a standard json structure and represent the result of SER using the key \"emotion_output\". A valid format example: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "captured in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and captured in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion, captured in one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase: ",
          "lower_case": "Summarize the speaker's emotion and captured in one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\". make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Summarize the speaker's emotion, captured in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"Predicted speaker emotion: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*SENTIMENT*",
              "inst": "Summarize the speaker's emotion and captured in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"*SENTIMENT*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's emotion; captured in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, captured in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation and the output variable for SER is expected to be labeled \"speaker_emotion\", a demonstration of the expected format: {\"speaker_emotion\": \"(perceived emotion)\"} ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion and written in one word and choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure all emotion labels are uppercase ",
          "lower_case": "Tell the speaker's emotion and written in one word and choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text: ",
          "prefix": [
            {
              "prefix": "<feeling>",
              "inst": "Tell the speaker's emotion. Written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<feeling>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Tell the speaker's emotion, written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and keep \"*SPEAKER_EMOTION*\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's emotion; written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"<wrap>\" on the left and \"</wrap>\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, written in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", express the final output in proper json; the SER result must be identified using the key \"emotion_label\". The data should be formatted like this: {\"emotion_label\": \"(emotion)\"} ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood, revealed in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "Summarize the speaker's mood and revealed in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "*Emotion*",
              "inst": "Summarize the speaker's mood; revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"*Emotion*\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "<sentiment>",
              "inst": "Summarize the speaker's mood. Revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"<sentiment>\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's mood, revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; revealed in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json and structure your json so that SER is labeled as \"SER\" and refer to this sample output: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, elaborated in one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase ",
          "lower_case": "State the speaker's mood. elaborated in one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "*feeling*",
              "inst": "State the speaker's mood. elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*feeling*\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "{PREDICTED_EMOTION}",
              "inst": "State the speaker's mood, elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"{PREDICTED_EMOTION}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's mood. elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"**\" as prefix and \"**\" as suffix "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and elaborated in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax. place the result of SER beneath the key \"emotion_label\" and you can format it as follows: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F011.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker, with one single word and chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase ",
          "lower_case": "Describe the emotion of the speaker and with one single word and chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Describe the emotion of the speaker, with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", initiated by \"Speaker's affective state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Describe the emotion of the speaker. with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"*Affect*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the emotion of the speaker; with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. With one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". produce the output adhering to json format and allocate the key \"predicted_emotion\" for the data derived from SER, an illustration of the format would be: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F012.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "only in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion, only in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion. only in one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return just the emotion label with no lowercase letters ",
          "lower_case": "Summarize the speaker's emotion, only in one word. chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Summarize the speaker's emotion. Only in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". kicking off with \"*Speaker_Emotion*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{predicted_emotion}",
              "inst": "Summarize the speaker's emotion; only in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"{predicted_emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Summarize the speaker's emotion. Only in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"*\" and \"*\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion and only in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions and allocate the key \"detected_emotion\" for the data derived from SER, keep your output consistent with: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood, in just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood and in just one word and the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters ",
          "lower_case": "Describe the speaker's mood and in just one word and the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only: ",
          "prefix": [
            {
              "prefix": "{predicted_emotion}",
              "inst": "Describe the speaker's mood, in just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"{predicted_emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Describe the speaker's mood. in just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow up by appending \"**Speaker_Emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the speaker's mood. In just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. In just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object and ensure \"emotion_result\" is used as the access key for SER. When in doubt, refer to: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling and just one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Explain the speaker's feeling. just one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Explain the speaker's feeling. just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Headed by \"Recognized affective category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Result**",
              "inst": "Explain the speaker's feeling. just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"**Emotion_Result**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the speaker's feeling; just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<wrap>\" and append \"</wrap>\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and just one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout. attach \"emotion_output\" to the result of SER in the final output. the result should be rendered in this format: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood; concluded with one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give the predicted emotion entirely in uppercase ",
          "lower_case": "Explain the speaker's mood and concluded with one word. Return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Explain the speaker's mood. Concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Speech-derived emotion: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "Explain the speaker's mood; concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"[Sentiment]\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's mood; concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<text>\" and append \"</text>\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; concluded with one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string, represent SER in the json with the key \"emotion\". please follow the template: {\"emotion\": \"(perceived emotion)\"}. ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings and addressed in one word, output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the detected emotion entirely in uppercase ",
          "lower_case": "Describe the speaker's feelings; addressed in one word, output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the emotion label is all lowercase characters ",
          "prefix": [
            {
              "prefix": "{emotion_output}",
              "inst": "Describe the speaker's feelings and addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"{emotion_output}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[PERCEIVED_EMOTION]",
              "inst": "Describe the speaker's feelings. Addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"[PERCEIVED_EMOTION]\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's feelings, addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; addressed in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary and label the output of SER using the key \"SER\"; please use a format similar to: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood. Rendered in one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Detect the emotion and format all letters as uppercase ",
          "lower_case": "Express the speaker's mood; rendered in one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Express the speaker's mood. rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". At the start, put \"Final predicted emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion>",
              "inst": "Express the speaker's mood. Rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"<Emotion>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's mood, rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"\"\" and \"\"\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and rendered in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format, assign \"sentiment\" as the property key for SER related content and here is a sample representation: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and concluded with one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER output as uppercase text only: ",
          "lower_case": "Specify the speaker's feeling, concluded with one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "<SENTIMENT>",
              "inst": "Specify the speaker's feeling. Concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", by preceding all with \"<SENTIMENT>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Specify the speaker's feeling, concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and include \"[EMOTION_LABEL]\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's feeling; concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"#\" and \"#\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. concluded with one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the result within a json structure and write the SER result with \"sentiment\" as its property name, use the following format in your response: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; elaborated in one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase predicted emotion with no extra words. ",
          "lower_case": "Specify the speaker's mood and elaborated in one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Specify the speaker's mood. Elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Speech emotion classification: \" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "Specify the speaker's mood. elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"[emotional_tone]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Specify the speaker's mood, elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the output between \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; elaborated in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json; assign \"emotion_output\" as the property key for SER related content and the output must match this structure: {\"emotion_output\": \"(perceived emotion)\"}. ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker; delivered in one word; return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "State the emotion of the speaker; delivered in one word; return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "[voice_emotion]",
              "inst": "State the emotion of the speaker and delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[voice_emotion]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "State the emotion of the speaker. Delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"[AFFECT]\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the emotion of the speaker, delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap it by placing \"$\" in front and \"$\" behind: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, delivered in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style and \"speaker_emotion\" should be the identifier for the SER content and format your response exactly as: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F034.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker. Explained in one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and only output the emotion in uppercase format: ",
          "lower_case": "State the emotion of the speaker and explained in one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "**emotional_tone**",
              "inst": "State the emotion of the speaker and explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"**emotional_tone**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Sentiment>",
              "inst": "State the emotion of the speaker and explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"<Sentiment>\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the emotion of the speaker; explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure. please tag the SER information with the key \"speaker_emotion\", when in doubt, refer to: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F035.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "in exactly one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; in exactly one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion, in exactly one word. output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make the emotion recognition result all uppercase ",
          "lower_case": "Tell the speaker's emotion. in exactly one word. Output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Tell the speaker's emotion, in exactly one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Speech emotion classification: \" opening up the text "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Tell the speaker's emotion and in exactly one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"{affect}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's emotion and in exactly one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"\"\" and \"\"\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and in exactly one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout. The json attribute for SER is \"speaker_emotion\", the formatting guide is: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F036.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling, captured in one word, answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Express the speaker's feeling; captured in one word, answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "{Emotional_State}",
              "inst": "Express the speaker's feeling and captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Emotional_State}\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "{SPEAKER_EMOTION}",
              "inst": "Express the speaker's feeling. Captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finish everything with a \"{SPEAKER_EMOTION}\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's feeling and captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<text>\" at the beginning and \"</text>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Captured in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation; record SER using \"speaker_emotion\" as the key in the json structure; a demonstration of the expected format: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F037.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion and summarized in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Point out the speaker's emotion. Summarized in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Point out the speaker's emotion. Summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Detected affective state: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION]",
              "inst": "Point out the speaker's emotion. Summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"[EMOTION]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's emotion and summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and summarized in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and the field related to SER must be labeled with \"sentiment\". The expected structure looks like this: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_F038.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood, in one single word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the emotion label in uppercase form. ",
          "lower_case": "Summarize the speaker's mood and in one single word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "**AFFECT**",
              "inst": "Summarize the speaker's mood, in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"**AFFECT**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Summarize the speaker's mood and in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"[Emotion]\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the speaker's mood and in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put \"**\" and \"**\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, in one single word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure, record SER using \"emotion_tag\" as the key in the json structure, for reference, your output might look like: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion. expressed in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give only the predicted emotion using uppercase letters: ",
          "lower_case": "Express the speaker's emotion. Expressed in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Express the speaker's emotion, expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepend \"Perceived emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION}",
              "inst": "Express the speaker's emotion. expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"{EMOTION}\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's emotion, expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. expressed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json. assign the string \"sentiment\" as the field name for SER. please follow the template: {\"sentiment\": \"(emotion)\"}: ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M004.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; with one single word; answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Express the speaker's mood. With one single word; answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Express the speaker's mood; with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Detected emotion output: \" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "*feeling*",
              "inst": "Express the speaker's mood, with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"*feeling*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's mood, with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; with one single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output the information using json formatting rules. The SER value should be indexed by \"SER\" and follow this example to structure the data: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion and limited to one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Describe the speaker's emotion. limited to one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Describe the speaker's emotion; limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The speaker's mood is: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Describe the speaker's emotion, limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"<EMOTIONAL_TONE>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's emotion, limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<start>\" and \"<end>\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, limited to one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format; SER should appear under the json key \"emotion_tag\" and you are expected to return: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M010.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "mention in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion. Mention in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. Mention in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion. ",
          "lower_case": "Tell the speaker's emotion, mention in one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "<Emotion_Tag>",
              "inst": "Tell the speaker's emotion and mention in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; headed by \"<Emotion_Tag>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Tell the speaker's emotion, mention in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and keep \"*Feeling*\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's emotion; mention in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<wrap>\" and \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; mention in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure and place the result of SER beneath the key \"SER\" and the json object should be in this pattern: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M014.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling and just one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Express the speaker's feeling; just one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "{SENTIMENT}",
              "inst": "Express the speaker's feeling. Just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{SENTIMENT}\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "Express the speaker's feeling. Just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and suffix the output with \"**Affect**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's feeling; just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"**\" and \"**\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Just one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation and make sure the SER output is labeled \"emotion_output\". The output must match this structure: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M015.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; in only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker and in only one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce only uppercase text from the SER result ",
          "lower_case": "Specify the emotion of the speaker. In only one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Specify the emotion of the speaker; in only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"Recognized sentiment label: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Tag}",
              "inst": "Specify the emotion of the speaker, in only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"{Emotion_Tag}\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the emotion of the speaker and in only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"<text>\" and suffix it with \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. In only one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object and bind the task SER to the key \"SER\"; the correct json format includes: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood. say it in exactly one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text: ",
          "lower_case": "Point out the speaker's mood and say it in exactly one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "**emotion_label**",
              "inst": "Point out the speaker's mood. say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**emotion_label**\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_Tone**",
              "inst": "Point out the speaker's mood, say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"**Emotional_Tone**\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's mood and say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and say it in exactly one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert your output into a json-compatible format. Make sure the SER output is labeled \"emotional_state\", keep your output consistent with: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "state it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, state it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker and state it in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion ",
          "lower_case": "Explain the emotion of the speaker. State it in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "*EMOTION_LABEL*",
              "inst": "Explain the emotion of the speaker. State it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*EMOTION_LABEL*\" as the heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Explain the emotion of the speaker and state it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"**predicted_emotion**\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the emotion of the speaker. State it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the entire result using \"{\" as prefix and \"}\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and state it in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object and the SER value should be indexed by \"speaker_emotion\"; for reference, your output might look like: {\"speaker_emotion\": \"(affect)\"} ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "with a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and with a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling. with a single word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase. ",
          "lower_case": "Identify the speaker's feeling; with a single word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Identify the speaker's feeling and with a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Emotion category identified: \" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Identify the speaker's feeling. With a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"<SENTIMENT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's feeling, with a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, with a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container; attach \"emotion_tag\" to the result of SER in the final output. This is an appropriate format: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood and in exactly one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result: ",
          "lower_case": "Specify the speaker's mood, in exactly one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "*Sentiment*",
              "inst": "Specify the speaker's mood, in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*Sentiment*\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_STATE}",
              "inst": "Specify the speaker's mood and in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"{EMOTIONAL_STATE}\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's mood, in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"#\" in the front and \"#\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure. The key for SER should be \"emotion_tag\" respectively. You are expected to return: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling. Summarized in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "State the speaker's feeling. Summarized in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "State the speaker's feeling. Summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[sentiment]\" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "**FEELING**",
              "inst": "State the speaker's feeling; summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"**FEELING**\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's feeling. Summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"\"\" and \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and summarized in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure; the result corresponding to SER should be mapped to \"emotion_output\", the correct json format includes: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, captured in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion: ",
          "lower_case": "Describe the speaker's mood, captured in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Describe the speaker's mood and captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Recognized voice emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{mood}",
              "inst": "Describe the speaker's mood and captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"{mood}\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the speaker's mood; captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put \"{\" and \"}\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and captured in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result. Record SER using \"detected_emotion\" as the key in the json structure and to illustrate, use: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M033.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood, reply in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output: ",
          "lower_case": "Point out the speaker's mood. reply in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase ",
          "prefix": [
            {
              "prefix": "**PERCEIVED_EMOTION**",
              "inst": "Point out the speaker's mood and reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"**PERCEIVED_EMOTION**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Point out the speaker's mood and reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And terminate the result using \"[Predicted_Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Point out the speaker's mood; reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood. reply in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ensure the result is formatted as valid json, ensure \"emotion_output\" is used as the access key for SER and the result should be rendered in this format: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M034.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker. Named in one word and the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER output as uppercase text only. ",
          "lower_case": "Tell the emotion of the speaker. named in one word and the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "{emotion_output}",
              "inst": "Tell the emotion of the speaker; named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"{emotion_output}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Tell the emotion of the speaker, named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"[Feeling]\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the emotion of the speaker, named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<wrap>\" and \"</wrap>\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; named in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout and the SER result must be identified using the key \"predicted_emotion\"; the correct json format includes: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M035.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, simply in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format: ",
          "lower_case": "Explain the speaker's mood; simply in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "{voice_emotion}",
              "inst": "Explain the speaker's mood, simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"{voice_emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "Explain the speaker's mood; simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"*AFFECT*\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's mood and simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; simply in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting. Use \"speaker_emotion\" as the json label for SER, an illustration of the format would be: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M036.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling; say it in exactly one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return uppercase-only emotion recognition output. ",
          "lower_case": "Point out the speaker's feeling; say it in exactly one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Point out the speaker's feeling and say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"The speaker's emotion is: \" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Point out the speaker's feeling. Say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and label the end of the result with \"<emotional_tone>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Point out the speaker's feeling. say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"*\" at the beginning and \"*\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and say it in exactly one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and serialize the result into json form. the field related to SER must be labeled with \"emotional_state\", when in doubt, refer to: {\"emotional_state\": \"(affect)\"}: ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro02/Ses05F_impro02_M041.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "write in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; write in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker, write in one word. Select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", only output the emotion in uppercase format ",
          "lower_case": "Describe the emotion of the speaker. Write in one word. select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "Describe the emotion of the speaker; write in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"*emotion_tag*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<voice_emotion>",
              "inst": "Describe the emotion of the speaker and write in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<voice_emotion>\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the emotion of the speaker, write in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"<BOS>\" and \"<EOS>\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; write in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style, label the output of SER using the key \"predicted_emotion\"; follow this example to structure the data: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "in exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood and in exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. In exactly one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". make sure the entire predicted emotion is in uppercase. ",
          "lower_case": "Summarize the speaker's mood. In exactly one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "Summarize the speaker's mood and in exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"*affect*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's mood, in exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"<EMOTIONAL_TONE>\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the speaker's mood. In exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and in exactly one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards and the SER information must be placed under \"emotional_state\" and please use a format similar to: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion, answer in one word and answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "State the speaker's emotion and answer in one word and answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "State the speaker's emotion and answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Predicted emotional output: \" at the very beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "*PERCEIVED_EMOTION*",
              "inst": "State the speaker's emotion; answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"*PERCEIVED_EMOTION*\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's emotion, answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Tag the result with opening \"{\" and closing \"}\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; answer in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure, the json representation of SER must be keyed as \"SER\". A valid format example: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and summarized in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return just the emotion label with no lowercase letters. ",
          "lower_case": "Tell the emotion of the speaker. Summarized in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "*PERCEIVED_EMOTION*",
              "inst": "Tell the emotion of the speaker, summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"*PERCEIVED_EMOTION*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion>",
              "inst": "Tell the emotion of the speaker and summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"<emotion>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the emotion of the speaker; summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefix the result with \"{\" and suffix it with \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; summarized in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object and the result corresponding to SER should be mapped to \"speaker_emotion\"; here's how a typical entry should look: {\"speaker_emotion\": \"(perceived emotion)\"} ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Articulated in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and articulated in one word. Output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion. ",
          "lower_case": "State the speaker's emotion; articulated in one word. output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "State the speaker's emotion. Articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"Emotion recognized from speech: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_OUTPUT>",
              "inst": "State the speaker's emotion. Articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"<EMOTION_OUTPUT>\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's emotion and articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container. The field related to SER must be labeled with \"emotion_output\" and when in doubt, refer to: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker. Put in one word and must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase characters in the emotion label ",
          "lower_case": "Describe the emotion of the speaker; put in one word and must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "Describe the emotion of the speaker, put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With an opening of \"[sentiment]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Describe the emotion of the speaker; put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"[emotion_output]\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the emotion of the speaker; put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"**\" at the start and \"**\" at the end: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. Put in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure and assign \"emotional_state\" as the property key for SER related content; here is a sample representation: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker. In a single word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion result only in uppercase characters ",
          "lower_case": "State the emotion of the speaker. In a single word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "State the emotion of the speaker; in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"The analyzed emotion state: \" at its forefront: "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "State the emotion of the speaker, in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and have \"<PERCEIVED_EMOTION>\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the emotion of the speaker, in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the output between \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, in a single word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting and please tag the SER information with the key \"emotion_tag\" and the output should resemble: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion, clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion. Clarified in one word and provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters: ",
          "lower_case": "Summarize the speaker's emotion; clarified in one word and provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Summarize the speaker's emotion. Clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make \"Detected affective state: \" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Summarize the speaker's emotion; clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"<Speaker_Emotion>\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's emotion; clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"<text>\" and \"</text>\" as the enclosing symbols. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, clarified in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format; SER must be stored in the json under the key \"SER\", format your response exactly as: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings. limited to one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters ",
          "lower_case": "Describe the speaker's feelings and limited to one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "*voice_emotion*",
              "inst": "Describe the speaker's feelings and limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*voice_emotion*\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Describe the speaker's feelings; limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<Perceived_Emotion>\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the speaker's feelings, limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<s>\" at the beginning and \"</s>\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. limited to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container and include the SER output under the key \"detected_emotion\", keep your output consistent with: {\"detected_emotion\": \"(mood)\"} ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker and only in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER classification in uppercase letters. ",
          "lower_case": "Summarize the emotion of the speaker. only in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase characters in the emotion result: ",
          "prefix": [
            {
              "prefix": "{MOOD}",
              "inst": "Summarize the emotion of the speaker and only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"{MOOD}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Summarize the emotion of the speaker; only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"*mood*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the emotion of the speaker; only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and only in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax; write the SER result with \"predicted_emotion\" as its property name. The expected structure looks like this: {\"predicted_emotion\": \"(perceived emotion)\"} ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "simply in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. simply in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion; simply in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return the emotion output in uppercase without punctuation changes ",
          "lower_case": "State the speaker's emotion and simply in one word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "[emotion]",
              "inst": "State the speaker's emotion, simply in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"[emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "State the speaker's emotion and simply in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"{PERCEIVED_EMOTION}\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's emotion, simply in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; simply in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout, assign \"emotion\" as the property key for SER related content and follow this example to structure the data: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; in only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker, in only one word. the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase. ",
          "lower_case": "Specify the emotion of the speaker; in only one word. The response must be \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "**perceived_emotion**",
              "inst": "Specify the emotion of the speaker, in only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"**perceived_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Mood>",
              "inst": "Specify the emotion of the speaker. In only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and suffix the output with \"<Mood>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the emotion of the speaker; in only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". mark the result using \"*\" before and \"*\" after. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. In only one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules, the SER value should be indexed by \"detected_emotion\", maintain the structure like so: {\"detected_emotion\": \"(perceived emotion)\"}: ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker and summarize in one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Tell the emotion of the speaker and summarize in one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Tell the emotion of the speaker. summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"Emotion recognized from speech: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Tell the emotion of the speaker; summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"*Emotion*\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the emotion of the speaker. Summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Summarize in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json; when structuring the result, use \"sentiment\" for the SER section; for example: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "in precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and in precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood and in precisely one word and must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters. ",
          "lower_case": "Identify the speaker's mood; in precisely one word and must return \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Identify the speaker's mood; in precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"*Emotion_Tag*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion>",
              "inst": "Identify the speaker's mood; in precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<emotion>\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Identify the speaker's mood, in precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"***\" and \"***\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. In precisely one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure and the result corresponding to SER should be mapped to \"predicted_emotion\". You can format it as follows: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion and expressed in one word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return uppercase-only emotion recognition output: ",
          "lower_case": "Describe the speaker's emotion and expressed in one word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Convert the detected emotion entirely to lowercase ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_TONE**",
              "inst": "Describe the speaker's emotion. Expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"**EMOTIONAL_TONE**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Describe the speaker's emotion and expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"*Predicted_Emotion*\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the speaker's emotion, expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"{\" and \"}\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion and expressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting. link the key \"emotional_state\" directly to the SER data. You can format it as follows: {\"emotional_state\": \"(feeling)\"} ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Articulated in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the recognized emotion into uppercase text ",
          "lower_case": "Express the speaker's feeling, articulated in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "<affect>",
              "inst": "Express the speaker's feeling. Articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make \"<affect>\" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_LABEL>",
              "inst": "Express the speaker's feeling; articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<EMOTION_LABEL>\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling and articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Articulated in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is formatted as valid json. Attach \"SER\" to the result of SER in the final output and the result should be rendered in this format: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood. respond in one word and select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion ",
          "lower_case": "Describe the speaker's mood, respond in one word and select only one: \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Describe the speaker's mood and respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"[EMOTION_RESULT]\" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Describe the speaker's mood. Respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"{Emotion_Result}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's mood, respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"#\" before and \"#\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; respond in one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". output using a clean and valid json layout; make sure the SER output is labeled \"detected_emotion\" and you can format it as follows: {\"detected_emotion\": \"(perceived emotion)\"}: ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood; answer in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion. ",
          "lower_case": "State the speaker's mood, answer in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only: ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "State the speaker's mood, answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"Speaker's affective state: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the speaker's mood, answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**EMOTION_RESULT**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's mood. Answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"(\" before the result and \")\" after it "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; answer in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules and attach \"speaker_emotion\" to the result of SER in the final output and one possible output form: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion. defined in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only. ",
          "lower_case": "Explain the speaker's emotion and defined in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "{Emotion_Label}",
              "inst": "Explain the speaker's emotion. defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"{Emotion_Label}\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**Mood**",
              "inst": "Explain the speaker's emotion; defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"**Mood**\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the speaker's emotion and defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion, defined in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, structure your json so that SER is labeled as \"emotion_label\" and the json representation should be like: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "in one single word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, in one single word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion and in one single word. The emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present the SER label in uppercase letters only: ",
          "lower_case": "State the speaker's emotion and in one single word. the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "State the speaker's emotion; in one single word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[VOICE_EMOTION]\" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "<speaker_emotion>",
              "inst": "State the speaker's emotion. In one single word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"<speaker_emotion>\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's emotion; in one single word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and frame the result with a leading \"~\" and trailing \"~\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and in one single word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string; represent the result of SER using the key \"emotion\" and the formatting guide is: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker, limited to one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Express the emotion of the speaker; limited to one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Express the emotion of the speaker and limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[Voice_Emotion]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Express the emotion of the speaker, limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"{emotion_label}\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the emotion of the speaker. Limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and frame the result with a leading \"{\" and trailing \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; limited to one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your answer following json standards; structure your json so that SER is labeled as \"emotional_state\"; please follow the template: {\"emotional_state\": \"(feeling)\"} ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood; describe in one word. only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert and return the detected emotion fully uppercase. ",
          "lower_case": "Tell the speaker's mood. describe in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "{Emotion_Tag}",
              "inst": "Tell the speaker's mood. Describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"{Emotion_Tag}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Tell the speaker's mood, describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"*Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's mood and describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and describe in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object; the result corresponding to SER should be mapped to \"emotion\". for reference, your output might look like: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker; concluded with one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters. ",
          "lower_case": "Express the emotion of the speaker, concluded with one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Express the emotion of the speaker, concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Detected affective state: \" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Express the emotion of the speaker and concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"<Feeling>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the emotion of the speaker, concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"<wrap>\" as the left boundary and \"</wrap>\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Concluded with one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure, assign the string \"SER\" as the field name for SER; the expected structure looks like this: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; call it in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result: ",
          "lower_case": "Explain the speaker's emotion and call it in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**voice_emotion**",
              "inst": "Explain the speaker's emotion; call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**voice_emotion**\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Explain the speaker's emotion, call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"<Perceived_Emotion>\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Explain the speaker's emotion. call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; call it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure and \"emotion_result\" should be the identifier for the SER content and the formatting guide is: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "just one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. Just one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood, just one word. Choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce the emotion label with all letters in uppercase. ",
          "lower_case": "Express the speaker's mood, just one word. Choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Express the speaker's mood. Just one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and initiated by \"The emotional tone detected: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**mood**",
              "inst": "Express the speaker's mood. just one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"**mood**\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the speaker's mood. Just one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, just one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert your output into a json-compatible format, the designated key for SER should remain \"detected_emotion\", refer to this sample output: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion and rendered in one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Identify the speaker's emotion; rendered in one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "**Predicted_Emotion**",
              "inst": "Identify the speaker's emotion; rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"**Predicted_Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Identify the speaker's emotion, rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"*Emotional_Tone*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's emotion and rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"\"\" in the front and \"\"\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; rendered in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json; label the output of SER using the key \"emotion_label\" and a correctly structured entry is: {\"emotion_label\": \"(feeling)\"}: ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F042.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and in a single word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Point out the speaker's feeling. in a single word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "*EMOTION_LABEL*",
              "inst": "Point out the speaker's feeling. in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"*EMOTION_LABEL*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "Point out the speaker's feeling and in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**Emotional_State**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Point out the speaker's feeling. In a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<wrap>\" and \"</wrap>\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules. The SER value should be indexed by \"emotion_tag\"; the result should be rendered in this format: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F043.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood. Restricted to one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format. ",
          "lower_case": "Identify the speaker's mood. restricted to one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "**MOOD**",
              "inst": "Identify the speaker's mood and restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with an opening of \"**MOOD**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Identify the speaker's mood and restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"[Mood]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's mood; restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"<s>\" and \"</s>\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and restricted to one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json; record SER using \"emotion_tag\" as the key in the json structure; you can format it as follows: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F046.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling, say it in exactly one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion. ",
          "lower_case": "Explain the speaker's feeling, say it in exactly one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Explain the speaker's feeling, say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"Predicted sentiment state: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_TONE}",
              "inst": "Explain the speaker's feeling; say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"{EMOTIONAL_TONE}\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Explain the speaker's feeling; say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"~\" and \"~\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax, encode the SER content using \"emotion_result\" as its identifier; here is a sample representation: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F047.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker, describe in one word, must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase characters in the emotion label: ",
          "lower_case": "State the emotion of the speaker. Describe in one word, must pick from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "State the emotion of the speaker, describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Final predicted emotion: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "State the emotion of the speaker and describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"[EMOTION_LABEL]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the emotion of the speaker, describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"'\" as prefix and \"'\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; describe in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout. Attach \"sentiment\" to the result of SER in the final output. The output should resemble: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F048.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "captured in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; captured in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker. Captured in one word. select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase. ",
          "lower_case": "Explain the emotion of the speaker; captured in one word. Select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "[Perceived_Emotion]",
              "inst": "Explain the emotion of the speaker and captured in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[Perceived_Emotion]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**SPEAKER_EMOTION**",
              "inst": "Explain the emotion of the speaker. Captured in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"**SPEAKER_EMOTION**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the emotion of the speaker. captured in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"<wrap>\" as the left boundary and \"</wrap>\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and captured in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data; bind the task SER to the key \"SER\" and the output must match this structure: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F049.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "in just one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and in just one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood; in just one word. Output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the recognized emotion into uppercase text. ",
          "lower_case": "Identify the speaker's mood, in just one word. output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion written entirely in lowercase letters. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Identify the speaker's mood and in just one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*sentiment*\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion>",
              "inst": "Identify the speaker's mood. in just one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"<emotion>\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's mood. In just one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; in just one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your answer following json standards, format the SER data using \"emotion\" as its key name. The formatting guide is: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F051.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "written in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and written in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion; written in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters. ",
          "lower_case": "Identify the speaker's emotion. Written in one word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Identify the speaker's emotion and written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Predicted sentiment state: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_Tone**",
              "inst": "Identify the speaker's emotion. written in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"**Emotional_Tone**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the speaker's emotion; written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; written in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure the final output as a json object; represent SER in the json with the key \"predicted_emotion\". A proper example would be: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F053.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker. Summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker; summed up in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form. ",
          "lower_case": "Summarize the emotion of the speaker, summed up in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Summarize the emotion of the speaker, summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"Emotion recognized from speech: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Summarize the emotion of the speaker. Summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"[emotion_output]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the emotion of the speaker; summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; summed up in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and the label \"detected_emotion\" must correspond to the SER section, for reference, your output might look like: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F054.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling, clarified in one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text: ",
          "lower_case": "Specify the speaker's feeling, clarified in one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "Specify the speaker's feeling, clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Emotion_Result}\" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "Specify the speaker's feeling, clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"<perceived_emotion>\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's feeling, clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Mark the result using \"'\" before and \"'\" after. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; clarified in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your result exactly as a json object. write the SER result with \"emotion\" as its property name; a demonstration of the expected format: {\"emotion\": \"(perceived emotion)\"}. ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F055.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion, delivered in one word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Identify the speaker's emotion and delivered in one word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Identify the speaker's emotion, delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"The speaker's mood is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Identify the speaker's emotion and delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow the content with \"<SENTIMENT>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Identify the speaker's emotion; delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; delivered in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json; when structuring the result, use \"emotion_label\" for the SER section; the output should resemble: {\"emotion_label\": \"(feeling)\"}. ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F056.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling, respond in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show the detected emotion fully in uppercase characters. ",
          "lower_case": "Express the speaker's feeling. Respond in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Express the speaker's feeling. Respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Determined mood from audio: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Mood>",
              "inst": "Express the speaker's feeling and respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"<Mood>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's feeling and respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"_\" and \"_\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; respond in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure your response as a valid json string. Represent the result of SER using the key \"predicted_emotion\", the json representation should be like: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F057.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "with a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. With a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. with a single word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase ",
          "lower_case": "Specify the speaker's feeling. With a single word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Specify the speaker's feeling, with a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Perceived speaker mood: \" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "*Perceived_Emotion*",
              "inst": "Specify the speaker's feeling. With a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"*Perceived_Emotion*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's feeling, with a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is wrapped using \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; with a single word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style, allocate the key \"emotion_result\" for the data derived from SER and the data should be formatted like this: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F058.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "revealed in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; revealed in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood and revealed in one word. Output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Specify the speaker's mood and revealed in one word. output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Specify the speaker's mood; revealed in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"Perceived emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "Specify the speaker's mood; revealed in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And include \"**Sentiment**\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the speaker's mood; revealed in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"[\" and \"]\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. Revealed in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object. The field related to SER must be labeled with \"emotion_output\" and the correct json format includes: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F059.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summed up in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Summed up in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and summed up in one word. only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase: ",
          "lower_case": "Describe the emotion of the speaker; summed up in one word. Only select from \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "{EMOTION_TAG}",
              "inst": "Describe the emotion of the speaker, summed up in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"{EMOTION_TAG}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Describe the emotion of the speaker, summed up in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"*VOICE_EMOTION*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the emotion of the speaker. Summed up in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert the result inside the brackets \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and summed up in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards. Ensure that SER is stored under the key \"predicted_emotion\". when in doubt, refer to: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_F060.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker and presented in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "Summarize the emotion of the speaker. Presented in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Summarize the emotion of the speaker, presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Perceived speaker mood: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "Summarize the emotion of the speaker. Presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"*emotion*\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the emotion of the speaker and presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"<BOS>\" at the start and \"<EOS>\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; presented in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object and assign the string \"emotion_result\" as the field name for SER and for reference, your output might look like: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, captured in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "Explain the speaker's mood; captured in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "<predicted_emotion>",
              "inst": "Explain the speaker's mood. Captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". adding \"<predicted_emotion>\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Explain the speaker's mood and captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and add \"*Affect*\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's mood; captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"<text>\" as prefix and \"</text>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and captured in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Give the result back in proper json notation; when formatting, associate SER with \"emotional_state\" and a proper example would be: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "respond in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, respond in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood and respond in one word. Output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters: ",
          "lower_case": "Express the speaker's mood. Respond in one word. Output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "{VOICE_EMOTION}",
              "inst": "Express the speaker's mood, respond in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"{VOICE_EMOTION}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Express the speaker's mood, respond in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"[EMOTIONAL_STATE]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's mood; respond in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"#\" and \"#\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Respond in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result; the output variable for SER is expected to be labeled \"emotion_label\"; use the following format in your response: {\"emotion_label\": \"(affect)\"}: ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker, describe in one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase ",
          "lower_case": "Describe the emotion of the speaker and describe in one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Describe the emotion of the speaker, describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<emotion>\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Describe the emotion of the speaker; describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"{Emotion_Output}\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the emotion of the speaker and describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"#\" and \"#\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout. The SER information must be placed under \"emotion_output\". one possible output form: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; in a single word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give the detected emotion output only in uppercase form: ",
          "lower_case": "Summarize the speaker's feeling, in a single word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "*perceived_emotion*",
              "inst": "Summarize the speaker's feeling; in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"*perceived_emotion*\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_label]",
              "inst": "Summarize the speaker's feeling; in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"[emotion_label]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Summarize the speaker's feeling. In a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"'\" and \"'\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. In a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the response using json syntax, please tag the SER information with the key \"predicted_emotion\", a proper example would be: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker, written in one word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase. ",
          "lower_case": "Summarize the emotion of the speaker. Written in one word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "{affect}",
              "inst": "Summarize the emotion of the speaker; written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"{affect}\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_RESULT]",
              "inst": "Summarize the emotion of the speaker. Written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"[EMOTION_RESULT]\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the emotion of the speaker. Written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"(\" before and \")\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and written in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax and the designated key for SER should remain \"emotional_state\", when in doubt, refer to: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "elaborated in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling, elaborated in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling. Elaborated in one word. return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters. ",
          "lower_case": "Tell the speaker's feeling and elaborated in one word. Return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Tell the speaker's feeling. elaborated in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion category identified: \" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Tell the speaker's feeling, elaborated in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"<Feeling>\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the speaker's feeling, elaborated in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"**\" in the front and \"**\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and elaborated in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; serialize the result into json form and \"emotion_tag\" should be the identifier for the SER content; a compliant example would appear like: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling; with a single word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion. ",
          "lower_case": "State the speaker's feeling. With a single word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "**emotional_tone**",
              "inst": "State the speaker's feeling, with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"**emotional_tone**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "State the speaker's feeling, with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"*Affect*\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's feeling, with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, with a single word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and allocate the key \"predicted_emotion\" for the data derived from SER. the json object should be in this pattern: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker. Summarize in one word and the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase: ",
          "lower_case": "Identify the emotion of the speaker, summarize in one word and the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Identify the emotion of the speaker. Summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"Speaker's affective state: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Identify the emotion of the speaker. Summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{feeling}\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the emotion of the speaker and summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"<text>\" and closing \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, summarize in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure. please tag the SER information with the key \"predicted_emotion\", please follow the template: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "in just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, in just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings; in just one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Describe the speaker's feelings and in just one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Describe the speaker's feelings; in just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"[EMOTION_LABEL]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Describe the speaker's feelings. In just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And write \"[EMOTIONAL_STATE]\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's feelings and in just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"\"\" and \"\"\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. In just one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout and include the SER output under the key \"speaker_emotion\". When in doubt, refer to: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood. In precisely one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "State the speaker's mood; in precisely one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "**Emotional_State**",
              "inst": "State the speaker's mood. in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"**Emotional_State**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Sentiment}",
              "inst": "State the speaker's mood and in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{Sentiment}\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's mood; in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"<\" to the beginning and \">\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; in precisely one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax and the output variable for SER is expected to be labeled \"emotion_result\"; one possible output form: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "chosen in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, chosen in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood and chosen in one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters: ",
          "lower_case": "Point out the speaker's mood, chosen in one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters. ",
          "prefix": [
            {
              "prefix": "*PERCEIVED_EMOTION*",
              "inst": "Point out the speaker's mood; chosen in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*PERCEIVED_EMOTION*\" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Point out the speaker's mood and chosen in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"[SENTIMENT]\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's mood; chosen in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the entire result using \"**\" as prefix and \"**\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and chosen in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax and when formatting, associate SER with \"emotion_label\", output a json string such as: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling. Only in one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Tell the speaker's feeling; only in one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Tell the speaker's feeling. only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"{Mood}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{predicted_emotion}",
              "inst": "Tell the speaker's feeling. Only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"{predicted_emotion}\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's feeling; only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"***\" as prefix and \"***\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, only in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object and the label \"detected_emotion\" must correspond to the SER section, when in doubt, refer to: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, with a single word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase: ",
          "lower_case": "Explain the emotion of the speaker, with a single word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "**Emotion_Output**",
              "inst": "Explain the emotion of the speaker. with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With a lead-in of \"**Emotion_Output**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Explain the emotion of the speaker and with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow up by appending \"{Mood}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Explain the emotion of the speaker. With a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". frame the result with a leading \"*\" and trailing \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; serialize the result into json form. make sure the SER output is labeled \"sentiment\"; the output must match this structure: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "restricted to one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and restricted to one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and restricted to one word. return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase ",
          "lower_case": "Specify the speaker's feeling and restricted to one word. Return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "<emotion_output>",
              "inst": "Specify the speaker's feeling and restricted to one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"<emotion_output>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_RESULT]",
              "inst": "Specify the speaker's feeling; restricted to one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"[EMOTION_RESULT]\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's feeling; restricted to one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, restricted to one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container and the label \"emotion_output\" must correspond to the SER section and a proper example would be: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "in only one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker, in only one word. Output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER label as uppercase text. ",
          "lower_case": "Identify the emotion of the speaker and in only one word. Output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the emotion using lowercase letters only. ",
          "prefix": [
            {
              "prefix": "<Emotion_Label>",
              "inst": "Identify the emotion of the speaker; in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<Emotion_Label>\" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_RESULT}",
              "inst": "Identify the emotion of the speaker. in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{EMOTION_RESULT}\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the emotion of the speaker, in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"'\" and \"'\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object and the json representation of SER must be keyed as \"sentiment\". An illustration of the format would be: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling; defined in one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give only the predicted emotion using uppercase letters ",
          "lower_case": "Express the speaker's feeling. Defined in one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Express the speaker's feeling and defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Recognized feeling is: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_STATE>",
              "inst": "Express the speaker's feeling. Defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"<EMOTIONAL_STATE>\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's feeling. defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and guard the result with \"<s>\" on the left and \"</s>\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Defined in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string, record SER using \"predicted_emotion\" as the key in the json structure; one possible output form: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood; articulated in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase ",
          "lower_case": "Express the speaker's mood. Articulated in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Express the speaker's mood. articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"Determined mood from audio: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<SPEAKER_EMOTION>",
              "inst": "Express the speaker's mood; articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"<SPEAKER_EMOTION>\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's mood, articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place \"**\" at the beginning and \"**\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and articulated in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json; the json representation of SER must be keyed as \"emotion_result\" and use the following format in your response: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion. limited to one word. must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format. ",
          "lower_case": "Tell the speaker's emotion. Limited to one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "{Affect}",
              "inst": "Tell the speaker's emotion, limited to one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Affect}\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Tell the speaker's emotion, limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"[AFFECT]\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the speaker's emotion and limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"*\" and \"*\" to bracket the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". structure the final output as a json object, the json representation of SER must be keyed as \"emotion_result\"; an illustration of the format would be: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling and explained in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". convert the recognized emotion into uppercase text: ",
          "lower_case": "Specify the speaker's feeling; explained in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "[mood]",
              "inst": "Specify the speaker's feeling; explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"[mood]\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion**",
              "inst": "Specify the speaker's feeling, explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"**Emotion**\" after the result body. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's feeling and explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"**\" before and \"**\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, explained in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Shape the output using standard json conventions and the designated key for SER should remain \"emotion_label\" and please use a format similar to: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker, restricted to one word, select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters. ",
          "lower_case": "Identify the emotion of the speaker; restricted to one word, select one of \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_STATE*",
              "inst": "Identify the emotion of the speaker, restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"*EMOTIONAL_STATE*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Identify the emotion of the speaker and restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"**predicted_emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the emotion of the speaker and restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"**\" and suffix it with \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; restricted to one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object, the json representation of SER must be keyed as \"emotional_state\". Keep your output consistent with: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. Declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion. declared in one word; allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Explain the speaker's emotion and declared in one word; allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "**Perceived_Emotion**",
              "inst": "Explain the speaker's emotion and declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"**Perceived_Emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Explain the speaker's emotion and declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and apply \"{emotion_label}\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's emotion. Declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; declared in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object, format the SER data using \"emotion\" as its key name. The result should be rendered in this format: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M038.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling and summarized in one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase. ",
          "lower_case": "Summarize the speaker's feeling. summarized in one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Summarize the speaker's feeling; summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", start it with \"[SPEAKER_EMOTION]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Summarize the speaker's feeling. Summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"<SENTIMENT>\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's feeling and summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"_\" and append \"_\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, summarized in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout, ensure that SER is stored under the key \"emotion\", an illustration of the format would be: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "explained in one word. Must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; explained in one word. Must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; explained in one word. must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give the detected emotion output only in uppercase form. ",
          "lower_case": "Describe the speaker's feelings. Explained in one word. Must return \"happy\", \"sad\", \"angry\" or \"neutral\". produce lowercase-only emotion label text: ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Describe the speaker's feelings; explained in one word. Must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<Perceived_Emotion>\" at its forefront: "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Describe the speaker's feelings and explained in one word. Must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"[EMOTIONAL_STATE]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's feelings; explained in one word. Must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, explained in one word. must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string and SER must be stored in the json under the key \"predicted_emotion\", use the following format in your response: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, in a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. In a single word and only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase ",
          "lower_case": "Express the speaker's feeling and in a single word and only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters ",
          "prefix": [
            {
              "prefix": "{emotional_tone}",
              "inst": "Express the speaker's feeling. In a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"{emotional_tone}\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "Express the speaker's feeling. in a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"[Emotion_Tag]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's feeling. In a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"\"\" and \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; in a single word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object, the key \"emotional_state\" maps to the result of SER. Use the following format in your response: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood, written in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present the SER label in uppercase letters only: ",
          "lower_case": "Point out the speaker's mood. written in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Point out the speaker's mood and written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"Recognized feeling is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Point out the speaker's mood and written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And put \"**emotional_tone**\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's mood. Written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary, use \"emotion_output\" as the json label for SER and when in doubt, refer to: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M043.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion. rendered in one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give only the predicted emotion using uppercase letters: ",
          "lower_case": "Identify the speaker's emotion and rendered in one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Identify the speaker's emotion; rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"Final predicted emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Identify the speaker's emotion, rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"[Feeling]\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's emotion and rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"\"\" as prefix and \"\"\" as suffix "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion. rendered in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format. SER must be stored in the json under the key \"emotional_state\", the data should be formatted like this: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M044.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion. answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion. answer in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase: ",
          "lower_case": "Specify the speaker's emotion. Answer in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Specify the speaker's emotion; answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; introduced by \"<Perceived_Emotion>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "Specify the speaker's emotion. answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"{EMOTION_TAG}\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's emotion and answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"<s>\" and \"</s>\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. answer in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions. Make sure the SER output is labeled \"emotion\", a compliant example would appear like: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M045.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion and presented in one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text ",
          "lower_case": "Specify the speaker's emotion and presented in one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "*PERCEIVED_EMOTION*",
              "inst": "Specify the speaker's emotion. Presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*PERCEIVED_EMOTION*\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Specify the speaker's emotion, presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and put \"*Affect*\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's emotion; presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, presented in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style; represent the result of SER using the key \"emotion_tag\", the correct json format includes: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M046.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. In precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood and in precisely one word, provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". reply with uppercase-only predicted emotion text ",
          "lower_case": "State the speaker's mood. In precisely one word, provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". Return the detected emotional state in all lowercase letters ",
          "prefix": [
            {
              "prefix": "**SENTIMENT**",
              "inst": "State the speaker's mood; in precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"**SENTIMENT**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "State the speaker's mood, in precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"[EMOTION_OUTPUT]\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's mood. in precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"~\" and \"~\" markers "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, in precisely one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting and ensure that SER is stored under the key \"emotion_label\", when in doubt, refer to: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M049.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion; kept to one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only. ",
          "lower_case": "Summarize the speaker's emotion; kept to one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\", present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's emotion and kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"<EMOTIONAL_TONE>\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**perceived_emotion**",
              "inst": "Summarize the speaker's emotion; kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**perceived_emotion**\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's emotion; kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefix the result with \"\"\" and suffix it with \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; kept to one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style. The result corresponding to SER should be mapped to \"sentiment\", a compliant example would appear like: {\"sentiment\": \"(affect)\"}: ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M050.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "answer in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, answer in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood, answer in one word. Output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters ",
          "lower_case": "Summarize the speaker's mood, answer in one word. output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Summarize the speaker's mood and answer in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"Recognized emotional category: \" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "[predicted_emotion]",
              "inst": "Summarize the speaker's mood. Answer in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finalize it by adding \"[predicted_emotion]\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's mood and answer in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"#\" in the front and \"#\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Answer in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules and assign \"predicted_emotion\" as the property key for SER related content. the json object should be in this pattern: {\"predicted_emotion\": \"(emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M051.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; limited to one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Describe the speaker's feelings; limited to one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Describe the speaker's feelings. Limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion recognized from speech: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Describe the speaker's feelings and limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"[Predicted_Emotion]\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Describe the speaker's feelings, limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; limited to one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format. Assign the string \"emotion_result\" as the field name for SER. a correctly structured entry is: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M057.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion. Write in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text. ",
          "lower_case": "State the speaker's emotion and write in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "**speaker_emotion**",
              "inst": "State the speaker's emotion and write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with an opening of \"**speaker_emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_Tone}",
              "inst": "State the speaker's emotion. Write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finalize it by adding \"{Emotional_Tone}\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's emotion, write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and write in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax; bind the task SER to the key \"emotion_result\". For reference, your output might look like: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M058.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion. summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion and summarize in one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "Tell the speaker's emotion and summarize in one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Tell the speaker's emotion and summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Start it with \"[VOICE_EMOTION]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION}",
              "inst": "Tell the speaker's emotion. Summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{EMOTION}\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's emotion; summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"***\" and \"***\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, summarize in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules; for the SER entry, use \"emotion_result\" as its key. One possible output form: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M060.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings. named in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Describe the speaker's feelings and named in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Describe the speaker's feelings; named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"Identified emotional tone: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_OUTPUT>",
              "inst": "Describe the speaker's feelings. Named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"<EMOTION_OUTPUT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's feelings; named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"**\" and \"**\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. Named in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax, the label \"speaker_emotion\" must correspond to the SER section. The desired structure is as shown: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M061.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "summarize in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, summarize in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood, summarize in one word. Output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output: ",
          "lower_case": "Specify the speaker's mood, summarize in one word. Output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Specify the speaker's mood; summarize in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"Recognized voice emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Specify the speaker's mood and summarize in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"[emotion_result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood, summarize in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"<s>\" and \"</s>\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, summarize in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container; bind the task SER to the key \"emotion_result\" and the json object should be in this pattern: {\"emotion_result\": \"(affect)\"} ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M062.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion and state it in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase ",
          "lower_case": "Explain the speaker's emotion; state it in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Explain the speaker's emotion; state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"<Affect>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_LABEL*",
              "inst": "Explain the speaker's emotion; state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"*EMOTION_LABEL*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the speaker's emotion; state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert the result inside the brackets \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and state it in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object and when structuring the result, use \"emotion_output\" for the SER section and the expected structure looks like this: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M063.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood and say it in exactly one word, select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", only output the emotion in uppercase format. ",
          "lower_case": "Summarize the speaker's mood, say it in exactly one word, select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "{Predicted_Emotion}",
              "inst": "Summarize the speaker's mood, say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starting with \"{Predicted_Emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Summarize the speaker's mood; say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"<EMOTION_RESULT>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's mood; say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; say it in exactly one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert your output into a json-compatible format and the output variable for SER is expected to be labeled \"emotion\" and here is a sample representation: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M064.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker and rendered in one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Explain the emotion of the speaker, rendered in one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "{SENTIMENT}",
              "inst": "Explain the emotion of the speaker, rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"{SENTIMENT}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Explain the emotion of the speaker; rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"<PERCEIVED_EMOTION>\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the emotion of the speaker and rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"<text>\" and closing \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. Rendered in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure. Represent SER in the json with the key \"emotion_tag\". Please follow the template: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M065.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion; rendered in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Specify the speaker's emotion, rendered in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion written entirely in lowercase letters: ",
          "prefix": [
            {
              "prefix": "<EMOTION>",
              "inst": "Specify the speaker's emotion; rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", launching with \"<EMOTION>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Specify the speaker's emotion and rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"{PERCEIVED_EMOTION}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the speaker's emotion, rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"[\" and \"]\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; rendered in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format, the field related to SER must be labeled with \"emotion_tag\" and the data should be formatted like this: {\"emotion_tag\": \"(affect)\"} ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M066.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion. named in one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER result in uppercase format only: ",
          "lower_case": "State the speaker's emotion, named in one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "**Emotion_Label**",
              "inst": "State the speaker's emotion. named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"**Emotion_Label**\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_STATE>",
              "inst": "State the speaker's emotion; named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"<EMOTIONAL_STATE>\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's emotion, named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"***\" as prefix and \"***\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. Named in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". give the result back in proper json notation, assign \"emotion_result\" as the property key for SER related content. You can format it as follows: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M067.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and addressed in one word and choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Express the speaker's mood, addressed in one word and choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "**affect**",
              "inst": "Express the speaker's mood and addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"**affect**\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Express the speaker's mood; addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*Emotion_Result*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's mood. Addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and addressed in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the result into a json-compatible structure. SER must be stored in the json under the key \"emotion_label\" and for example: {\"emotion_label\": \"(emotional tone)\"}: ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro03/Ses05F_impro03_M068.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling and only use one word, the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce uppercase-only emotion text. ",
          "lower_case": "Express the speaker's feeling. Only use one word, the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Express the speaker's feeling; only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Predicted mood label: \" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Label*",
              "inst": "Express the speaker's feeling and only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"*Emotion_Label*\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's feeling, only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Only use one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". serialize the result into json form, the label \"emotion_tag\" must correspond to the SER section, the formatting guide is: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion, mention in one word, pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only ",
          "lower_case": "Specify the speaker's emotion and mention in one word, pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion written entirely in lowercase letters: ",
          "prefix": [
            {
              "prefix": "*VOICE_EMOTION*",
              "inst": "Specify the speaker's emotion. mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*VOICE_EMOTION*\" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Specify the speaker's emotion. Mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"[Emotion]\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's emotion and mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"<\" at the start and \">\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, mention in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format. SER must be stored in the json under the key \"speaker_emotion\"; please use a format similar to: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F008.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "put in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, put in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling, put in one word. The answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "State the speaker's feeling. Put in one word. The answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "State the speaker's feeling, put in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make \"**Sentiment**\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the speaker's feeling and put in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and let \"**EMOTION_RESULT**\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's feeling and put in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; put in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting; please tag the SER information with the key \"sentiment\"; here is a sample representation: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F015.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion; state it in one word. Provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase emotion output ",
          "lower_case": "State the speaker's emotion. State it in one word. Provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "State the speaker's emotion; state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Predicted emotional output: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{Voice_Emotion}",
              "inst": "State the speaker's emotion, state it in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"{Voice_Emotion}\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's emotion, state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". bracket the result inside \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format. Structure your json so that SER is labeled as \"speaker_emotion\", one possible output form: {\"speaker_emotion\": \"(affect)\"} ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. Summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion; summarize in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters ",
          "lower_case": "Point out the speaker's emotion, summarize in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "Point out the speaker's emotion, summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"[AFFECT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Point out the speaker's emotion. summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{Mood}\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's emotion, summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; summarize in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string; link the key \"emotion\" directly to the SER data, the output should resemble: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F017.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "say it in exactly one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; say it in exactly one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker, say it in exactly one word. select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters ",
          "lower_case": "Summarize the emotion of the speaker. Say it in exactly one word. select one of \"happy\", \"sad\", \"angry\" or \"neutral\". Return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "[MOOD]",
              "inst": "Summarize the emotion of the speaker and say it in exactly one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"[MOOD]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Tag*",
              "inst": "Summarize the emotion of the speaker. Say it in exactly one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"*Emotion_Tag*\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the emotion of the speaker and say it in exactly one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and say it in exactly one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Shape the output using standard json conventions. Include the SER output under the key \"emotion_label\" and here's how a typical entry should look: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "defined in one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker and defined in one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker; defined in one word. Choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion result only in uppercase characters. ",
          "lower_case": "Describe the emotion of the speaker, defined in one word. Choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Describe the emotion of the speaker, defined in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"Recognized sentiment label: \" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Describe the emotion of the speaker and defined in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"**Perceived_Emotion**\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the emotion of the speaker; defined in one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. defined in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and bind the task SER to the key \"emotion_label\"; the output should resemble: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F022.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "expressed in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and expressed in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker, expressed in one word. choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the emotion label fully uppercase ",
          "lower_case": "State the emotion of the speaker and expressed in one word. choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "State the emotion of the speaker; expressed in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"Final emotion classification: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "State the emotion of the speaker. Expressed in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[Sentiment]\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the emotion of the speaker, expressed in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"(\" before and \")\" after. "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, expressed in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json. the field related to SER must be labeled with \"detected_emotion\"; the appropriate response template: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood, only in one word; the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Respond with the recognized emotion written in uppercase only. ",
          "lower_case": "State the speaker's mood, only in one word; the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "State the speaker's mood and only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Recognized feeling is: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "State the speaker's mood and only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"**Voice_Emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the speaker's mood; only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"[\" and \"]\" tags "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, only in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output the information using json formatting rules. When structuring the result, use \"emotion_tag\" for the SER section; here's how a typical entry should look: {\"emotion_tag\": \"(affect)\"} ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F038.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling, say it in exactly one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make the emotion recognition result all uppercase: ",
          "lower_case": "Summarize the speaker's feeling. Say it in exactly one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "**Mood**",
              "inst": "Summarize the speaker's feeling; say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". begin the output using \"**Mood**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Summarize the speaker's feeling. Say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"**predicted_emotion**\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's feeling. say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"\"\" and \"\"\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. Say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure and the SER value should be indexed by \"emotion_tag\"; one possible output form: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F039.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling, in just one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only. ",
          "lower_case": "Summarize the speaker's feeling. In just one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\" and present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "<PERCEIVED_EMOTION>",
              "inst": "Summarize the speaker's feeling, in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"<PERCEIVED_EMOTION>\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_label>",
              "inst": "Summarize the speaker's feeling. in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"<emotion_label>\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the speaker's feeling; in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"{\" as the left boundary and \"}\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, in just one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format; the field related to SER must be labeled with \"emotion_label\", follow this example to structure the data: {\"emotion_label\": \"(feeling)\"}. ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F040.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling. Just use one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion label in uppercase text only ",
          "lower_case": "State the speaker's feeling; just use one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "State the speaker's feeling. Just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*emotion_tag*\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "*Voice_Emotion*",
              "inst": "State the speaker's feeling. Just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"*Voice_Emotion*\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's feeling and just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. Just use one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting and the result corresponding to SER should be mapped to \"SER\", here is a sample representation: {\"SER\": \"(emotion)\"}. ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F041.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker and written in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return uppercase-only emotion recognition output ",
          "lower_case": "Summarize the emotion of the speaker; written in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Summarize the emotion of the speaker; written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starts with \"Speech emotion detected as: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION]",
              "inst": "Summarize the emotion of the speaker and written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"[EMOTION]\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the emotion of the speaker; written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"_\" and trailing \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker, written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format, \"predicted_emotion\" should be the identifier for the SER content. Please use a format similar to: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F042.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker. Just use one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output ",
          "lower_case": "Describe the emotion of the speaker. Just use one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "<feeling>",
              "inst": "Describe the emotion of the speaker and just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"<feeling>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Describe the emotion of the speaker. Just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"<Emotional_Tone>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the emotion of the speaker; just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"*\" in front and \"*\" behind. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; just use one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the data inside a properly formed json, the SER information must be placed under \"SER\". A correct formatting instance is: {\"SER\": \"(feeling)\"}. ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F043.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. Mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. Mention in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase: ",
          "lower_case": "Point out the speaker's feeling; mention in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Point out the speaker's feeling, mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"Predicted emotional output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Point out the speaker's feeling and mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"*Emotion_Output*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Point out the speaker's feeling; mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"<BOS>\" before the result and \"<EOS>\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; print the result using json object formatting. The SER value should be indexed by \"emotion_output\", follow this example to structure the data: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F044.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood. Concluded with one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label ",
          "lower_case": "Identify the speaker's mood, concluded with one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Identify the speaker's mood. concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"Detected emotion output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_State]",
              "inst": "Identify the speaker's mood. Concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and keep \"[Emotional_State]\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's mood; concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, concluded with one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules and the SER result must be identified using the key \"emotion_output\", a compliant example would appear like: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_F045.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood; answer in one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Explain the speaker's mood and answer in one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "Explain the speaker's mood, answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"*emotion_result*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_tone}",
              "inst": "Explain the speaker's mood; answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"{emotional_tone}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Explain the speaker's mood, answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place \"~\" at the beginning and \"~\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and answer in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make the output conform to json formatting and the label \"emotional_state\" must correspond to the SER section; keep your output consistent with: {\"emotional_state\": \"(emotion)\"}: ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; restricted to one word; must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters. ",
          "lower_case": "Describe the speaker's feelings. Restricted to one word; must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". Return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "*predicted_emotion*",
              "inst": "Describe the speaker's feelings. Restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"*predicted_emotion*\" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Describe the speaker's feelings; restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish everything with a \"{MOOD}\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's feelings; restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"[\" as the left boundary and \"]\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and restricted to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce a response that adheres to json syntax, the json attribute for SER is \"speaker_emotion\", output a json string such as: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "restricted to one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; restricted to one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker and restricted to one word. Provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase: ",
          "lower_case": "Tell the emotion of the speaker and restricted to one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Tell the emotion of the speaker and restricted to one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Speech emotion classification: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "[FEELING]",
              "inst": "Tell the emotion of the speaker and restricted to one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"[FEELING]\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the emotion of the speaker, restricted to one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<wrap>\" before and \"</wrap>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; restricted to one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format, the SER information must be placed under \"emotion\"; the json object should be in this pattern: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood. defined in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text: ",
          "lower_case": "Summarize the speaker's mood and defined in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Summarize the speaker's mood, defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Predicted mood label: \" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Summarize the speaker's mood and defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"*emotional_tone*\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's mood; defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"[\" and \"]\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output using a clean and valid json layout, the designated key for SER should remain \"emotion_label\" and a compliant example would appear like: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; revealed in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Describe the speaker's feelings, revealed in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "*Emotional_Tone*",
              "inst": "Describe the speaker's feelings and revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"*Emotional_Tone*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_RESULT*",
              "inst": "Describe the speaker's feelings and revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"*EMOTION_RESULT*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the speaker's feelings, revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; revealed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards. ensure \"predicted_emotion\" is used as the access key for SER. The result should be rendered in this format: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "with one single word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; with one single word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion and with one single word. return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Summarize the speaker's emotion and with one single word. Return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Summarize the speaker's emotion. With one single word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"The speaker's emotion is: \" heading things up: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Summarize the speaker's emotion and with one single word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"[Mood]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's emotion and with one single word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. with one single word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout and for the SER entry, use \"speaker_emotion\" as its key, here's how a typical entry should look: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in a single word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; in a single word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker; in a single word. Output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Specify the emotion of the speaker. In a single word. output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "*Sentiment*",
              "inst": "Specify the emotion of the speaker, in a single word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"*Sentiment*\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Specify the emotion of the speaker, in a single word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"*Emotion*\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the emotion of the speaker and in a single word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<BOS>\" and \"<EOS>\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and in a single word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions; use \"emotional_state\" as the json label for SER, use the following format in your response: {\"emotional_state\": \"(feeling)\"}. ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion, mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion and mention in one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion: ",
          "lower_case": "Summarize the speaker's emotion and mention in one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Summarize the speaker's emotion. Mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with the top marked by \"Resulting emotion classification: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_label>",
              "inst": "Summarize the speaker's emotion and mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"<emotion_label>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Summarize the speaker's emotion, mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"$\" and append \"$\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, mention in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules; the SER result must be identified using the key \"emotion\" and maintain the structure like so: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; using only one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Summarize the speaker's feeling and using only one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". Return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "<Emotion>",
              "inst": "Summarize the speaker's feeling. using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"<Emotion>\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Summarize the speaker's feeling, using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finish everything with a \"**emotion_result**\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Summarize the speaker's feeling, using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". put the result within the boundaries of \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, using only one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style. Allocate the key \"emotion_label\" for the data derived from SER, output a json string such as: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "delivered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and delivered in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker, delivered in one word. Only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER output as uppercase text only ",
          "lower_case": "Tell the emotion of the speaker. Delivered in one word. Only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Tell the emotion of the speaker. Delivered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Recognized feeling is: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Tell the emotion of the speaker. Delivered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"[Emotion_Output]\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the emotion of the speaker. delivered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"(\" at the beginning and \")\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Delivered in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object, when structuring the result, use \"predicted_emotion\" for the SER section; output a json string such as: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion; answer in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give only the predicted emotion using uppercase letters. ",
          "lower_case": "Explain the speaker's emotion, answer in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\". Return lowercase-only SER output: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Explain the speaker's emotion. answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Emotion category identified: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Explain the speaker's emotion; answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"*affect*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's emotion, answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"***\" and closing \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Answer in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards; the SER result must be identified using the key \"emotion_result\", a correctly structured entry is: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "concluded with one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Concluded with one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker. Concluded with one word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters ",
          "lower_case": "State the emotion of the speaker, concluded with one word. return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "<Mood>",
              "inst": "State the emotion of the speaker and concluded with one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Led by \"<Mood>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion]",
              "inst": "State the emotion of the speaker; concluded with one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Suffixed with \"[emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the emotion of the speaker, concluded with one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Frame the result with a leading \"[\" and trailing \"]\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; concluded with one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object. Assign the string \"emotional_state\" as the field name for SER, the appropriate response template: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; written in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Describe the speaker's feelings; written in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". Return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Describe the speaker's feelings; written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"**emotion_tag**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Describe the speaker's feelings and written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"*EMOTIONAL_STATE*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's feelings and written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"\"\" and \"\"\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and written in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce the output adhering to json format and SER must be stored in the json under the key \"emotion_tag\". Output a json string such as: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood and restricted to one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters. ",
          "lower_case": "Specify the speaker's mood, restricted to one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Specify the speaker's mood, restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Predicted mood label: \" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "Specify the speaker's mood. Restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finish the output with \"[EMOTION_TAG]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the speaker's mood; restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; restricted to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting. Write the SER result with \"emotion_label\" as its property name. Consider this sample format: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "explained in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, explained in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; explained in one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Point out the speaker's feeling, explained in one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Point out the speaker's feeling; explained in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Recognized affective category: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Point out the speaker's feeling and explained in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<emotional_tone>\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Point out the speaker's feeling, explained in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; explained in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object. the json attribute for SER is \"detected_emotion\", a proper example would be: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "in exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. In exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker; in exactly one word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Identify the emotion of the speaker, in exactly one word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Identify the emotion of the speaker, in exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"[EMOTION_LABEL]\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "Identify the emotion of the speaker, in exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"[Emotion_Tag]\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the emotion of the speaker, in exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and in exactly one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout and write the SER result with \"predicted_emotion\" as its property name, the output must match this structure: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood. Clarified in one word; choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters ",
          "lower_case": "Explain the speaker's mood; clarified in one word; choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "**emotion_result**",
              "inst": "Explain the speaker's mood. Clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"**emotion_result**\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "<VOICE_EMOTION>",
              "inst": "Explain the speaker's mood; clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<VOICE_EMOTION>\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's mood; clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"{\" at the start and \"}\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards, link the key \"emotion\" directly to the SER data, the output should resemble: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling. Say it in exactly one word, choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion ",
          "lower_case": "Express the speaker's feeling and say it in exactly one word, choose between \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Express the speaker's feeling and say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with an opening of \"<emotion_label>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Express the speaker's feeling. Say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and have \"[SENTIMENT]\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's feeling and say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and frame the result with a leading \"_\" and trailing \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and say it in exactly one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax. The json attribute for SER is \"predicted_emotion\", keep your output consistent with: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings. conveyed in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the recognized emotion in all uppercase letters ",
          "lower_case": "Describe the speaker's feelings; conveyed in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Describe the speaker's feelings, conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"The emotional tone detected: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{AFFECT}",
              "inst": "Describe the speaker's feelings and conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"{AFFECT}\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's feelings. Conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". use \"**\" and \"**\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, conveyed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style; the json representation of SER must be keyed as \"predicted_emotion\", the appropriate response template: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "written in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion, written in one word. output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion; written in one word. output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase ",
          "lower_case": "Summarize the speaker's emotion and written in one word. Output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only: ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Summarize the speaker's emotion; written in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Emotion recognized from speech: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_state}",
              "inst": "Summarize the speaker's emotion and written in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"{emotional_state}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's emotion and written in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"<start>\" and \"<end>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; written in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json and bind the task SER to the key \"emotional_state\". Your final output should take the form: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker; in just one word. Provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "Specify the emotion of the speaker and in just one word. provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "{Emotion_Label}",
              "inst": "Specify the emotion of the speaker, in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with an opening of \"{Emotion_Label}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_output}",
              "inst": "Specify the emotion of the speaker, in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"{emotion_output}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the emotion of the speaker. in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; in just one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string. attach \"emotion_label\" to the result of SER in the final output. for reference, your output might look like: {\"emotion_label\": \"(feeling)\"}. ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "declared in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. Declared in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker. declared in one word. provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only ",
          "lower_case": "Tell the emotion of the speaker, declared in one word. Provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Tell the emotion of the speaker. Declared in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"<Affect>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Tell the emotion of the speaker and declared in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"{affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the emotion of the speaker; declared in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result inside a pair of \"<start>\" and \"<end>\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Declared in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax; the json attribute for SER is \"emotional_state\" and your final output should take the form: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M028.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion; articulated in one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion result as uppercase letters only: ",
          "lower_case": "Specify the speaker's emotion, articulated in one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "Specify the speaker's emotion; articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"[AFFECT]\" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Output>",
              "inst": "Specify the speaker's emotion and articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<Emotion_Output>\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Specify the speaker's emotion. Articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"<start>\" and \"<end>\" tags "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, articulated in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules and write the SER result with \"emotion_result\" as its property name. To illustrate, use: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M029.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling; summed up in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Express the speaker's feeling. Summed up in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "{Emotion}",
              "inst": "Express the speaker's feeling; summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"{Emotion}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "Express the speaker's feeling and summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<perceived_emotion>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's feeling. Summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"**\" and \"**\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, summed up in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Serialize the result into json form, use \"sentiment\" as the designated key for SER and a correct formatting instance is: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling, simply in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label: ",
          "lower_case": "Point out the speaker's feeling and simply in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "<EMOTION_RESULT>",
              "inst": "Point out the speaker's feeling; simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"<EMOTION_RESULT>\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Point out the speaker's feeling; simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"*Emotion*\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Point out the speaker's feeling and simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"<s>\" as the left boundary and \"</s>\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Simply in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json; structure your json so that SER is labeled as \"sentiment\". A compliant example would appear like: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M031.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling; call it in one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Identify the speaker's feeling, call it in one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "[Emotional_State]",
              "inst": "Identify the speaker's feeling; call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"[Emotional_State]\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Identify the speaker's feeling; call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**PREDICTED_EMOTION**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the speaker's feeling. Call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"{\" and \"}\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; call it in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards; assign \"predicted_emotion\" as the property key for SER related content. The appropriate response template: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M032.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood and say it in exactly one word; must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Point out the speaker's mood. Say it in exactly one word; must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "**emotion_result**",
              "inst": "Point out the speaker's mood and say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", fronted by \"**emotion_result**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Point out the speaker's mood and say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and put \"[SENTIMENT]\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Point out the speaker's mood; say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"\"\" before and \"\"\" after: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and say it in exactly one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax. Format the SER data using \"emotion_result\" as its key name; a demonstration of the expected format: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M033.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion and just one word and the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and format the emotion label so that all text is uppercase ",
          "lower_case": "State the speaker's emotion. Just one word and the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\". reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "State the speaker's emotion, just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Speech-derived emotion: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "State the speaker's emotion, just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**affect**\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's emotion; just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, just one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure; when structuring the result, use \"emotion_result\" for the SER section; the expected structure looks like this: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M034.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; kept to one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the emotion result using uppercase letters only ",
          "lower_case": "State the speaker's mood; kept to one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "{Predicted_Emotion}",
              "inst": "State the speaker's mood; kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin it with \"{Predicted_Emotion}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_state]",
              "inst": "State the speaker's mood, kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[emotional_state]\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's mood. kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and kept to one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation, the field related to SER must be labeled with \"emotion_tag\"; the json result must follow this form: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M035.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion; limited to one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form: ",
          "lower_case": "Summarize the speaker's emotion and limited to one word. must be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Summarize the speaker's emotion and limited to one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"{emotion_tag}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Summarize the speaker's emotion. Limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"*Feeling*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's emotion, limited to one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"#\" before the result and \"#\" after it "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. Limited to one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format and bind the task SER to the key \"emotion\"; this is an appropriate format: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M036.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood; kept to one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "Describe the speaker's mood and kept to one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "Describe the speaker's mood. Kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The mood derived from voice: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "Describe the speaker's mood, kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"**emotion_tag**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood and kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bind the result using \"<start>\" and \"<end>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, kept to one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string; when structuring the result, use \"emotional_state\" for the SER section. One possible output form: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M037.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "simply in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, simply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; simply in one word. allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the recognized emotion into uppercase text: ",
          "lower_case": "Point out the speaker's feeling, simply in one word. allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "<Emotional_State>",
              "inst": "Point out the speaker's feeling, simply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Headed by \"<Emotional_State>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Point out the speaker's feeling; simply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finalize it by adding \"[Predicted_Emotion]\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's feeling; simply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, simply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the output in a structured json layout and the key \"emotion_tag\" maps to the result of SER. The json result must follow this form: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M038.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood. addressed in one word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase ",
          "lower_case": "Express the speaker's mood and addressed in one word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "Express the speaker's mood and addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"{Speaker_Emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Express the speaker's mood. Addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"<emotion_tag>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's mood and addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"<s>\" and \"</s>\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; addressed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and serialize the result into json form. Bind the task SER to the key \"sentiment\"; for reference, your output might look like: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M039.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and presented in one word. chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters: ",
          "lower_case": "Describe the emotion of the speaker, presented in one word. Chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Describe the emotion of the speaker. presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Identified emotion label: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "<AFFECT>",
              "inst": "Describe the emotion of the speaker and presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow up by appending \"<AFFECT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the emotion of the speaker. Presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, presented in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards. Assign the string \"speaker_emotion\" as the field name for SER, your final output should take the form: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M040.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and respond in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion. ",
          "lower_case": "Describe the emotion of the speaker and respond in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "Describe the emotion of the speaker; respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*emotion_result*\" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Describe the emotion of the speaker, respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure the final part is \"{emotion_label}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the emotion of the speaker, respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"$\" and \"$\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; respond in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style; the output variable for SER is expected to be labeled \"emotion_result\", when in doubt, refer to: {\"emotion_result\": \"(affect)\"} ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M041.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and clarified in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters ",
          "lower_case": "Express the speaker's mood. Clarified in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Express the speaker's mood, clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"[EMOTION_LABEL]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "Express the speaker's mood and clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"{EMOTION_TAG}\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's mood, clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"*\" and \"*\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; clarified in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax and for the SER entry, use \"emotional_state\" as its key and the json representation should be like: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M042.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and state it in one word. output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER result in uppercase format only ",
          "lower_case": "Identify the speaker's feeling and state it in one word. Output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Identify the speaker's feeling and state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"[VOICE_EMOTION]\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_State*",
              "inst": "Identify the speaker's feeling and state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"*Emotional_State*\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's feeling; state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and state it in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". organize the result in a json-style dictionary. The output variable for SER is expected to be labeled \"sentiment\"; one possible output form: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro04/Ses05F_impro04_M043.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling and defined in one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Summarize the speaker's feeling. Defined in one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Summarize the speaker's feeling and defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{feeling}\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_output>",
              "inst": "Summarize the speaker's feeling. Defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And write \"<emotion_output>\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's feeling. defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. Defined in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure and when formatting, associate SER with \"emotion_output\" and use the following format in your response: {\"emotion_output\": \"(emotional tone)\"}. ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "chosen in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; chosen in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling, chosen in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only. ",
          "lower_case": "Identify the speaker's feeling, chosen in one word. Pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "{EMOTION_OUTPUT}",
              "inst": "Identify the speaker's feeling. Chosen in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{EMOTION_OUTPUT}\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "<MOOD>",
              "inst": "Identify the speaker's feeling; chosen in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"<MOOD>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's feeling. Chosen in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"(\" as prefix and \")\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling. chosen in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style; the field related to SER must be labeled with \"predicted_emotion\"; your result should mirror this: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "in just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and in just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion. In just one word and choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Identify the speaker's emotion. in just one word and choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Identify the speaker's emotion. In just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; START WITH \"*Emotion_Tag*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Identify the speaker's emotion; in just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"*perceived_emotion*\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's emotion and in just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; in just one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure. When structuring the result, use \"predicted_emotion\" for the SER section, the output should resemble: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion, only in one word, select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the uppercase version of the detected emotion: ",
          "lower_case": "Describe the speaker's emotion; only in one word, select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "{predicted_emotion}",
              "inst": "Describe the speaker's emotion and only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"{predicted_emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Describe the speaker's emotion; only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure \"*PREDICTED_EMOTION*\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the speaker's emotion, only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place \"<text>\" before and \"</text>\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object; the label \"sentiment\" must correspond to the SER section; a correct formatting instance is: {\"sentiment\": \"(emotion)\"}: ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion. just use one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase ",
          "lower_case": "Point out the speaker's emotion, just use one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Point out the speaker's emotion; just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin the output using \"Predicted speaker emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Point out the speaker's emotion, just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and include \"**voice_emotion**\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Point out the speaker's emotion, just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"[\" on the left and \"]\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and just use one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting, the label \"sentiment\" must correspond to the SER section; for example: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood and summed in one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form. ",
          "lower_case": "State the speaker's mood; summed in one word. chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "State the speaker's mood. Summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"Predicted mood label: \" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "State the speaker's mood. Summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and label the end of the result with \"**PREDICTED_EMOTION**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the speaker's mood. Summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, summed in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format, the json representation of SER must be keyed as \"emotion\"; output a json string such as: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood, reply in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text. ",
          "lower_case": "Summarize the speaker's mood and reply in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "{predicted_emotion}",
              "inst": "Summarize the speaker's mood and reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with the top marked by \"{predicted_emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "Summarize the speaker's mood; reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"[Sentiment]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's mood, reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"<s>\" before the result and \"</s>\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. reply in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make the output conform to json formatting. Write the SER result with \"sentiment\" as its property name. You are expected to return: {\"sentiment\": \"(affect)\"}. ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood, write in one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result: ",
          "lower_case": "Tell the speaker's mood, write in one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "[emotional_tone]",
              "inst": "Tell the speaker's mood and write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"[emotional_tone]\" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Tell the speaker's mood, write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And keep \"*PREDICTED_EMOTION*\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the speaker's mood, write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"{\" in front and \"}\" behind. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. Write in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure, the key \"emotion_tag\" maps to the result of SER; refer to this sample output: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "say it in exactly one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, say it in exactly one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion, say it in exactly one word. output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only: ",
          "lower_case": "Explain the speaker's emotion and say it in exactly one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "*Mood*",
              "inst": "Explain the speaker's emotion and say it in exactly one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"*Mood*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Explain the speaker's emotion and say it in exactly one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and keep \"{Speaker_Emotion}\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Explain the speaker's emotion; say it in exactly one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"~\" in front and \"~\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. say it in exactly one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json and the output variable for SER is expected to be labeled \"emotion_tag\"; format your response exactly as: {\"emotion_tag\": \"(mood)\"} ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F018.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion and chosen in one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion ",
          "lower_case": "Tell the speaker's emotion. Chosen in one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "*EMOTION*",
              "inst": "Tell the speaker's emotion and chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"*EMOTION*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Tell the speaker's emotion. Chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"[Predicted_Emotion]\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's emotion, chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"#\" and \"#\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and chosen in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting, place the result of SER beneath the key \"emotion\". Consider this sample format: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F019.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "with a single word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, with a single word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and with a single word. only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Point out the speaker's feeling; with a single word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Point out the speaker's feeling and with a single word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin the output using \"Detected emotion output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Point out the speaker's feeling, with a single word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"*SPEAKER_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's feeling, with a single word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"**\" and \"**\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. With a single word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". produce a response that adheres to json syntax, SER must be stored in the json under the key \"predicted_emotion\". the result should be rendered in this format: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "addressed in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. addressed in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood. Addressed in one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the emotion result using uppercase letters only ",
          "lower_case": "Summarize the speaker's mood, addressed in one word. The selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "[PERCEIVED_EMOTION]",
              "inst": "Summarize the speaker's mood, addressed in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"[PERCEIVED_EMOTION]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_TAG**",
              "inst": "Summarize the speaker's mood; addressed in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"**EMOTION_TAG**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the speaker's mood, addressed in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"**\" and \"**\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and addressed in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format, the json representation of SER must be keyed as \"sentiment\" and the output should resemble: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F021.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "conveyed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; conveyed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion. Conveyed in one word. provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters: ",
          "lower_case": "State the speaker's emotion, conveyed in one word. provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "State the speaker's emotion. Conveyed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"[Voice_Emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "State the speaker's emotion; conveyed in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"<perceived_emotion>\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the speaker's emotion; conveyed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result fully with \"<BOS>\" as the left boundary and \"<EOS>\" as the right "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and conveyed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format; ensure that SER is stored under the key \"emotion_output\", the output should resemble: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F022.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling and restricted to one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the emotion label fully uppercase: ",
          "lower_case": "Identify the speaker's feeling and restricted to one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "{Emotional_State}",
              "inst": "Identify the speaker's feeling, restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Emotional_State}\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Identify the speaker's feeling. Restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**emotion_label**\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's feeling; restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; restricted to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container; structure your json so that SER is labeled as \"emotional_state\"; the desired structure is as shown: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F023.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker. Conveyed in one word and must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the uppercase emotion result ",
          "lower_case": "Summarize the emotion of the speaker and conveyed in one word and must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "Summarize the emotion of the speaker and conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open it with \"The detected emotional state is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Summarize the emotion of the speaker. Conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"*PREDICTED_EMOTION*\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Summarize the emotion of the speaker; conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result between \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker, conveyed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation and record SER using \"detected_emotion\" as the key in the json structure. The json object should be in this pattern: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F024.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "chosen in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, chosen in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion. Chosen in one word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Detect the emotion and format all letters as uppercase: ",
          "lower_case": "Explain the speaker's emotion, chosen in one word. return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "**predicted_emotion**",
              "inst": "Explain the speaker's emotion. Chosen in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"**predicted_emotion**\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Explain the speaker's emotion. Chosen in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<PERCEIVED_EMOTION>\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's emotion and chosen in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"{\" and \"}\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and chosen in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules; the SER result must be identified using the key \"emotion\". The output must match this structure: {\"emotion\": \"(mood)\"} ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F031.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker. Declared in one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion result only in uppercase characters ",
          "lower_case": "Specify the emotion of the speaker, declared in one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\", output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "{PERCEIVED_EMOTION}",
              "inst": "Specify the emotion of the speaker, declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{PERCEIVED_EMOTION}\" opening the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Specify the emotion of the speaker and declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"**EMOTIONAL_STATE**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the emotion of the speaker and declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, declared in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string; place the result of SER beneath the key \"emotion_label\"; a demonstration of the expected format: {\"emotion_label\": \"(mood)\"}: ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "write in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling, write in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling; write in one word. only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide just the uppercase version of the emotion ",
          "lower_case": "Tell the speaker's feeling, write in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Tell the speaker's feeling. Write in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*emotional_tone*\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Tell the speaker's feeling, write in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"*perceived_emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the speaker's feeling. write in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"[\" at the start and \"]\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. Write in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting. The output variable for SER is expected to be labeled \"detected_emotion\", keep your output consistent with: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood; reply in one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Tell the speaker's mood, reply in one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\". make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Tell the speaker's mood; reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With an opening of \"Resulting emotion classification: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Tell the speaker's mood. reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish everything with a \"<Emotional_Tone>\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the speaker's mood, reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"<start>\" before and \"<end>\" after "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood, reply in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container, use \"detected_emotion\" as the designated key for SER; you are expected to return: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling and chosen in one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Express the speaker's feeling; chosen in one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Express the speaker's feeling, chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Recognized voice emotion: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{FEELING}",
              "inst": "Express the speaker's feeling; chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"{FEELING}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's feeling, chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and chosen in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format and make sure the SER output is labeled \"emotion_output\"; a compliant example would appear like: {\"emotion_output\": \"(mood)\"}: ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_F042.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker and explained in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion label in uppercase text only ",
          "lower_case": "Express the emotion of the speaker, explained in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "<Emotion_Tag>",
              "inst": "Express the emotion of the speaker; explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<Emotion_Tag>\" leading. "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Express the emotion of the speaker, explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<emotional_tone>\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the emotion of the speaker, explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place \"(\" at the beginning and \")\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. explained in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is formatted as valid json, use \"speaker_emotion\" as the json label for SER and for example: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "conveyed in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and conveyed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood. conveyed in one word. Only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the emotion label in uppercase form: ",
          "lower_case": "Specify the speaker's mood. Conveyed in one word. Only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "**perceived_emotion**",
              "inst": "Specify the speaker's mood, conveyed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**perceived_emotion**\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Tag>",
              "inst": "Specify the speaker's mood, conveyed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"<Emotion_Tag>\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's mood and conveyed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and conveyed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format and write the SER result with \"emotion_label\" as its property name, the desired structure is as shown: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Summed up in one word. Choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the recognized emotion into uppercase text ",
          "lower_case": "Express the speaker's feeling and summed up in one word. Choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "<Emotion_Result>",
              "inst": "Express the speaker's feeling. Summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix with \"<Emotion_Result>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Express the speaker's feeling, summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And include \"*EMOTIONAL_TONE*\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's feeling, summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"**\" and \"**\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation. Assign the string \"speaker_emotion\" as the field name for SER, the desired structure is as shown: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; summed in one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters. ",
          "lower_case": "Describe the speaker's feelings; summed in one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Describe the speaker's feelings, summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"Detected emotion output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Describe the speaker's feelings and summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"[Feeling]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Describe the speaker's feelings, summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"'\" before the result and \"'\" after it "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; summed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style. bind the task SER to the key \"emotion_result\", consider this sample format: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion; write in one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters. ",
          "lower_case": "Describe the speaker's emotion. Write in one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "<VOICE_EMOTION>",
              "inst": "Describe the speaker's emotion and write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<VOICE_EMOTION>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**PERCEIVED_EMOTION**",
              "inst": "Describe the speaker's emotion. Write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"**PERCEIVED_EMOTION**\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Describe the speaker's emotion and write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"'\" and \"'\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, write in one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the data inside a properly formed json and assign the string \"speaker_emotion\" as the field name for SER and the desired structure is as shown: {\"speaker_emotion\": \"(feeling)\"}. ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "state in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. State in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, state in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". produce only uppercase text from the SER result: ",
          "lower_case": "Explain the speaker's feeling. State in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "**EMOTION_RESULT**",
              "inst": "Explain the speaker's feeling. state in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix it with \"**EMOTION_RESULT**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Label]",
              "inst": "Explain the speaker's feeling. State in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and include \"[Emotion_Label]\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the speaker's feeling, state in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is framed by \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, state in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, for the SER entry, use \"SER\" as its key. The output must match this structure: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling, answer in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase: ",
          "lower_case": "Tell the speaker's feeling and answer in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase: ",
          "prefix": [
            {
              "prefix": "{EMOTIONAL_TONE}",
              "inst": "Tell the speaker's feeling and answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; commence with \"{EMOTIONAL_TONE}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion>",
              "inst": "Tell the speaker's feeling and answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"<Emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's feeling and answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"_\" before and \"_\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; answer in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object; link the key \"emotion_label\" directly to the SER data, the formatting guide is: {\"emotion_label\": \"(emotion)\"} ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; in one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; in one single word and select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase ",
          "lower_case": "Point out the speaker's feeling and in one single word and select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "<Emotion_Tag>",
              "inst": "Point out the speaker's feeling. In one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". preceded by \"<Emotion_Tag>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Point out the speaker's feeling and in one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and apply \"*emotional_tone*\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's feeling, in one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"***\" in the front and \"***\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, in one single word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and assign \"sentiment\" as the property key for SER related content; please follow the template: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in one single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and in one single word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, in one single word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase emotion output: ",
          "lower_case": "State the speaker's mood, in one single word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "[voice_emotion]",
              "inst": "State the speaker's mood and in one single word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix it with \"[voice_emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "State the speaker's mood. In one single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"**Perceived_Emotion**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's mood, in one single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"$\" as the left boundary and \"$\" as the right "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and in one single word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style, the key for SER should be \"emotion\" respectively, use the following format in your response: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling; chosen in one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion. ",
          "lower_case": "Express the speaker's feeling, chosen in one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Express the speaker's feeling; chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"Identified emotion label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Sentiment}",
              "inst": "Express the speaker's feeling and chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"{Sentiment}\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's feeling, chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. chosen in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result and the designated key for SER should remain \"predicted_emotion\", a demonstration of the expected format: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling; summed up in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase: ",
          "lower_case": "Specify the speaker's feeling. Summed up in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Specify the speaker's feeling, summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". starting with \"Resulting emotion classification: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Specify the speaker's feeling; summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"[EMOTIONAL_STATE]\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's feeling and summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. Summed up in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation, the key for SER should be \"emotion_result\" respectively. a correctly structured entry is: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "respond in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, respond in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker and respond in one word. choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes. ",
          "lower_case": "Identify the emotion of the speaker. Respond in one word. Choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "*EMOTION_LABEL*",
              "inst": "Identify the emotion of the speaker; respond in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"*EMOTION_LABEL*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Identify the emotion of the speaker. respond in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"*Emotion_Output*\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Identify the emotion of the speaker and respond in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"[\" in the front and \"]\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. respond in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format, the result corresponding to SER should be mapped to \"sentiment\". this is an appropriate format: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "answer in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; answer in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling, answer in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase text for the predicted emotion. ",
          "lower_case": "Specify the speaker's feeling and answer in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Specify the speaker's feeling; answer in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"Predicted mood label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**sentiment**",
              "inst": "Specify the speaker's feeling and answer in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"**sentiment**\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's feeling and answer in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"#\" and \"#\" markers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. Answer in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Give the result back in proper json notation and the designated key for SER should remain \"emotion_result\", please use a format similar to: {\"emotion_result\": \"(perceived emotion)\"} ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "state in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, state in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling and state in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with uppercase-only predicted emotion text ",
          "lower_case": "State the speaker's feeling and state in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "State the speaker's feeling. State in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Speech emotion detected as: \" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION*",
              "inst": "State the speaker's feeling; state in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"*EMOTION*\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's feeling, state in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; state in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format and attach \"speaker_emotion\" to the result of SER in the final output; your result should mirror this: {\"speaker_emotion\": \"(affect)\"}: ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "in just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, in just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood, in just one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format: ",
          "lower_case": "Tell the speaker's mood. In just one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "Tell the speaker's mood, in just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The mood derived from voice: \" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "<sentiment>",
              "inst": "Tell the speaker's mood. In just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"<sentiment>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's mood; in just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. In just one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object, the json attribute for SER is \"detected_emotion\", one possible output form: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker and just use one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words ",
          "lower_case": "State the emotion of the speaker. Just use one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". Present only the lowercase emotion label as the result ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "State the emotion of the speaker and just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and start it with \"Perceived emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_state]",
              "inst": "State the emotion of the speaker; just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And concatenate \"[emotional_state]\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the emotion of the speaker; just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"<wrap>\" to the beginning and \"</wrap>\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, just use one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format, label the output of SER using the key \"sentiment\", output a json string such as: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in just one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, in just one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; in just one word. return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER label as uppercase text. ",
          "lower_case": "Express the speaker's mood; in just one word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "[PERCEIVED_EMOTION]",
              "inst": "Express the speaker's mood. in just one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"[PERCEIVED_EMOTION]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_OUTPUT**",
              "inst": "Express the speaker's mood and in just one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"**EMOTION_OUTPUT**\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's mood. In just one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"$\" and \"$\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and in just one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Give the result back in proper json notation. Encode the SER content using \"emotional_state\" as its identifier, the json representation should be like: {\"emotional_state\": \"(emotion)\"}: ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "only use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Only use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling. Only use one word. only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only ",
          "lower_case": "Express the speaker's feeling; only use one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_TONE*",
              "inst": "Express the speaker's feeling. Only use one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*EMOTIONAL_TONE*\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Express the speaker's feeling, only use one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"{Emotional_State}\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the speaker's feeling. only use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"{\" to the beginning and \"}\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and only use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions and record SER using \"emotion\" as the key in the json structure; the expected structure looks like this: {\"emotion\": \"(mood)\"} ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "concluded with one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. concluded with one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood and concluded with one word. Provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output. ",
          "lower_case": "Describe the speaker's mood; concluded with one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Describe the speaker's mood and concluded with one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin the output using \"[EMOTION_RESULT]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Describe the speaker's mood, concluded with one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"<EMOTIONAL_TONE>\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood and concluded with one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and concluded with one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax. \"detected_emotion\" should be the identifier for the SER content; use the following format in your response: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion, rendered in one word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output ",
          "lower_case": "Specify the speaker's emotion; rendered in one word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Specify the speaker's emotion and rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"Determined mood from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Specify the speaker's emotion. rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finalize it by adding \"**voice_emotion**\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's emotion and rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; rendered in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object. Represent SER in the json with the key \"speaker_emotion\" and please use a format similar to: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "kept to one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Kept to one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood, kept to one word. Must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion: ",
          "lower_case": "Specify the speaker's mood. Kept to one word. must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_TONE*",
              "inst": "Specify the speaker's mood and kept to one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*EMOTIONAL_TONE*\" opening up the text: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_State]",
              "inst": "Specify the speaker's mood. Kept to one word. must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"[Emotional_State]\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood. Kept to one word. must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and kept to one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object and when structuring the result, use \"detected_emotion\" for the SER section. This is an appropriate format: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings and named in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the detected emotion entirely in uppercase. ",
          "lower_case": "Describe the speaker's feelings, named in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Describe the speaker's feelings. named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"The emotional tone detected: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Describe the speaker's feelings and named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"{Emotional_State}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Describe the speaker's feelings. Named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"'\" and \"'\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and record SER using \"detected_emotion\" as the key in the json structure and the appropriate response template: {\"detected_emotion\": \"(mood)\"} ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, restricted to one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters: ",
          "lower_case": "Identify the speaker's feeling; restricted to one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\". produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Identify the speaker's feeling. Restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"*emotional_tone*\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Identify the speaker's feeling; restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"*mood*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the speaker's feeling, restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"*\" and suffix it with \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; restricted to one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string and use \"emotion_label\" as the json label for SER. Consider this sample format: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M031.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, respond in one word and choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase ",
          "lower_case": "Identify the speaker's feeling, respond in one word and choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Identify the speaker's feeling. Respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<emotion_label>\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Identify the speaker's feeling and respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"{emotion_label}\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's feeling; respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, respond in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style and when formatting, associate SER with \"predicted_emotion\"; one possible output form: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M032.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, mention in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase: ",
          "lower_case": "Express the speaker's feeling. mention in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Express the speaker's feeling; mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", commence with \"The speaker's mood is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "Express the speaker's feeling and mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"*emotion_result*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's feeling, mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Mention in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting and for the SER entry, use \"emotion_output\" as its key, keep your output consistent with: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M033.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and summed in one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters ",
          "lower_case": "Tell the emotion of the speaker and summed in one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Tell the emotion of the speaker. summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with the top marked by \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Tell the emotion of the speaker, summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"{MOOD}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the emotion of the speaker; summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, summed in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make the output conform to json formatting, use \"sentiment\" as the json label for SER, the json result must follow this form: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M034.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood. Summed up in one word. choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion result as uppercase letters only. ",
          "lower_case": "Summarize the speaker's mood. Summed up in one word. choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Summarize the speaker's mood, summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Final predicted emotion: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_OUTPUT>",
              "inst": "Summarize the speaker's mood, summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have \"<EMOTION_OUTPUT>\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's mood; summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result inside the bounds of \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Summed up in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container, structure your json so that SER is labeled as \"emotional_state\", the json object should be in this pattern: {\"emotional_state\": \"(feeling)\"}. ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M036.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "addressed in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, addressed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, addressed in one word. only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert and return the detected emotion fully uppercase: ",
          "lower_case": "Identify the speaker's mood. Addressed in one word. Only select from \"happy\", \"sad\", \"angry\" or \"neutral\". Return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "*EMOTION_RESULT*",
              "inst": "Identify the speaker's mood and addressed in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"*EMOTION_RESULT*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Identify the speaker's mood, addressed in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"<EMOTION_RESULT>\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's mood and addressed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"(\" and \")\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, addressed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the response using json syntax. Please assign the key \"predicted_emotion\" to the SER field. A correctly structured entry is: {\"predicted_emotion\": \"(emotional tone)\"} ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M037.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion, rendered in one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase ",
          "lower_case": "Express the speaker's emotion; rendered in one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Express the speaker's emotion, rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", open it with \"*Speaker_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "Express the speaker's emotion. rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{emotion_result}\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's emotion and rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"_\" and closing \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Rendered in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure; assign \"emotion_result\" as the property key for SER related content. Format your response exactly as: {\"emotion_result\": \"(mood)\"}: ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M039.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "state in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; state in one word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling; state in one word. The emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text. ",
          "lower_case": "State the speaker's feeling; state in one word. the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "State the speaker's feeling, state in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"[emotion_label]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "State the speaker's feeling; state in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"*EMOTION_OUTPUT*\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the speaker's feeling and state in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"[\" and suffix it with \"]\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; state in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary. The SER result must be identified using the key \"emotion\". For example: {\"emotion\": \"(feeling)\"}. ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M040.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "using only one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. using only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood and using only one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only. ",
          "lower_case": "Summarize the speaker's mood. Using only one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". format the emotion label so that all text is lowercase: ",
          "prefix": [
            {
              "prefix": "<PERCEIVED_EMOTION>",
              "inst": "Summarize the speaker's mood and using only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin with \"<PERCEIVED_EMOTION>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{VOICE_EMOTION}",
              "inst": "Summarize the speaker's mood and using only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"{VOICE_EMOTION}\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Summarize the speaker's mood, using only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"***\" before and \"***\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. using only one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json, represent SER in the json with the key \"SER\" and a correct formatting instance is: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M041.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker. Conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker, conveyed in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output. ",
          "lower_case": "Explain the emotion of the speaker, conveyed in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Explain the emotion of the speaker; conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"<SPEAKER_EMOTION>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Explain the emotion of the speaker and conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"*Emotional_Tone*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the emotion of the speaker. conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"***\" on the left and \"***\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; conveyed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result and the key \"emotion_label\" maps to the result of SER. Here's how a typical entry should look: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M048.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker. Articulated in one word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the uppercase emotion result. ",
          "lower_case": "Specify the emotion of the speaker and articulated in one word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Specify the emotion of the speaker; articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"Emotion result from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Specify the emotion of the speaker and articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and suffix the output with \"{Feeling}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the emotion of the speaker, articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"<text>\" and \"</text>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; articulated in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting; the SER information must be placed under \"emotion_label\"; one possible output form: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M050.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "in a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, in a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion and in a single word. Return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result. ",
          "lower_case": "Identify the speaker's emotion, in a single word. Return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Identify the speaker's emotion and in a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"{feeling}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Identify the speaker's emotion. In a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish everything with a \"**emotion_output**\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's emotion. In a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"(\" before and \")\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion. In a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure and the json attribute for SER is \"emotion\"; a correctly structured entry is: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M051.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion, captured in one word; output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result. ",
          "lower_case": "Describe the speaker's emotion and captured in one word; output must be \"happy\", \"sad\", \"angry\" or \"neutral\". return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "<Mood>",
              "inst": "Describe the speaker's emotion and captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"<Mood>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Describe the speaker's emotion, captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"{Emotional_State}\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's emotion, captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put \"[\" and \"]\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. captured in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object; place the result of SER beneath the key \"SER\" and you are expected to return: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M052.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "state in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and state in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion and state in one word. must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase. ",
          "lower_case": "Point out the speaker's emotion. State in one word. Must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\", detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Point out the speaker's emotion, state in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"{feeling}\" at the very top: "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Point out the speaker's emotion. State in one word. must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"[VOICE_EMOTION]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's emotion. State in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"$\" and \"$\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and state in one word. must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json; structure your json so that SER is labeled as \"emotion_result\"; maintain the structure like so: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro05/Ses05F_impro05_M053.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood and rendered in one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only. ",
          "lower_case": "Summarize the speaker's mood; rendered in one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "{emotion_output}",
              "inst": "Summarize the speaker's mood and rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"{emotion_output}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Summarize the speaker's mood and rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"*emotion_label*\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's mood. Rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, rendered in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string and the field related to SER must be labeled with \"emotional_state\"; follow this example to structure the data: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood and state it in one word and return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Identify the speaker's mood and state it in one word and return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Identify the speaker's mood and state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Predicted emotional tone: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "Identify the speaker's mood, state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and let \"**SENTIMENT**\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's mood. state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"<s>\" and \"</s>\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. state it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object and \"emotion_tag\" should be the identifier for the SER content. For reference, your output might look like: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood. Just one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "Describe the speaker's mood and just one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_STATE>",
              "inst": "Describe the speaker's mood. Just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"<EMOTIONAL_STATE>\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Describe the speaker's mood. Just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"*EMOTIONAL_STATE*\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's mood, just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and just one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object. The label \"SER\" must correspond to the SER section; please use a format similar to: {\"SER\": \"(perceived emotion)\"}. ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and summarized in one word and must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce only uppercase text from the SER result ",
          "lower_case": "Point out the speaker's feeling and summarized in one word and must return \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Point out the speaker's feeling; summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[Voice_Emotion]\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Point out the speaker's feeling; summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"**Emotion_Output**\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's feeling, summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result fully with \"{\" as the left boundary and \"}\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Summarized in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure. Ensure \"sentiment\" is used as the access key for SER. To illustrate, use: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker, describe in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Summarize the emotion of the speaker and describe in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "Summarize the emotion of the speaker; describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"**Sentiment**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[PREDICTED_EMOTION]",
              "inst": "Summarize the emotion of the speaker and describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"[PREDICTED_EMOTION]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the emotion of the speaker and describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; describe in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result in a standard json structure and the label \"SER\" must correspond to the SER section, the output must match this structure: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion. Written in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the SER output entirely uppercase ",
          "lower_case": "Tell the speaker's emotion and written in one word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "Tell the speaker's emotion; written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"**Sentiment**\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Tell the speaker's emotion, written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**Emotion_Output**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's emotion, written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; written in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format; please tag the SER information with the key \"emotion_label\" and when in doubt, refer to: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "only in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, only in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling; only in one word. select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only. ",
          "lower_case": "State the speaker's feeling, only in one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "State the speaker's feeling; only in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". launching with \"Final predicted emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Speaker_Emotion*",
              "inst": "State the speaker's feeling and only in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"*Speaker_Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's feeling and only in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"<\" and \">\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; only in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". display the result in json formatting style, assign \"emotion\" as the property key for SER related content; output a json string such as: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "written in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood and written in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. Written in one word. choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Format the emotion label so that all text is uppercase ",
          "lower_case": "Summarize the speaker's mood; written in one word. Choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "[EMOTION_TAG]",
              "inst": "Summarize the speaker's mood and written in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"[EMOTION_TAG]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Summarize the speaker's mood and written in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"*Emotion_Output*\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the speaker's mood, written in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Written in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json, use \"emotion_output\" as the designated key for SER and a demonstration of the expected format: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker and kept to one word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the recognized emotion in all uppercase letters. ",
          "lower_case": "Specify the emotion of the speaker, kept to one word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "**emotional_state**",
              "inst": "Specify the emotion of the speaker; kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**emotional_state**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion>",
              "inst": "Specify the emotion of the speaker. kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"<Emotion>\" after the result body. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the emotion of the speaker; kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result between \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. kept to one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object and assign \"emotion_label\" as the property key for SER related content; refer to this sample output: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. Conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker, conveyed in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the recognized emotion into uppercase text. ",
          "lower_case": "Tell the emotion of the speaker; conveyed in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Tell the emotion of the speaker; conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"*emotional_tone*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Tell the emotion of the speaker and conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And concatenate \"**emotion_result**\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the emotion of the speaker. Conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"_\" as the left boundary and \"_\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and conveyed in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object, the SER result must be identified using the key \"speaker_emotion\" and the appropriate response template: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling and simply in one word; provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion label in uppercase text only: ",
          "lower_case": "State the speaker's feeling, simply in one word; provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "State the speaker's feeling. simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Detected speech feeling: \" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion**",
              "inst": "State the speaker's feeling; simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**emotion**\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's feeling; simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"~\" and \"~\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. Simply in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result and attach \"sentiment\" to the result of SER in the final output. The expected structure looks like this: {\"sentiment\": \"(feeling)\"}. ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. written in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only ",
          "lower_case": "Specify the speaker's feeling, written in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Specify the speaker's feeling, written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[Emotion_Tag]\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Result>",
              "inst": "Specify the speaker's feeling. written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"<Emotion_Result>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's feeling. Written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"**\" and \"**\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and written in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the data inside a properly formed json, when formatting, associate SER with \"detected_emotion\", you can format it as follows: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F011.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker; call it in one word, provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only. ",
          "lower_case": "Express the emotion of the speaker. Call it in one word, provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Express the emotion of the speaker. Call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"Final predicted emotion: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_state]",
              "inst": "Express the emotion of the speaker; call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"[emotional_state]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the emotion of the speaker, call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"{\" as the left boundary and \"}\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; call it in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary. Please tag the SER information with the key \"emotion_label\", you are expected to return: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F012.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "just use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; just use one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion, just use one word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Express the speaker's emotion, just use one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "**predicted_emotion**",
              "inst": "Express the speaker's emotion and just use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**predicted_emotion**\" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Express the speaker's emotion, just use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"<predicted_emotion>\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's emotion, just use one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Just use one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object, the json attribute for SER is \"SER\", a proper example would be: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Respond in one word and choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form: ",
          "lower_case": "Express the speaker's feeling; respond in one word and choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Express the speaker's feeling and respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"{emotion_result}\" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "Express the speaker's feeling; respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[MOOD]\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's feeling and respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"'\" and suffix it with \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and respond in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object and attach \"speaker_emotion\" to the result of SER in the final output; please follow the template: {\"speaker_emotion\": \"(mood)\"} ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F014.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion, explained in one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase emotion output. ",
          "lower_case": "Summarize the speaker's emotion and explained in one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "<FEELING>",
              "inst": "Summarize the speaker's emotion and explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<FEELING>\" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_State]",
              "inst": "Summarize the speaker's emotion, explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"[Emotional_State]\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's emotion, explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"<BOS>\" and \"<EOS>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; explained in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style; format the SER data using \"emotion_output\" as its key name; maintain the structure like so: {\"emotion_output\": \"(emotional tone)\"} ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F015.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion, named in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide just the uppercase version of the emotion ",
          "lower_case": "Summarize the speaker's emotion, named in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\". convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Summarize the speaker's emotion, named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"Perceived emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Summarize the speaker's emotion, named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"**VOICE_EMOTION**\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's emotion. named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"(\" in the front and \")\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, named in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards, the SER result must be identified using the key \"emotion_tag\"; to illustrate, use: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "with a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. With a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker, with a single word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Specify the emotion of the speaker and with a single word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Specify the emotion of the speaker and with a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Identified emotional tone: \" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "{voice_emotion}",
              "inst": "Specify the emotion of the speaker and with a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{voice_emotion}\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the emotion of the speaker and with a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"[\" and closing \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, with a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards, represent the result of SER using the key \"speaker_emotion\", a proper example would be: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F017.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker and with a single word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Explain the emotion of the speaker and with a single word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output: ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the emotion of the speaker and with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin the output using \"The speaker's emotion is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**AFFECT**",
              "inst": "Explain the emotion of the speaker, with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"**AFFECT**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Explain the emotion of the speaker, with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Embed the result between \"<\" and \">\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the result within a json structure. \"SER\" should be the identifier for the SER content and an illustration of the format would be: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F018.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "rendered in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and rendered in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, rendered in one word. allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Explain the speaker's feeling, rendered in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Explain the speaker's feeling and rendered in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"Perceived emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*SENTIMENT*",
              "inst": "Explain the speaker's feeling. Rendered in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"*SENTIMENT*\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's feeling and rendered in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. Rendered in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format, for the SER entry, use \"speaker_emotion\" as its key; your result should mirror this: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, put in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result: ",
          "lower_case": "Describe the speaker's mood, put in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Describe the speaker's mood. Put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[Emotion_Tag]\" heading things up: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "Describe the speaker's mood and put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"*emotion_tag*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the speaker's mood and put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, put in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards and the json representation of SER must be keyed as \"detected_emotion\"; the expected structure looks like this: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "respond in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; respond in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; respond in one word. Select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text ",
          "lower_case": "State the speaker's feeling; respond in one word. Select one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "State the speaker's feeling, respond in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**Sentiment**\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "State the speaker's feeling and respond in one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"**SENTIMENT**\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's feeling; respond in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"~\" to the beginning and \"~\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; respond in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form; make sure the SER output is labeled \"emotional_state\" and the data should be formatted like this: {\"emotional_state\": \"(feeling)\"}: ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood; written in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "Summarize the speaker's mood; written in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Summarize the speaker's mood. Written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"[SPEAKER_EMOTION]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Summarize the speaker's mood and written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"**PREDICTED_EMOTION**\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's mood. Written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Written in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting and the SER value should be indexed by \"predicted_emotion\", a valid format example: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F022.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, in exactly one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the SER output entirely uppercase. ",
          "lower_case": "Explain the speaker's mood and in exactly one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "Explain the speaker's mood and in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Emotion_Result}\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Explain the speaker's mood, in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"{Speaker_Emotion}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's mood. in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"<text>\" and \"</text>\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; in exactly one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout; please tag the SER information with the key \"emotion_label\", this is an appropriate format: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood. summed up in one word; select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Explain the speaker's mood, summed up in one word; select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "*speaker_emotion*",
              "inst": "Explain the speaker's mood and summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"*speaker_emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{speaker_emotion}",
              "inst": "Explain the speaker's mood, summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"{speaker_emotion}\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's mood, summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"<s>\" and \"</s>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; summed up in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object. Make sure the SER output is labeled \"emotion_result\" and please follow the template: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "written in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; written in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling. written in one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the recognized emotion into uppercase text: ",
          "lower_case": "State the speaker's feeling, written in one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "State the speaker's feeling. Written in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"[emotion_tag]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "State the speaker's feeling. Written in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Suffixed with \"{Feeling}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's feeling, written in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"{\" as prefix and \"}\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. written in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container; assign \"detected_emotion\" as the property key for SER related content, the output must match this structure: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion, in precisely one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only ",
          "lower_case": "State the speaker's emotion and in precisely one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "State the speaker's emotion and in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"Speech-derived emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[perceived_emotion]",
              "inst": "State the speaker's emotion; in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and terminate the result using \"[perceived_emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's emotion, in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"**\" and suffix it with \"**\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and in precisely one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form; attach \"emotion_output\" to the result of SER in the final output; the formatting guide is: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker. Summarized in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, summarized in one word. The response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase ",
          "lower_case": "Explain the emotion of the speaker, summarized in one word. The response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with the emotion using lowercase letters only. ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Explain the emotion of the speaker; summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"{emotion_result}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[SPEAKER_EMOTION]",
              "inst": "Explain the emotion of the speaker. Summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"[SPEAKER_EMOTION]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the emotion of the speaker. Summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"#\" and suffix it with \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string and the label \"speaker_emotion\" must correspond to the SER section, the output must match this structure: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "kept to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, kept to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood. Kept to one word. Answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Specify the speaker's mood and kept to one word. Answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "Specify the speaker's mood, kept to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[emotion_label]\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion>",
              "inst": "Specify the speaker's mood; kept to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"<Emotion>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the speaker's mood and kept to one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Frame the result with a leading \"[\" and trailing \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, kept to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout, represent the result of SER using the key \"emotion_result\", the json object should be in this pattern: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_F029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling and concluded with one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters. ",
          "lower_case": "State the speaker's feeling. concluded with one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "[speaker_emotion]",
              "inst": "State the speaker's feeling. Concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"[speaker_emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{voice_emotion}",
              "inst": "State the speaker's feeling, concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{voice_emotion}\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's feeling; concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"<text>\" as the left boundary and \"</text>\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and concluded with one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and the SER value should be indexed by \"emotion_label\"; the desired structure is as shown: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood. Presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood, presented in one word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text: ",
          "lower_case": "Tell the speaker's mood, presented in one word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "*Emotion_Label*",
              "inst": "Tell the speaker's mood and presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"*Emotion_Label*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Speaker_Emotion*",
              "inst": "Tell the speaker's mood; presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"*Speaker_Emotion*\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's mood, presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", box the result using \"(\" and \")\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". express the final output in proper json; SER must be stored in the json under the key \"detected_emotion\". Consider this sample format: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling. In precisely one word, provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Summarize the speaker's feeling and in precisely one word, provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Summarize the speaker's feeling, in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"<Perceived_Emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Summarize the speaker's feeling, in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"<EMOTION_RESULT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the speaker's feeling, in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"~\" and \"~\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; in precisely one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the data inside a properly formed json; the json attribute for SER is \"emotion_label\", follow this example to structure the data: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "in a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and in a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker and in a single word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Express the emotion of the speaker and in a single word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "[Feeling]",
              "inst": "Express the emotion of the speaker, in a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"[Feeling]\" at the very top. "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Express the emotion of the speaker and in a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"*SPEAKER_EMOTION*\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the emotion of the speaker, in a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. In a single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json and make sure the SER output is labeled \"speaker_emotion\" and you can format it as follows: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. Only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker; only in one word, select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label. ",
          "lower_case": "Tell the emotion of the speaker; only in one word, select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Tell the emotion of the speaker and only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Mood}\" at its forefront: "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Tell the emotion of the speaker and only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And suffix the output with \"*SPEAKER_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the emotion of the speaker, only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"*\" and suffix it with \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Only in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules and when formatting, associate SER with \"SER\" and for example: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "put in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Put in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Put in one word. the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase: ",
          "lower_case": "Express the speaker's feeling. put in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Express the speaker's feeling and put in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"Speech tone analysis result: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Express the speaker's feeling, put in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"<emotional_tone>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling. Put in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; put in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; the output variable for SER is expected to be labeled \"emotion\". the appropriate response template: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker and using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker and using only one word; the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result: ",
          "lower_case": "Describe the emotion of the speaker; using only one word; the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Describe the emotion of the speaker and using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and start it with \"Emotion result from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Describe the emotion of the speaker; using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"**emotion_label**\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the emotion of the speaker; using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"$\" and suffix it with \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and using only one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax, the json attribute for SER is \"emotional_state\", here's how a typical entry should look: {\"emotional_state\": \"(affect)\"}: ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker and named in one word; select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the detected emotion entirely in uppercase: ",
          "lower_case": "State the emotion of the speaker and named in one word; select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "[Affect]",
              "inst": "State the emotion of the speaker, named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[Affect]\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "[FEELING]",
              "inst": "State the emotion of the speaker and named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[FEELING]\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the emotion of the speaker, named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"<text>\" to the beginning and \"</text>\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; named in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", generate a json-formatted version of the result, SER should appear under the json key \"emotion_tag\", here's how a typical entry should look: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "state it in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. state it in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker; state it in one word. Return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Describe the emotion of the speaker; state it in one word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase characters in the emotion result: ",
          "prefix": [
            {
              "prefix": "{EMOTION_RESULT}",
              "inst": "Describe the emotion of the speaker, state it in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; commence with \"{EMOTION_RESULT}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_TAG>",
              "inst": "Describe the emotion of the speaker and state it in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"<EMOTION_TAG>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the emotion of the speaker and state it in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"$\" and \"$\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, state it in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure; the SER information must be placed under \"detected_emotion\"; you are expected to return: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "in a single word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; in a single word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion and in a single word. Return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only ",
          "lower_case": "Point out the speaker's emotion, in a single word. Return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "Point out the speaker's emotion. In a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*emotion_tag*\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Point out the speaker's emotion and in a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"{Emotion_Result}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's emotion and in a single word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". delimit the content using \"<start>\" and \"<end>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and in a single word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the output in a structured json layout, SER must be stored in the json under the key \"emotion_output\"; for reference, your output might look like: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling and delivered in one word and provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label: ",
          "lower_case": "Express the speaker's feeling. Delivered in one word and provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Express the speaker's feeling and delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"<emotion_label>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Express the speaker's feeling. Delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"[emotion_output]\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's feeling and delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ensure the result is wrapped using \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; delivered in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation, represent SER in the json with the key \"emotional_state\" and the correct json format includes: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M011.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings, summarize in one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result. ",
          "lower_case": "Describe the speaker's feelings and summarize in one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Describe the speaker's feelings; summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Final emotion classification: \" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "{Perceived_Emotion}",
              "inst": "Describe the speaker's feelings. Summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"{Perceived_Emotion}\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's feelings; summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. Summarize in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format, ensure that SER is stored under the key \"emotion_output\". A valid format example: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion. Respond in one word; allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form. ",
          "lower_case": "Express the speaker's emotion, respond in one word; allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "[feeling]",
              "inst": "Express the speaker's emotion; respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"[feeling]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Tag>",
              "inst": "Express the speaker's emotion, respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"<Emotion_Tag>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's emotion and respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert \"*\" before the result and \"*\" after it: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; respond in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting and when formatting, associate SER with \"emotion_tag\" and please follow the template: {\"emotion_tag\": \"(mood)\"} ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "state it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and state it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion. state it in one word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER result in uppercase format only ",
          "lower_case": "Summarize the speaker's emotion. State it in one word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Summarize the speaker's emotion and state it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"Speaker's affective state: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Summarize the speaker's emotion and state it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"[Affect]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Summarize the speaker's emotion. State it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"***\" and \"***\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion and state it in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure, write the SER result with \"sentiment\" as its property name; a demonstration of the expected format: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M014.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood; call it in one word; return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return uppercase-only emotion recognition output ",
          "lower_case": "Specify the speaker's mood. Call it in one word; return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "{FEELING}",
              "inst": "Specify the speaker's mood, call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"{FEELING}\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION]",
              "inst": "Specify the speaker's mood and call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"[EMOTION]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's mood; call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"<\" and \">\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and call it in one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the result into a json-compatible structure; SER must be stored in the json under the key \"emotion_label\", output a json string such as: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. Restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion; restricted to one word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text: ",
          "lower_case": "Point out the speaker's emotion and restricted to one word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Point out the speaker's emotion and restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Determined mood from audio: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Point out the speaker's emotion and restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"*Emotion_Output*\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's emotion, restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"_\" and \"_\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and restricted to one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions; for the SER entry, use \"emotion_result\" as its key; the desired structure is as shown: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood. Respond in one word; restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text. ",
          "lower_case": "Express the speaker's mood; respond in one word; restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Express the speaker's mood and respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; start it with \"The analyzed emotion state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Express the speaker's mood; respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"{Emotional_State}\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's mood. Respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"<BOS>\" at the start and \"<EOS>\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; respond in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format the result into json style; SER must be stored in the json under the key \"emotion_tag\", refer to this sample output: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion. Mention in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". generate the emotion result only in uppercase characters ",
          "lower_case": "Tell the speaker's emotion, mention in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "<Sentiment>",
              "inst": "Tell the speaker's emotion, mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed with \"<Sentiment>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION**",
              "inst": "Tell the speaker's emotion. Mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"**EMOTION**\" is the last string "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's emotion. Mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"<text>\" and \"</text>\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and mention in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format. Write the SER result with \"emotion\" as its property name, here's how a typical entry should look: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, only in one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters ",
          "lower_case": "Specify the speaker's mood; only in one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Specify the speaker's mood. only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Predicted emotional output: \" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_LABEL>",
              "inst": "Specify the speaker's mood. only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"<EMOTION_LABEL>\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's mood; only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. Only in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure and the json attribute for SER is \"emotion_result\"; the appropriate response template: {\"emotion_result\": \"(emotional tone)\"}. ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling; describe in one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters: ",
          "lower_case": "Express the speaker's feeling, describe in one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Express the speaker's feeling. Describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Recognized emotional category: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Express the speaker's feeling; describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end by \"<predicted_emotion>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling and describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. describe in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format. attach \"emotion_tag\" to the result of SER in the final output; the data should be formatted like this: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "with one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; with one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker. With one single word and select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion result only in uppercase characters. ",
          "lower_case": "Explain the emotion of the speaker, with one single word and select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Explain the emotion of the speaker; with one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"[SPEAKER_EMOTION]\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "**SPEAKER_EMOTION**",
              "inst": "Explain the emotion of the speaker; with one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"**SPEAKER_EMOTION**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Explain the emotion of the speaker. With one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"<BOS>\" and \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and with one single word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting; link the key \"emotion_output\" directly to the SER data and for example: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling. Just use one word, select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only ",
          "lower_case": "Summarize the speaker's feeling. Just use one word, select one of \"happy\", \"sad\", \"angry\" or \"neutral\". reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "**Emotion_Label**",
              "inst": "Summarize the speaker's feeling; just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"**Emotion_Label**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<affect>",
              "inst": "Summarize the speaker's feeling. Just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"<affect>\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's feeling, just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"#\" before and \"#\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure. Write the SER result with \"emotion_label\" as its property name, a compliant example would appear like: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "state it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; state it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker. State it in one word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output. ",
          "lower_case": "Summarize the emotion of the speaker and state it in one word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Summarize the emotion of the speaker, state it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The classified emotion label: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "Summarize the emotion of the speaker and state it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"**Affect**\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Summarize the emotion of the speaker, state it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"$\" and \"$\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. State it in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is formatted as valid json and \"detected_emotion\" should be the identifier for the SER content; a valid format example: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro06/Ses05F_impro06_M025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion. In precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion, in precisely one word; only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters: ",
          "lower_case": "Specify the speaker's emotion. In precisely one word; only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "<emotion_output>",
              "inst": "Specify the speaker's emotion. In precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin with \"<emotion_output>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Tag**",
              "inst": "Specify the speaker's emotion, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"**Emotion_Tag**\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's emotion and in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"**\" and \"**\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion and in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". give the result back in proper json notation and use \"emotion_result\" as the json label for SER and the formatting guide is: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker. summed in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the predicted emotion entirely in uppercase ",
          "lower_case": "Summarize the emotion of the speaker. Summed in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Summarize the emotion of the speaker; summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"Emotion category identified: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Summarize the emotion of the speaker, summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"**feeling**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Summarize the emotion of the speaker; summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"*\" before the result and \"*\" after it "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker, summed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure, use \"emotion_tag\" as the json label for SER. The data should be formatted like this: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "using only one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and using only one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling and using only one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give only the predicted emotion using uppercase letters. ",
          "lower_case": "Identify the speaker's feeling. Using only one word. the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "<Emotion_Label>",
              "inst": "Identify the speaker's feeling; using only one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"<Emotion_Label>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Identify the speaker's feeling, using only one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"*Feeling*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the speaker's feeling; using only one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"'\" and \"'\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; using only one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting. record SER using \"emotion\" as the key in the json structure. The correct json format includes: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker, explained in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion label in uppercase text only ",
          "lower_case": "Tell the emotion of the speaker, explained in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "<MOOD>",
              "inst": "Tell the emotion of the speaker; explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"<MOOD>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Tell the emotion of the speaker and explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"<Feeling>\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the emotion of the speaker and explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"<start>\" and \"<end>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Transform the response into json format; the field related to SER must be labeled with \"emotion\". The correct json format includes: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker, rendered in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Explain the emotion of the speaker, rendered in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "*emotional_state*",
              "inst": "Explain the emotion of the speaker, rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"*emotional_state*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*feeling*",
              "inst": "Explain the emotion of the speaker and rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"*feeling*\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the emotion of the speaker and rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and rendered in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object and SER should appear under the json key \"emotion_tag\", a correctly structured entry is: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion. in exactly one word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only ",
          "lower_case": "Summarize the speaker's emotion; in exactly one word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Summarize the speaker's emotion and in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{emotion_tag}\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "[Perceived_Emotion]",
              "inst": "Summarize the speaker's emotion, in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"[Perceived_Emotion]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's emotion and in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; in exactly one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, bind the task SER to the key \"speaker_emotion\" and please follow the template: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; call it in one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase. ",
          "lower_case": "State the speaker's feeling, call it in one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "**Predicted_Emotion**",
              "inst": "State the speaker's feeling and call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". beginning with \"**Predicted_Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the speaker's feeling, call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"**EMOTION_RESULT**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's feeling and call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; call it in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout. The SER result must be identified using the key \"speaker_emotion\"; for example: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "revealed in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and revealed in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion. Revealed in one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result. ",
          "lower_case": "Summarize the speaker's emotion. revealed in one word. select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Summarize the speaker's emotion; revealed in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Speaker's affective state: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Summarize the speaker's emotion. revealed in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"*SPEAKER_EMOTION*\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's emotion and revealed in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"<BOS>\" and \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; revealed in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result and the SER value should be indexed by \"emotion\". When in doubt, refer to: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion, summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion; summed up in one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form: ",
          "lower_case": "Specify the speaker's emotion; summed up in one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Specify the speaker's emotion, summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"Predicted emotional output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Specify the speaker's emotion; summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"*emotional_tone*\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the speaker's emotion and summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"(\" and closing \")\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; summed up in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is formatted as valid json, \"sentiment\" should be the identifier for the SER content and your result should mirror this: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion and put in one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Express the speaker's emotion, put in one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the emotion using lowercase letters only: ",
          "prefix": [
            {
              "prefix": "{Voice_Emotion}",
              "inst": "Express the speaker's emotion; put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with the top marked by \"{Voice_Emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "Express the speaker's emotion, put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and use \"[EMOTION_OUTPUT]\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion, put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"#\" and append \"#\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion and put in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container, assign the string \"sentiment\" as the field name for SER and a compliant example would appear like: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker. Summed up in one word, select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text ",
          "lower_case": "Specify the emotion of the speaker. summed up in one word, select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "{sentiment}",
              "inst": "Specify the emotion of the speaker. summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"{sentiment}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*sentiment*",
              "inst": "Specify the emotion of the speaker; summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"*sentiment*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the emotion of the speaker and summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"<wrap>\" before the result and \"</wrap>\" after it "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Summed up in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json. Attach \"emotion_tag\" to the result of SER in the final output, maintain the structure like so: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood and only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood. only use one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give the detected emotion output only in uppercase form. ",
          "lower_case": "Summarize the speaker's mood. Only use one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Summarize the speaker's mood; only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"Speech emotion classification: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_TONE]",
              "inst": "Summarize the speaker's mood, only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"[EMOTIONAL_TONE]\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's mood. only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<\" and \">\" to surround the result entirely "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and only use one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting, the SER information must be placed under \"emotion_tag\". here's how a typical entry should look: {\"emotion_tag\": \"(emotional tone)\"}. ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling; concluded with one word and choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion: ",
          "lower_case": "Specify the speaker's feeling; concluded with one word and choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\" and make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "**EMOTION**",
              "inst": "Specify the speaker's feeling. Concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; START WITH \"**EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "Specify the speaker's feeling, concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have the result trail off with \"<perceived_emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling and concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result inside the bounds of \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; concluded with one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format; assign the string \"emotion_tag\" as the field name for SER, a proper example would be: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker and respond in one word, the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format: ",
          "lower_case": "Identify the emotion of the speaker, respond in one word, the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "[Emotion_Result]",
              "inst": "Identify the emotion of the speaker and respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", fronted by \"[Emotion_Result]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Identify the emotion of the speaker and respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"**feeling**\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the emotion of the speaker, respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. Respond in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Transform the response into json format and format the SER data using \"speaker_emotion\" as its key name; your result should mirror this: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker and in a single word, allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form. ",
          "lower_case": "State the emotion of the speaker, in a single word, allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "<speaker_emotion>",
              "inst": "State the emotion of the speaker. in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", headed by \"<speaker_emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_OUTPUT**",
              "inst": "State the emotion of the speaker; in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**EMOTION_OUTPUT**\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the emotion of the speaker and in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; in a single word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json, when structuring the result, use \"speaker_emotion\" for the SER section. The result should be rendered in this format: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "in exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; in exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker, in exactly one word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return uppercase-only emotion recognition output. ",
          "lower_case": "Summarize the emotion of the speaker; in exactly one word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Summarize the emotion of the speaker, in exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Recognized emotional category: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{speaker_emotion}",
              "inst": "Summarize the emotion of the speaker, in exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finalize it by adding \"{speaker_emotion}\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the emotion of the speaker. In exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result between the symbols \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. in exactly one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure and when structuring the result, use \"emotion_output\" for the SER section and here's how a typical entry should look: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Captured in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion. ",
          "lower_case": "Specify the speaker's mood and captured in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "**Emotion_Output**",
              "inst": "Specify the speaker's mood, captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**Emotion_Output**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Specify the speaker's mood, captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"*SPEAKER_EMOTION*\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood; captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. captured in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object. Represent the result of SER using the key \"SER\". maintain the structure like so: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood; expressed in one word; allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters: ",
          "lower_case": "Express the speaker's mood, expressed in one word; allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "[EMOTION_OUTPUT]",
              "inst": "Express the speaker's mood and expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"[EMOTION_OUTPUT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Express the speaker's mood, expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"[Emotion]\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's mood and expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"<BOS>\" before and \"<EOS>\" after "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Expressed in one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax; bind the task SER to the key \"predicted_emotion\". The correct json format includes: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "concluded with one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, concluded with one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, concluded with one word. answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase ",
          "lower_case": "Identify the speaker's feeling and concluded with one word. Answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Identify the speaker's feeling. Concluded with one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Predicted sentiment state: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "Identify the speaker's feeling; concluded with one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"**Emotional_State**\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's feeling; concluded with one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"\"\" and \"\"\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; concluded with one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax. structure your json so that SER is labeled as \"predicted_emotion\". Maintain the structure like so: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, reply in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase ",
          "lower_case": "Specify the speaker's mood. reply in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "{mood}",
              "inst": "Specify the speaker's mood and reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With the top marked by \"{mood}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Specify the speaker's mood, reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And end the result by inserting \"*VOICE_EMOTION*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's mood. Reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, reply in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json, represent SER in the json with the key \"emotion_label\", the expected structure looks like this: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "limited to one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, limited to one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood. Limited to one word. provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters ",
          "lower_case": "Tell the speaker's mood; limited to one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Tell the speaker's mood. Limited to one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"Predicted emotional output: \" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Tell the speaker's mood. Limited to one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"<EMOTION_RESULT>\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's mood. Limited to one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"(\" and \")\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; limited to one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary. when formatting, associate SER with \"detected_emotion\"; the output must match this structure: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "in exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion, in exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion; in exactly one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes. ",
          "lower_case": "Describe the speaker's emotion. In exactly one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_STATE**",
              "inst": "Describe the speaker's emotion and in exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; by preceding all with \"**EMOTIONAL_STATE**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Describe the speaker's emotion. In exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[Voice_Emotion]\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's emotion, in exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"$\" and \"$\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion and in exactly one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax. the label \"SER\" must correspond to the SER section and this is an appropriate format: {\"SER\": \"(perceived emotion)\"}. ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and say it in exactly one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Tell the emotion of the speaker; say it in exactly one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Tell the emotion of the speaker and say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"The speaker's mood is: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "Tell the emotion of the speaker. Say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"*emotion_tag*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the emotion of the speaker; say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the entire result using \"_\" as prefix and \"_\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and say it in exactly one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format and record SER using \"predicted_emotion\" as the key in the json structure, the output should resemble: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "in only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. in only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood. In only one word, provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters ",
          "lower_case": "Identify the speaker's mood and in only one word, provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "{EMOTION_LABEL}",
              "inst": "Identify the speaker's mood and in only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"{EMOTION_LABEL}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Identify the speaker's mood and in only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"[EMOTION_LABEL]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Identify the speaker's mood. In only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"<BOS>\" before and \"<EOS>\" after: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; in only one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting; the key \"predicted_emotion\" maps to the result of SER; to illustrate, use: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. say it in exactly one word, must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result ",
          "lower_case": "Specify the speaker's feeling, say it in exactly one word, must be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "**Emotion_Tag**",
              "inst": "Specify the speaker's feeling, say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Initiated by \"**Emotion_Tag**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Specify the speaker's feeling and say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*Predicted_Emotion*\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's feeling. Say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"~\" at the start and \"~\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. say it in exactly one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format; the json attribute for SER is \"detected_emotion\"; a correctly structured entry is: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, conveyed in one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase. ",
          "lower_case": "Express the speaker's feeling and conveyed in one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "**AFFECT**",
              "inst": "Express the speaker's feeling and conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**AFFECT**\" as the heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "Express the speaker's feeling and conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"[EMOTION_TAG]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the speaker's feeling, conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"<wrap>\" and suffix it with \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, conveyed in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object. the designated key for SER should remain \"emotion\", for example: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker. Kept to one word and output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion. ",
          "lower_case": "State the emotion of the speaker and kept to one word and output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "{SENTIMENT}",
              "inst": "State the emotion of the speaker, kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"{SENTIMENT}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "State the emotion of the speaker, kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end by \"[EMOTION_TAG]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the emotion of the speaker and kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and kept to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; bind the task SER to the key \"sentiment\", maintain the structure like so: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion; conveyed in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide just the uppercase version of the emotion. ",
          "lower_case": "Point out the speaker's emotion and conveyed in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Point out the speaker's emotion and conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Predicted emotional tone: \" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Point out the speaker's emotion, conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"[AFFECT]\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's emotion; conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; conveyed in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions and assign the string \"predicted_emotion\" as the field name for SER; please use a format similar to: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood, named in one word and only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase emotion output. ",
          "lower_case": "State the speaker's mood and named in one word and only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "**Predicted_Emotion**",
              "inst": "State the speaker's mood and named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**Predicted_Emotion**\" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "State the speaker's mood; named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and mark the end of the result with \"[speaker_emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's mood. named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; named in one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules, bind the task SER to the key \"sentiment\"; the output should resemble: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and limited to one word; return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only ",
          "lower_case": "Tell the speaker's emotion, limited to one word; return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Tell the speaker's emotion and limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"Predicted emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Tell the speaker's emotion; limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"*emotion_label*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's emotion and limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"(\" and \")\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, limited to one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object, the result corresponding to SER should be mapped to \"sentiment\"; your final output should take the form: {\"sentiment\": \"(emotion)\"}: ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion; say it in exactly one word. the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters: ",
          "lower_case": "Summarize the speaker's emotion. Say it in exactly one word. the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "Summarize the speaker's emotion. Say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[AFFECT]\" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Summarize the speaker's emotion; say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and label the end of the result with \"{Emotional_State}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's emotion and say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"\"\" and \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, say it in exactly one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure, please assign the key \"emotion_tag\" to the SER field; to illustrate, use: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; describe in one word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return uppercase-only emotion recognition output: ",
          "lower_case": "Point out the speaker's feeling. Describe in one word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Point out the speaker's feeling and describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"**emotion_tag**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion**",
              "inst": "Point out the speaker's feeling. describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"**Emotion**\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's feeling and describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and describe in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format, when structuring the result, use \"emotion_tag\" for the SER section; the output should resemble: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker and rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker and rendered in one word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output. ",
          "lower_case": "Identify the emotion of the speaker and rendered in one word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the output emotion contains only lowercase letters ",
          "prefix": [
            {
              "prefix": "*AFFECT*",
              "inst": "Identify the emotion of the speaker. Rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"*AFFECT*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "Identify the emotion of the speaker and rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and let \"[emotional_tone]\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the emotion of the speaker and rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and rendered in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting; the SER result must be identified using the key \"SER\". For reference, your output might look like: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F038.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "state it in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. state it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling and state it in one word. Pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return just the emotion label with no lowercase letters. ",
          "lower_case": "Point out the speaker's feeling; state it in one word. Pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". convert and return the emotion fully lowercase: ",
          "prefix": [
            {
              "prefix": "**Voice_Emotion**",
              "inst": "Point out the speaker's feeling, state it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**Voice_Emotion**\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Point out the speaker's feeling; state it in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"<Speaker_Emotion>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's feeling and state it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; state it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax; the SER result must be identified using the key \"predicted_emotion\"; consider this sample format: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_F039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion; in only one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give only the predicted emotion using uppercase letters. ",
          "lower_case": "Specify the speaker's emotion; in only one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Specify the speaker's emotion. In only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"The speaker's emotion is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "Specify the speaker's emotion and in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"[EMOTION_TAG]\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's emotion and in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object and use \"emotion\" as the json label for SER, you are expected to return: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling. write in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase. ",
          "lower_case": "Identify the speaker's feeling. Write in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Identify the speaker's feeling. Write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Recognized affective category: \" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Identify the speaker's feeling and write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"<Emotional_Tone>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the speaker's feeling; write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object and the json attribute for SER is \"detected_emotion\". The json representation should be like: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and with a single word; answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the detected emotion output only in uppercase form ",
          "lower_case": "Tell the emotion of the speaker and with a single word; answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "Tell the emotion of the speaker; with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"The detected emotional state is: \" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "**SPEAKER_EMOTION**",
              "inst": "Tell the emotion of the speaker and with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"**SPEAKER_EMOTION**\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the emotion of the speaker and with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"$\" on the left and \"$\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; with a single word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". provide the output in a structured json layout, the output variable for SER is expected to be labeled \"emotion_output\". here's how a typical entry should look: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "state it in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; state it in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion; state it in one word. Select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the detected emotion entirely in uppercase: ",
          "lower_case": "State the speaker's emotion. State it in one word. Select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "State the speaker's emotion; state it in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with a lead-in of \"The speaker's emotion is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "State the speaker's emotion, state it in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*PREDICTED_EMOTION*\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's emotion; state it in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"_\" as prefix and \"_\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; state it in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container; structure your json so that SER is labeled as \"SER\". the json representation should be like: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion, concluded with one word; return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only ",
          "lower_case": "Explain the speaker's emotion, concluded with one word; return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "Explain the speaker's emotion; concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The detected emotional state is: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "[predicted_emotion]",
              "inst": "Explain the speaker's emotion; concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[predicted_emotion]\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's emotion, concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<start>\" at the beginning and \"<end>\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. concluded with one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container; bind the task SER to the key \"speaker_emotion\" and the result should be rendered in this format: {\"speaker_emotion\": \"(feeling)\"}. ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "summed in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; summed in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion; summed in one word. choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give the detected emotion output only in uppercase form. ",
          "lower_case": "Explain the speaker's emotion; summed in one word. Choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "{speaker_emotion}",
              "inst": "Explain the speaker's emotion. Summed in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"{speaker_emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_TONE]",
              "inst": "Explain the speaker's emotion and summed in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and terminate the result using \"[EMOTIONAL_TONE]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Explain the speaker's emotion and summed in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"*\" before and \"*\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion, summed in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". organize your output cleanly in json format. Place the result of SER beneath the key \"predicted_emotion\"; when in doubt, refer to: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "call it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, call it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, call it in one word. pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the detected emotion entirely in uppercase ",
          "lower_case": "Specify the speaker's mood, call it in one word. Pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Specify the speaker's mood and call it in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starts with \"Predicted speaker emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<mood>",
              "inst": "Specify the speaker's mood. Call it in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"<mood>\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's mood. Call it in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; call it in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container and represent SER in the json with the key \"emotion_label\". To illustrate, use: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion. Presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion; presented in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Tell the speaker's emotion; presented in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Tell the speaker's emotion, presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Detected speech feeling: \" leading. "
            }
          ],
          "suffix": [
            {
              "suffix": "<VOICE_EMOTION>",
              "inst": "Tell the speaker's emotion; presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and mark the end by \"<VOICE_EMOTION>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's emotion. presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and presented in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object, the label \"emotion\" must correspond to the SER section. keep your output consistent with: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and using only one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings, using only one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase ",
          "lower_case": "Describe the speaker's feelings and using only one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Describe the speaker's feelings; using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix with \"Detected speech feeling: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[affect]",
              "inst": "Describe the speaker's feelings. Using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"[affect]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's feelings; using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"\"\" and suffix it with \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax and bind the task SER to the key \"emotion_output\". a proper example would be: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "with a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and with a single word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion; with a single word. provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form: ",
          "lower_case": "State the speaker's emotion and with a single word. Provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "{voice_emotion}",
              "inst": "State the speaker's emotion and with a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"{voice_emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<voice_emotion>",
              "inst": "State the speaker's emotion and with a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"<voice_emotion>\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the speaker's emotion, with a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"#\" and closing \"#\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and with a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result and encode the SER content using \"emotion\" as its identifier; the json result must follow this form: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker. Kept to one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase emotion output ",
          "lower_case": "Express the emotion of the speaker, kept to one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Express the emotion of the speaker, kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"Predicted emotional output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Express the emotion of the speaker. Kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"*Emotion_Output*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Express the emotion of the speaker, kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format. The json representation of SER must be keyed as \"emotion_tag\"; consider this sample format: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling, state it in one word. Provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion ",
          "lower_case": "Point out the speaker's feeling and state it in one word. Provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Point out the speaker's feeling and state it in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"The speaker's emotion is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_state*",
              "inst": "Point out the speaker's feeling and state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*emotional_state*\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's feeling and state it in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"(\" and \")\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and state it in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object and the key for SER should be \"sentiment\" respectively. For example: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and written in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase: ",
          "lower_case": "Specify the speaker's feeling, written in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Specify the speaker's feeling; written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"Predicted speaker emotion: \" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Label>",
              "inst": "Specify the speaker's feeling and written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And end the result by inserting \"<Emotion_Label>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the speaker's feeling. written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"<wrap>\" and \"</wrap>\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; written in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure, encode the SER content using \"emotion_result\" as its identifier, the expected structure looks like this: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker; summed up in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase ",
          "lower_case": "Describe the emotion of the speaker. summed up in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**EMOTION_RESULT**",
              "inst": "Describe the emotion of the speaker and summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**EMOTION_RESULT**\" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Label*",
              "inst": "Describe the emotion of the speaker. summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"*Emotion_Label*\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the emotion of the speaker; summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<s>\" before and \"</s>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. summed up in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object. structure your json so that SER is labeled as \"sentiment\" and a valid format example: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood and summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. summarize in one word and return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give only the predicted emotion using uppercase letters. ",
          "lower_case": "Summarize the speaker's mood. Summarize in one word and return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_STATE**",
              "inst": "Summarize the speaker's mood. summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", beginning with \"**EMOTIONAL_STATE**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Summarize the speaker's mood and summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"{affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the speaker's mood and summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. summarize in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object and the json representation of SER must be keyed as \"predicted_emotion\". Use the following format in your response: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion, rendered in one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and only output the emotion in uppercase format. ",
          "lower_case": "Identify the speaker's emotion; rendered in one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase ",
          "prefix": [
            {
              "prefix": "{Emotion}",
              "inst": "Identify the speaker's emotion; rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"{Emotion}\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "Identify the speaker's emotion, rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"**Voice_Emotion**\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's emotion, rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"<s>\" and \"</s>\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; rendered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary, make sure the SER output is labeled \"emotion\". The expected structure looks like this: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "just use one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and just use one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker and just use one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide just the uppercase version of the emotion. ",
          "lower_case": "Express the emotion of the speaker and just use one word. Chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Express the emotion of the speaker, just use one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"{emotion_result}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Express the emotion of the speaker, just use one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and label the end of the result with \"[EMOTION_LABEL]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the emotion of the speaker; just use one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Just use one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout. Format the SER data using \"emotion_label\" as its key name, the data should be formatted like this: {\"emotion_label\": \"(feeling)\"}: ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "in precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; in precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion and in precisely one word, select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Describe the speaker's emotion. In precisely one word, select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "**emotion_output**",
              "inst": "Describe the speaker's emotion, in precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**emotion_output**\" introduced first: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_RESULT}",
              "inst": "Describe the speaker's emotion, in precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"{EMOTION_RESULT}\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's emotion. In precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"<wrap>\" and closing \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion and in precisely one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; SER should appear under the json key \"predicted_emotion\"; one possible output form: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood; state in one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Express the speaker's mood and state in one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "<emotion_result>",
              "inst": "Express the speaker's mood; state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"<emotion_result>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Express the speaker's mood, state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finalize it by adding \"{EMOTION_LABEL}\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's mood. state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"#\" before and \"#\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, state in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary; place the result of SER beneath the key \"emotion_tag\" and format your response exactly as: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion and state in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Point out the speaker's emotion. State in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Point out the speaker's emotion, state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[EMOTION_LABEL]\" at the very beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_Tone]",
              "inst": "Point out the speaker's emotion, state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"[Emotional_Tone]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's emotion; state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and state in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure, ensure \"detected_emotion\" is used as the access key for SER; your result should mirror this: {\"detected_emotion\": \"(perceived emotion)\"}: ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker; put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker, put in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters. ",
          "lower_case": "Identify the emotion of the speaker and put in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Identify the emotion of the speaker, put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". adding \"Predicted affect category: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Identify the emotion of the speaker and put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"{PERCEIVED_EMOTION}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Identify the emotion of the speaker and put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert the result inside the brackets \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. Put in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; please tag the SER information with the key \"emotion_tag\"; a proper example would be: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and state in one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Point out the speaker's feeling; state in one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "[FEELING]",
              "inst": "Point out the speaker's feeling; state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"[FEELING]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "Point out the speaker's feeling and state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and keep \"<feeling>\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's feeling; state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"{\" as prefix and \"}\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. state in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". organize your output cleanly in json format and for the SER entry, use \"emotion_label\" as its key and a correctly structured entry is: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "with a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; with a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling; with a single word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the uppercase version of the detected emotion: ",
          "lower_case": "Identify the speaker's feeling; with a single word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "**emotion_result**",
              "inst": "Identify the speaker's feeling, with a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"**emotion_result**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{SPEAKER_EMOTION}",
              "inst": "Identify the speaker's feeling. With a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"{SPEAKER_EMOTION}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's feeling; with a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, with a single word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting. Represent the result of SER using the key \"emotion_tag\" and the desired structure is as shown: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion; addressed in one word, only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". reply with uppercase-only predicted emotion text. ",
          "lower_case": "State the speaker's emotion, addressed in one word, only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\", output only the recognized emotion in lowercase form. ",
          "prefix": [
            {
              "prefix": "*emotional_state*",
              "inst": "State the speaker's emotion. Addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"*emotional_state*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "State the speaker's emotion, addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"**emotion_label**\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's emotion. Addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is wrapped using \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. Addressed in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format and the SER value should be indexed by \"SER\", your result should mirror this: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion. Named in one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only. ",
          "lower_case": "Identify the speaker's emotion, named in one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "*Emotion_Label*",
              "inst": "Identify the speaker's emotion. named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*Emotion_Label*\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Identify the speaker's emotion, named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow the content with \"*PREDICTED_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Identify the speaker's emotion and named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put \"#\" and \"#\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, named in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format and format the SER data using \"emotion_label\" as its key name; the json representation should be like: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling and summed in one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text: ",
          "lower_case": "Explain the speaker's feeling and summed in one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Explain the speaker's feeling. summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"<Affect>\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Explain the speaker's feeling. Summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**predicted_emotion**\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the speaker's feeling; summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and summed in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure and ensure \"emotion\" is used as the access key for SER, your result should mirror this: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "addressed in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, addressed in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, addressed in one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Identify the speaker's feeling and addressed in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". Only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Identify the speaker's feeling. addressed in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"Perceived emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Perceived_Emotion*",
              "inst": "Identify the speaker's feeling and addressed in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"*Perceived_Emotion*\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's feeling; addressed in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and addressed in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string, ensure that SER is stored under the key \"emotional_state\" and a proper example would be: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "defined in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and defined in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling; defined in one word. Choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion: ",
          "lower_case": "Point out the speaker's feeling; defined in one word. Choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Point out the speaker's feeling. Defined in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"<emotion_label>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Tag**",
              "inst": "Point out the speaker's feeling and defined in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"**Emotion_Tag**\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's feeling. Defined in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"#\" and append \"#\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, defined in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure your response as a valid json string and format the SER data using \"detected_emotion\" as its key name; here's how a typical entry should look: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling and rendered in one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Specify the speaker's feeling. rendered in one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Specify the speaker's feeling, rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and at the start, put \"Predicted sentiment state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Specify the speaker's feeling; rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end by \"**emotion_output**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's feeling, rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". put the result within the boundaries of \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, rendered in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format, the label \"emotion_label\" must correspond to the SER section. a compliant example would appear like: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion. with a single word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Express the speaker's emotion. With a single word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Express the speaker's emotion and with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"Emotion result from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_TAG*",
              "inst": "Express the speaker's emotion, with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"*EMOTION_TAG*\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Express the speaker's emotion; with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"***\" at the start and \"***\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; with a single word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure, please assign the key \"speaker_emotion\" to the SER field and use the following format in your response: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling and using only one word, pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the recognized emotion into uppercase text ",
          "lower_case": "Summarize the speaker's feeling; using only one word, pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Summarize the speaker's feeling, using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"Perceived speaker mood: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Perceived_Emotion]",
              "inst": "Summarize the speaker's feeling and using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and end the result by inserting \"[Perceived_Emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's feeling; using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, using only one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure and the field related to SER must be labeled with \"emotion_label\", this is an appropriate format: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling; named in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Identify the speaker's feeling; named in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Identify the speaker's feeling; named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"Classification result (emotion): \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Mood*",
              "inst": "Identify the speaker's feeling and named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish everything with a \"*Mood*\" tag: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's feeling. named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; named in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; the key \"emotion_result\" maps to the result of SER, here is a sample representation: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "state in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. state in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion. state in one word. Only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce the emotion label with all letters in uppercase ",
          "lower_case": "Express the speaker's emotion. State in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Express the speaker's emotion, state in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open by adding \"Recognized sentiment label: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Express the speaker's emotion and state in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"*EMOTIONAL_TONE*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion; state in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. State in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json; structure your json so that SER is labeled as \"speaker_emotion\". Here's how a typical entry should look: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro07/Ses05F_impro07_M036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker; clarified in one word. The output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the emotion label fully uppercase: ",
          "lower_case": "Explain the emotion of the speaker, clarified in one word. the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "[Emotional_State]",
              "inst": "Explain the emotion of the speaker; clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"[Emotional_State]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Explain the emotion of the speaker, clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"{PERCEIVED_EMOTION}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the emotion of the speaker and clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"'\" and \"'\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure; \"detected_emotion\" should be the identifier for the SER content and maintain the structure like so: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion, elaborated in one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase: ",
          "lower_case": "Explain the speaker's emotion; elaborated in one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "[FEELING]",
              "inst": "Explain the speaker's emotion, elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[FEELING]\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_tag}",
              "inst": "Explain the speaker's emotion; elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"{emotion_tag}\" to finish the sequence: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's emotion. Elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion, elaborated in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules. Link the key \"emotion_label\" directly to the SER data. A proper example would be: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. just use one word; choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters ",
          "lower_case": "Tell the speaker's emotion, just use one word; choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\". make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Tell the speaker's emotion, just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"Speech emotion classification: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Tell the speaker's emotion; just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"<EMOTIONAL_TONE>\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's emotion, just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and just use one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions. ensure \"emotional_state\" is used as the access key for SER; an illustration of the format would be: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood; expressed in one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the uppercase emotion result ",
          "lower_case": "Express the speaker's mood, expressed in one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Express the speaker's mood. Expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"Detected emotion output: \" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Express the speaker's mood. Expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow up by appending \"[Emotion]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's mood; expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result inside the bounds of \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, expressed in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure. the result corresponding to SER should be mapped to \"emotion_result\" and output a json string such as: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion. conveyed in one word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only. ",
          "lower_case": "Express the speaker's emotion and conveyed in one word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Express the speaker's emotion. Conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"The emotion from the speech: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Express the speaker's emotion; conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"*Emotion_Output*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's emotion, conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"<\" in the front and \">\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, conveyed in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure; link the key \"emotion_label\" directly to the SER data; one possible output form: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "captured in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. captured in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, captured in one word. The emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the emotion label in uppercase form. ",
          "lower_case": "Express the speaker's feeling and captured in one word. The emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\". only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Express the speaker's feeling, captured in one word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"The speaker's mood is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*predicted_emotion*",
              "inst": "Express the speaker's feeling. Captured in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"*predicted_emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's feeling; captured in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; captured in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting, SER should appear under the json key \"detected_emotion\" and here's how a typical entry should look: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker. declared in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Describe the emotion of the speaker and declared in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "**Emotion_Output**",
              "inst": "Describe the emotion of the speaker, declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"**Emotion_Output**\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{sentiment}",
              "inst": "Describe the emotion of the speaker, declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"{sentiment}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the emotion of the speaker. Declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. Declared in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encode the result as a json object. Encode the SER content using \"SER\" as its identifier and the correct json format includes: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion and elaborated in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label. ",
          "lower_case": "Express the speaker's emotion. Elaborated in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "[mood]",
              "inst": "Express the speaker's emotion and elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", headed by \"[mood]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Express the speaker's emotion, elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<Perceived_Emotion>\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's emotion. Elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and contain the result within the symbols \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion and elaborated in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure and bind the task SER to the key \"SER\"; the expected structure looks like this: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "state in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; state in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling and state in one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Explain the speaker's feeling, state in one word. Return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "<emotion_result>",
              "inst": "Explain the speaker's feeling; state in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<emotion_result>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Explain the speaker's feeling; state in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"**Speaker_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Explain the speaker's feeling and state in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<BOS>\" and \"<EOS>\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. State in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. when structuring the result, use \"emotional_state\" for the SER section and a correct formatting instance is: {\"emotional_state\": \"(feeling)\"}: ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "in a single word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; in a single word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker and in a single word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the recognized emotion into uppercase text: ",
          "lower_case": "State the emotion of the speaker. in a single word. return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "**Emotion_Output**",
              "inst": "State the emotion of the speaker; in a single word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**Emotion_Output**\" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion**",
              "inst": "State the emotion of the speaker; in a single word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"**Emotion**\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the emotion of the speaker, in a single word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert \"<start>\" before the result and \"<end>\" after it "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. In a single word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure, for the SER entry, use \"emotion_result\" as its key and to illustrate, use: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion; delivered in one word and the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and detect the emotion and format all letters as uppercase ",
          "lower_case": "Explain the speaker's emotion. delivered in one word and the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "**Emotional_Tone**",
              "inst": "Explain the speaker's emotion, delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"**Emotional_Tone**\" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Explain the speaker's emotion and delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"*EMOTIONAL_TONE*\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's emotion, delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Delivered in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure. The SER value should be indexed by \"emotion\". A correct formatting instance is: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion. Declared in one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Specify the speaker's emotion. Declared in one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "{EMOTION}",
              "inst": "Specify the speaker's emotion; declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"{EMOTION}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Specify the speaker's emotion; declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; suffixed with \"[VOICE_EMOTION]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's emotion; declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"*\" and suffix it with \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, declared in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format and assign \"emotion_result\" as the property key for SER related content, a proper example would be: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "articulated in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. articulated in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker; articulated in one word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Tell the emotion of the speaker; articulated in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Tell the emotion of the speaker. Articulated in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Speech emotion detected as: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Tell the emotion of the speaker; articulated in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and keep \"[AFFECT]\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the emotion of the speaker; articulated in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"[\" as the left boundary and \"]\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; articulated in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form and place the result of SER beneath the key \"detected_emotion\", use the following format in your response: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker, summarized in one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only: ",
          "lower_case": "Describe the emotion of the speaker, summarized in one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Describe the emotion of the speaker and summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"*Speaker_Emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Label*",
              "inst": "Describe the emotion of the speaker; summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"*Emotion_Label*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the emotion of the speaker; summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"**\" and \"**\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; summarized in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string; bind the task SER to the key \"emotion_output\". The result should be rendered in this format: {\"emotion_output\": \"(emotional tone)\"}. ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling, summed up in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the emotion label in uppercase form ",
          "lower_case": "State the speaker's feeling. Summed up in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "{Emotion_Label}",
              "inst": "State the speaker's feeling; summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; by preceding all with \"{Emotion_Label}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "State the speaker's feeling and summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"*emotion*\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's feeling. Summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"<start>\" in the front and \"<end>\" at the back "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and summed up in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your result exactly as a json object; the json representation of SER must be keyed as \"emotion_label\". Here is a sample representation: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker, kept to one word; choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Respond with the recognized emotion written in uppercase only ",
          "lower_case": "Express the emotion of the speaker and kept to one word; choose between \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Express the emotion of the speaker, kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"Predicted emotional output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Express the emotion of the speaker. kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"{Mood}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the emotion of the speaker, kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"[\" in the front and \"]\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker and kept to one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions and \"SER\" should be the identifier for the SER content and the output should resemble: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "delivered in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; delivered in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker and delivered in one word. Return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion label in uppercase text only ",
          "lower_case": "Express the emotion of the speaker and delivered in one word. Return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Express the emotion of the speaker. Delivered in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Final predicted emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Express the emotion of the speaker; delivered in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"{Speaker_Emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the emotion of the speaker. Delivered in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"#\" and \"#\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. delivered in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format, assign the string \"emotion_output\" as the field name for SER, please follow the template: {\"emotion_output\": \"(feeling)\"}. ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "written in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; written in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling, written in one word. select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label ",
          "lower_case": "Summarize the speaker's feeling, written in one word. select only one: \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Summarize the speaker's feeling, written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Predicted mood label: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Summarize the speaker's feeling; written in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**feeling**\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's feeling; written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"#\" as the left boundary and \"#\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling and written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style, the output variable for SER is expected to be labeled \"SER\"; an illustration of the format would be: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling, write in one word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Specify the speaker's feeling and write in one word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Specify the speaker's feeling and write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Led by \"The classified sentiment is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*PERCEIVED_EMOTION*",
              "inst": "Specify the speaker's feeling and write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"*PERCEIVED_EMOTION*\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's feeling and write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; write in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules. The SER information must be placed under \"speaker_emotion\". format your response exactly as: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion, mention in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format. ",
          "lower_case": "Express the speaker's emotion, mention in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Express the speaker's emotion, mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"[SPEAKER_EMOTION]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_state}",
              "inst": "Express the speaker's emotion; mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"{emotional_state}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the speaker's emotion, mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. mention in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is encapsulated in json, the key for SER should be \"emotion_output\" respectively and this is an appropriate format: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, only use one word; return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase ",
          "lower_case": "Describe the speaker's mood; only use one word; return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "Describe the speaker's mood. Only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"*affect*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*feeling*",
              "inst": "Describe the speaker's mood. Only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"*feeling*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the speaker's mood, only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"{\" and \"}\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, only use one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary; the SER result must be identified using the key \"speaker_emotion\"; a correct formatting instance is: {\"speaker_emotion\": \"(affect)\"} ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; defined in one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the emotion label fully uppercase. ",
          "lower_case": "Explain the speaker's emotion; defined in one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "*SENTIMENT*",
              "inst": "Explain the speaker's emotion, defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*SENTIMENT*\" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Label>",
              "inst": "Explain the speaker's emotion; defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"<Emotion_Label>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the speaker's emotion. Defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Mark the result using \"<wrap>\" before and \"</wrap>\" after. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format; \"SER\" should be the identifier for the SER content, output a json string such as: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion, revealed in one word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "State the speaker's emotion, revealed in one word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "State the speaker's emotion. revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", beginning with \"Predicted sentiment state: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "State the speaker's emotion and revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"{MOOD}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's emotion, revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"(\" and \")\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and revealed in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax, the label \"predicted_emotion\" must correspond to the SER section and an illustration of the format would be: {\"predicted_emotion\": \"(mood)\"}. ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood; written in one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters. ",
          "lower_case": "Summarize the speaker's mood. Written in one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "*predicted_emotion*",
              "inst": "Summarize the speaker's mood, written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; kicking off with \"*predicted_emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Summarize the speaker's mood; written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"[AFFECT]\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's mood. Written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, written in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and express the final output in proper json. Attach \"detected_emotion\" to the result of SER in the final output, for reference, your output might look like: {\"detected_emotion\": \"(emotional tone)\"}. ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "addressed in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and addressed in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion, addressed in one word. Return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Format the emotion label so that all text is uppercase. ",
          "lower_case": "Tell the speaker's emotion, addressed in one word. return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; format the emotion label so that all text is lowercase. ",
          "prefix": [
            {
              "prefix": "{EMOTION_OUTPUT}",
              "inst": "Tell the speaker's emotion; addressed in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"{EMOTION_OUTPUT}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Tell the speaker's emotion and addressed in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"<Feeling>\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's emotion, addressed in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"#\" and \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. Addressed in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style and the field related to SER must be labeled with \"detected_emotion\", here is a sample representation: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood and written in one word and return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make sure the entire predicted emotion is in uppercase. ",
          "lower_case": "State the speaker's mood and written in one word and return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "[SENTIMENT]",
              "inst": "State the speaker's mood; written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". begin it with \"[SENTIMENT]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<mood>",
              "inst": "State the speaker's mood; written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"<mood>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's mood; written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"_\" before and \"_\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, written in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object, bind the task SER to the key \"emotion_result\"; follow this example to structure the data: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion, put in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters: ",
          "lower_case": "State the speaker's emotion; put in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "[Sentiment]",
              "inst": "State the speaker's emotion; put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[Sentiment]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*FEELING*",
              "inst": "State the speaker's emotion and put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"*FEELING*\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's emotion; put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"{\" and \"}\" markers. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. Put in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data; format the SER data using \"emotion_tag\" as its key name and maintain the structure like so: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F028.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "state it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, state it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, state it in one word; return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "Identify the speaker's mood and state it in one word; return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Identify the speaker's mood, state it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; by preceding all with \"Emotion category identified: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Identify the speaker's mood and state it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"*Affect*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's mood. State it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"(\" and \")\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; state it in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary, use \"emotion\" as the designated key for SER; refer to this sample output: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F029.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker, declared in one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters. ",
          "lower_case": "Summarize the emotion of the speaker and declared in one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "{EMOTIONAL_STATE}",
              "inst": "Summarize the emotion of the speaker. Declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"{EMOTIONAL_STATE}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Summarize the emotion of the speaker, declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and suffix the output with \"*Affect*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the emotion of the speaker and declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and declared in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json. The SER information must be placed under \"emotion_result\", your final output should take the form: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion, with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion. With one single word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase ",
          "lower_case": "Describe the speaker's emotion, with one single word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Describe the speaker's emotion; with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"Resulting emotion classification: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_TONE]",
              "inst": "Describe the speaker's emotion; with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"[EMOTIONAL_TONE]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's emotion and with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"[\" and \"]\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object, when structuring the result, use \"speaker_emotion\" for the SER section. You can format it as follows: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F032.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion, clarified in one word; choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return just the emotion label with no lowercase letters ",
          "lower_case": "Express the speaker's emotion; clarified in one word; choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\". produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "Express the speaker's emotion, clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make \"{Emotion_Result}\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "Express the speaker's emotion. Clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"**Affect**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion, clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". embed the result between \"#\" and \"#\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Clarified in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string, write the SER result with \"emotion_tag\" as its property name; this is an appropriate format: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_F033.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. Summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling. Summarized in one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase predicted emotion with no extra words ",
          "lower_case": "State the speaker's feeling; summarized in one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "State the speaker's feeling; summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The classified emotion label: \" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "State the speaker's feeling and summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"<predicted_emotion>\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the speaker's feeling, summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"#\" to the beginning and \"#\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; summarized in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is formatted as valid json and please tag the SER information with the key \"detected_emotion\", please use a format similar to: {\"detected_emotion\": \"(emotional tone)\"} ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M004.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion and call it in one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Describe the speaker's emotion. Call it in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Describe the speaker's emotion and call it in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"[Emotion_Tag]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion]",
              "inst": "Describe the speaker's emotion. call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and let \"[emotion]\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the speaker's emotion and call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"~\" and \"~\" as the enclosing symbols. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. Call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format and the SER information must be placed under \"emotion_result\". Follow this example to structure the data: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "state it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. State it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood; state it in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion label in uppercase text only: ",
          "lower_case": "Explain the speaker's mood and state it in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "Explain the speaker's mood. State it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[sentiment]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "[FEELING]",
              "inst": "Explain the speaker's mood, state it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and include \"[FEELING]\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the speaker's mood, state it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Surround the result with the markers \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; state it in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation; make sure the SER output is labeled \"emotion_label\" and use the following format in your response: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M007.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "clarified in one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and clarified in one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood and clarified in one word. Answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form. ",
          "lower_case": "Specify the speaker's mood; clarified in one word. Answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\", output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "*feeling*",
              "inst": "Specify the speaker's mood and clarified in one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"*feeling*\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "Specify the speaker's mood, clarified in one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"*emotion_result*\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood, clarified in one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"{\" and \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and clarified in one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions and use \"SER\" as the json label for SER, consider this sample format: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker. just use one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the recognized emotion into uppercase text: ",
          "lower_case": "Describe the emotion of the speaker; just use one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "[affect]",
              "inst": "Describe the emotion of the speaker, just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[affect]\" at the very beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*PERCEIVED_EMOTION*",
              "inst": "Describe the emotion of the speaker, just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and append the suffix \"*PERCEIVED_EMOTION*\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the emotion of the speaker. Just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. Just use one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure; structure your json so that SER is labeled as \"detected_emotion\". This is an appropriate format: {\"detected_emotion\": \"(mood)\"}. ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker, addressed in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Express the emotion of the speaker, addressed in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "[Speaker_Emotion]",
              "inst": "Express the emotion of the speaker. Addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[Speaker_Emotion]\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_tone}",
              "inst": "Express the emotion of the speaker; addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"{emotional_tone}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the emotion of the speaker. addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"**\" to the beginning and \"**\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker and addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json; please tag the SER information with the key \"emotion_label\" and for example: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling; limited to one word, the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text: ",
          "lower_case": "Point out the speaker's feeling, limited to one word, the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Point out the speaker's feeling. Limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and front-loaded with \"Determined mood from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Tag}",
              "inst": "Point out the speaker's feeling; limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"{Emotion_Tag}\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's feeling. Limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"#\" before and \"#\" after: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Limited to one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure, ensure that SER is stored under the key \"emotion_result\" and the json object should be in this pattern: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "put in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and put in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion, put in one word. Select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase text for the predicted emotion: ",
          "lower_case": "Tell the speaker's emotion and put in one word. Select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Tell the speaker's emotion. put in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"Recognized affective category: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Tell the speaker's emotion and put in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"[SENTIMENT]\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's emotion. put in one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"<text>\" and \"</text>\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, put in one word. select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is encapsulated in json, please tag the SER information with the key \"emotion\". Please follow the template: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion, captured in one word, restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Summarize the speaker's emotion. captured in one word, restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Summarize the speaker's emotion. captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"Emotion category identified: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Summarize the speaker's emotion, captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finish the output with \"<predicted_emotion>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's emotion. Captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"_\" and \"_\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. Captured in one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax, make sure the SER output is labeled \"emotion_output\" and the json object should be in this pattern: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood and defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood. Defined in one word, the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion: ",
          "lower_case": "Summarize the speaker's mood, defined in one word, the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Summarize the speaker's mood and defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"<emotion_label>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Summarize the speaker's mood and defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"[EMOTION_LABEL]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's mood and defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. Defined in one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json and label the output of SER using the key \"emotion_tag\". format your response exactly as: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, answer in one word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the emotion label fully uppercase: ",
          "lower_case": "Specify the speaker's mood and answer in one word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Specify the speaker's mood, answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Speaker's affective state: \" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Specify the speaker's mood, answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*Emotion_Result*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Specify the speaker's mood. answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"<start>\" in the front and \"<end>\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and answer in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object. The key \"emotion_tag\" maps to the result of SER and your result should mirror this: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. Kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood. Kept to one word, the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters ",
          "lower_case": "Express the speaker's mood. Kept to one word, the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**EMOTION**",
              "inst": "Express the speaker's mood and kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"**EMOTION**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_LABEL>",
              "inst": "Express the speaker's mood. kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"<EMOTION_LABEL>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Express the speaker's mood and kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Tag the result with opening \"{\" and closing \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; kept to one word, the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style, the result corresponding to SER should be mapped to \"emotion_label\", the json representation should be like: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker and write in one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase ",
          "lower_case": "State the emotion of the speaker and write in one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\" and return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "{sentiment}",
              "inst": "State the emotion of the speaker; write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". At the start, put \"{sentiment}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the emotion of the speaker and write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**EMOTION_RESULT**\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the emotion of the speaker and write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"<s>\" and \"</s>\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and write in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions. assign \"speaker_emotion\" as the property key for SER related content, the expected structure looks like this: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood, reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood; reply in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion: ",
          "lower_case": "Explain the speaker's mood. Reply in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "{Perceived_Emotion}",
              "inst": "Explain the speaker's mood and reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Perceived_Emotion}\" leading. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Explain the speaker's mood; reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"*Emotional_Tone*\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's mood; reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Reply in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json. Attach \"SER\" to the result of SER in the final output and for example: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood, put in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result. ",
          "lower_case": "Express the speaker's mood, put in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\"; format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "Express the speaker's mood; put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". using \"<EMOTIONAL_TONE>\" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion]",
              "inst": "Express the speaker's mood and put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"[emotion]\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's mood, put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"#\" and closing \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; put in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format. the SER result must be identified using the key \"SER\"; a proper example would be: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_impro08/Ses05F_impro08_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion and summed in one word. Pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase. ",
          "lower_case": "Point out the speaker's emotion and summed in one word. pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "**FEELING**",
              "inst": "Point out the speaker's emotion, summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**FEELING**\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Point out the speaker's emotion; summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have the result trail off with \"*Emotion_Result*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Point out the speaker's emotion and summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<text>\" at the beginning and \"</text>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and summed in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style. the label \"emotion_result\" must correspond to the SER section and for reference, your output might look like: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "simply in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; simply in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, simply in one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only ",
          "lower_case": "Identify the speaker's mood; simply in one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Identify the speaker's mood, simply in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**Emotion**\" opening up the text: "
            }
          ],
          "suffix": [
            {
              "suffix": "**SPEAKER_EMOTION**",
              "inst": "Identify the speaker's mood. Simply in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"**SPEAKER_EMOTION**\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's mood, simply in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Simply in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". output the information using json formatting rules; make sure the SER output is labeled \"emotional_state\"; an illustration of the format would be: {\"emotional_state\": \"(emotion)\"}: ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "state it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and state it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling; state it in one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result: ",
          "lower_case": "Tell the speaker's feeling. state it in one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Tell the speaker's feeling, state it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Emotion recognized from speech: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Tell the speaker's feeling and state it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"**speaker_emotion**\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's feeling. State it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"<text>\" and \"</text>\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and state it in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules, link the key \"emotion_label\" directly to the SER data. To illustrate, use: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "in one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; in one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling, in one single word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters ",
          "lower_case": "Explain the speaker's feeling; in one single word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Explain the speaker's feeling and in one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"Predicted affect category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Explain the speaker's feeling and in one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"[Emotion_Output]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's feeling. In one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; in one single word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format; the designated key for SER should remain \"emotion_result\" and for reference, your output might look like: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker, restricted to one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result: ",
          "lower_case": "Explain the emotion of the speaker and restricted to one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Explain the emotion of the speaker; restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; headed by \"[Emotion_Tag]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Explain the emotion of the speaker and restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"[sentiment]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the emotion of the speaker. restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"**\" as prefix and \"**\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. Restricted to one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; ensure that SER is stored under the key \"emotion_label\" and for example: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker; summed in one word, allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER output as uppercase text only: ",
          "lower_case": "Identify the emotion of the speaker; summed in one word, allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "*EMOTION_RESULT*",
              "inst": "Identify the emotion of the speaker, summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*EMOTION_RESULT*\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Identify the emotion of the speaker, summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And keep \"<Speaker_Emotion>\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the emotion of the speaker. summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and summed in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object and SER must be stored in the json under the key \"emotion\", a correct formatting instance is: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion; defined in one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text. ",
          "lower_case": "Tell the speaker's emotion, defined in one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "*SPEAKER_EMOTION*",
              "inst": "Tell the speaker's emotion; defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"*SPEAKER_EMOTION*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "Tell the speaker's emotion and defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"*emotion_result*\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the speaker's emotion. Defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"[\" and \"]\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. Defined in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json; attach \"sentiment\" to the result of SER in the final output and to illustrate, use: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker. Summed in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters: ",
          "lower_case": "State the emotion of the speaker. Summed in one word. the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "State the emotion of the speaker; summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*emotion_result*\" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "State the emotion of the speaker, summed in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"**emotion_label**\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the emotion of the speaker and summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"\"\" and \"\"\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. Summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the result into json-structured data; the SER value should be indexed by \"SER\"; an illustration of the format would be: {\"SER\": \"(feeling)\"}: ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and captured in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". format the emotion label so that all text is uppercase. ",
          "lower_case": "Identify the speaker's feeling; captured in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Identify the speaker's feeling. Captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". adding \"Perceived speaker mood: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Identify the speaker's feeling. Captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"**voice_emotion**\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the speaker's feeling. Captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result between \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; captured in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation; the key for SER should be \"emotion_label\" respectively and use the following format in your response: {\"emotion_label\": \"(feeling)\"}: ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion and elaborated in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only: ",
          "lower_case": "Explain the speaker's emotion. Elaborated in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Explain the speaker's emotion and elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"{Mood}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Explain the speaker's emotion and elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"**voice_emotion**\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's emotion; elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"_\" in the front and \"_\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and elaborated in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout and record SER using \"SER\" as the key in the json structure and to illustrate, use: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion; delivered in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase ",
          "lower_case": "Point out the speaker's emotion, delivered in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "**EMOTION_RESULT**",
              "inst": "Point out the speaker's emotion, delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; start it with \"**EMOTION_RESULT**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_LABEL**",
              "inst": "Point out the speaker's emotion; delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"**EMOTION_LABEL**\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's emotion; delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. delivered in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure and the key \"detected_emotion\" maps to the result of SER, the expected structure looks like this: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, in exactly one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". generate the emotion label in uppercase text only: ",
          "lower_case": "Explain the speaker's feeling, in exactly one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Explain the speaker's feeling; in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"<emotion>\" lead: "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_output>",
              "inst": "Explain the speaker's feeling, in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"<emotion_output>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's feeling; in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. In exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure your response as a valid json string, use \"emotion_label\" as the designated key for SER; a compliant example would appear like: {\"emotion_label\": \"(feeling)\"}: ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F028.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "in only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and in only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker and in only one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output: ",
          "lower_case": "Tell the emotion of the speaker. in only one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Tell the emotion of the speaker, in only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", beginning with \"Predicted affect category: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Tell the emotion of the speaker. In only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"<Feeling>\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the emotion of the speaker and in only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. In only one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax; the key \"emotion_tag\" maps to the result of SER, here is a sample representation: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "in exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, in exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion and in exactly one word, must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make sure the entire predicted emotion is in uppercase. ",
          "lower_case": "Identify the speaker's emotion, in exactly one word, must pick from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the SER output as lowercase text only. ",
          "prefix": [
            {
              "prefix": "[MOOD]",
              "inst": "Identify the speaker's emotion. In exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"[MOOD]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_TONE}",
              "inst": "Identify the speaker's emotion and in exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"{EMOTIONAL_TONE}\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's emotion and in exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and in exactly one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format and when formatting, associate SER with \"emotion_output\" and here is a sample representation: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling, in only one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the emotion recognition result is all uppercase characters: ",
          "lower_case": "Specify the speaker's feeling; in only one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "<Emotion_Label>",
              "inst": "Specify the speaker's feeling; in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<Emotion_Label>\" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Specify the speaker's feeling, in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"<Perceived_Emotion>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the speaker's feeling and in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"[\" at the beginning and \"]\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; in only one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format and format the SER data using \"emotion_tag\" as its key name; maintain the structure like so: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood. Limited to one word and the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters ",
          "lower_case": "Describe the speaker's mood; limited to one word and the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Describe the speaker's mood; limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", launching with \"Perceived emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Describe the speaker's mood. Limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And terminate the result using \"*affect*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's mood; limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. Limited to one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax and the key for SER should be \"speaker_emotion\" respectively; for example: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_F038.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "put in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Put in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood. put in one word. only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase characters in the emotion label ",
          "lower_case": "Summarize the speaker's mood and put in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\". return the detected emotional state in all lowercase letters ",
          "prefix": [
            {
              "prefix": "<mood>",
              "inst": "Summarize the speaker's mood and put in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<mood>\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Summarize the speaker's mood. put in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"[speaker_emotion]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's mood. put in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bind the result using \"<start>\" and \"<end>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. put in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format. For the SER entry, use \"speaker_emotion\" as its key and the correct json format includes: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; call it in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present the SER label in uppercase letters only ",
          "lower_case": "Describe the speaker's feelings; call it in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "**emotional_state**",
              "inst": "Describe the speaker's feelings. call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"**emotional_state**\" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "<PREDICTED_EMOTION>",
              "inst": "Describe the speaker's feelings. Call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"<PREDICTED_EMOTION>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's feelings; call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"<wrap>\" on the left and \"</wrap>\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and call it in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules. When structuring the result, use \"predicted_emotion\" for the SER section and a correctly structured entry is: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "describe in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, describe in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood. Describe in one word. Only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the emotion label fully uppercase: ",
          "lower_case": "Identify the speaker's mood and describe in one word. Only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Identify the speaker's mood, describe in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"Predicted emotional output: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Identify the speaker's mood and describe in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"**emotion_label**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's mood, describe in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; describe in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure; include the SER output under the key \"SER\" and the output should resemble: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker. Captured in one word; restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only ",
          "lower_case": "State the emotion of the speaker, captured in one word; restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". Show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "State the emotion of the speaker; captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"The emotional tone detected: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "State the emotion of the speaker, captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"*emotional_tone*\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the emotion of the speaker, captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. Captured in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary and the SER result must be identified using the key \"detected_emotion\"; one possible output form: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "in precisely one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, in precisely one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker and in precisely one word. Must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase ",
          "lower_case": "Explain the emotion of the speaker, in precisely one word. must pick from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "[FEELING]",
              "inst": "Explain the emotion of the speaker, in precisely one word. must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[FEELING]\" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_LABEL>",
              "inst": "Explain the emotion of the speaker, in precisely one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"<EMOTION_LABEL>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the emotion of the speaker; in precisely one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"(\" and suffix it with \")\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. In precisely one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json; the result corresponding to SER should be mapped to \"emotion_label\". For example: {\"emotion_label\": \"(perceived emotion)\"}. ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker; conveyed in one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the uppercase emotion result. ",
          "lower_case": "Describe the emotion of the speaker. Conveyed in one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "Describe the emotion of the speaker, conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"[AFFECT]\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Label>",
              "inst": "Describe the emotion of the speaker. conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<Emotion_Label>\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the emotion of the speaker, conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"<text>\" and \"</text>\" to surround the result entirely "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; conveyed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container and the json representation of SER must be keyed as \"emotion_result\"; this is an appropriate format: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. Written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and written in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Tell the emotion of the speaker; written in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "**voice_emotion**",
              "inst": "Tell the emotion of the speaker, written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"**voice_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Tell the emotion of the speaker and written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"[Voice_Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the emotion of the speaker. Written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"_\" and trailing \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and written in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; serialize the result into json form, use \"predicted_emotion\" as the designated key for SER and a demonstration of the expected format: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion; answer in one word, must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text. ",
          "lower_case": "Identify the speaker's emotion and answer in one word, must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Identify the speaker's emotion. Answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepended with \"Final predicted emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Identify the speaker's emotion. answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"{SENTIMENT}\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the speaker's emotion; answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"{\" and \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and answer in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules and make sure the SER output is labeled \"SER\", here's how a typical entry should look: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling; state it in one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase. ",
          "lower_case": "Summarize the speaker's feeling and state it in one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Summarize the speaker's feeling and state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*sentiment*\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Summarize the speaker's feeling, state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"*PREDICTED_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the speaker's feeling. state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format everything using strict json notation. SER must be stored in the json under the key \"emotion_tag\", when in doubt, refer to: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "respond in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, respond in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion. Respond in one word. The output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Express the speaker's emotion, respond in one word. The output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Express the speaker's emotion. respond in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Identified emotional tone: \" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion}",
              "inst": "Express the speaker's emotion; respond in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"{Emotion}\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's emotion. respond in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"\"\" at the start and \"\"\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Respond in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure. Attach \"SER\" to the result of SER in the final output, for reference, your output might look like: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "in just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, in just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker; in just one word and choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure all emotion labels are uppercase: ",
          "lower_case": "Identify the emotion of the speaker, in just one word and choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "<mood>",
              "inst": "Identify the emotion of the speaker. In just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"<mood>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Identify the emotion of the speaker and in just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"[Mood]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the emotion of the speaker; in just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"(\" and trailing \")\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; in just one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation; link the key \"predicted_emotion\" directly to the SER data and keep your output consistent with: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M013.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "in a single word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and in a single word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings; in a single word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Describe the speaker's feelings, in a single word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "{sentiment}",
              "inst": "Describe the speaker's feelings. In a single word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Start it with \"{sentiment}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Describe the speaker's feelings and in a single word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<Speaker_Emotion>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the speaker's feelings and in a single word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"<BOS>\" and \"<EOS>\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, in a single word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure; represent SER in the json with the key \"predicted_emotion\" and please use a format similar to: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion and named in one word, select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the detected emotion entirely in uppercase ",
          "lower_case": "Describe the speaker's emotion. Named in one word, select one of \"happy\", \"sad\", \"angry\" or \"neutral\". produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "**emotion**",
              "inst": "Describe the speaker's emotion; named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"**emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Describe the speaker's emotion, named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"[Feeling]\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the speaker's emotion. Named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; named in one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; give the result back in proper json notation; include the SER output under the key \"speaker_emotion\". here's how a typical entry should look: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. using only one word and the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result: ",
          "lower_case": "Summarize the speaker's mood. using only one word and the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Summarize the speaker's mood. using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"Identified emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{VOICE_EMOTION}",
              "inst": "Summarize the speaker's mood, using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end by \"{VOICE_EMOTION}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the speaker's mood; using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and guard the result with \"**\" on the left and \"**\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, using only one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object; the SER information must be placed under \"SER\" and follow this example to structure the data: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "simply in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; simply in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood and simply in one word. Choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". show only the uppercase emotion output. ",
          "lower_case": "Identify the speaker's mood, simply in one word. choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "**sentiment**",
              "inst": "Identify the speaker's mood. simply in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starts with \"**sentiment**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Identify the speaker's mood; simply in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"**VOICE_EMOTION**\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's mood; simply in one word. Choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Simply in one word. choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result in a standard json structure, place the result of SER beneath the key \"emotion\", one possible output form: {\"emotion\": \"(perceived emotion)\"}. ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_1/Ses05F_script01_1_M035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling, concluded with one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make the emotion recognition result all uppercase. ",
          "lower_case": "Tell the speaker's feeling, concluded with one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "*Emotion_Result*",
              "inst": "Tell the speaker's feeling and concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"*Emotion_Result*\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Tell the speaker's feeling and concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"{SENTIMENT}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Tell the speaker's feeling. concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Tag the result with opening \"<BOS>\" and closing \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. Concluded with one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the data inside a properly formed json and write the SER result with \"speaker_emotion\" as its property name. Use the following format in your response: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "only in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; only in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood; only in one word. The emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the detected result contains only uppercase characters ",
          "lower_case": "Specify the speaker's mood; only in one word. The emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Specify the speaker's mood; only in one word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"<Perceived_Emotion>\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Tag}",
              "inst": "Specify the speaker's mood; only in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{Emotion_Tag}\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood; only in one word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"{\" and trailing \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and only in one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is formatted as valid json and structure your json so that SER is labeled as \"emotion_output\", the json representation should be like: {\"emotion_output\": \"(emotional tone)\"} ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F006.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling. Clarified in one word. the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase: ",
          "lower_case": "Point out the speaker's feeling; clarified in one word. The output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Point out the speaker's feeling, clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Kicking off with \"Detected affective state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*predicted_emotion*",
              "inst": "Point out the speaker's feeling and clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have \"*predicted_emotion*\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's feeling; clarified in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and clarified in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards; represent the result of SER using the key \"speaker_emotion\", output a json string such as: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F010.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling, restricted to one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Point out the speaker's feeling; restricted to one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "*Emotion_Output*",
              "inst": "Point out the speaker's feeling and restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", introduced by \"*Emotion_Output*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_Tone**",
              "inst": "Point out the speaker's feeling, restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"**Emotional_Tone**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Point out the speaker's feeling, restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"<text>\" before and \"</text>\" after. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and restricted to one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style. Ensure \"emotion_result\" is used as the access key for SER and the result should be rendered in this format: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F011.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion and revealed in one word; return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the recognized emotion in all uppercase letters. ",
          "lower_case": "Identify the speaker's emotion. revealed in one word; return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**Emotion_Tag**",
              "inst": "Identify the speaker's emotion. revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", START WITH \"**Emotion_Tag**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<MOOD>",
              "inst": "Identify the speaker's emotion, revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"<MOOD>\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's emotion and revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"<wrap>\" and closing \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and revealed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure, the label \"emotion\" must correspond to the SER section; you can format it as follows: {\"emotion\": \"(feeling)\"}. ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F012.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling. Declared in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format ",
          "lower_case": "Tell the speaker's feeling; declared in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Tell the speaker's feeling, declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"[EMOTION_LABEL]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_label]",
              "inst": "Tell the speaker's feeling, declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And put \"[emotion_label]\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the speaker's feeling. declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"{\" and \"}\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. Declared in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". produce the output adhering to json format, assign \"emotion_result\" as the property key for SER related content, to illustrate, use: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F014.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling. Declared in one word. The output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Explain the speaker's feeling. declared in one word. The output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". convert and return the emotion fully lowercase: ",
          "prefix": [
            {
              "prefix": "*Emotional_Tone*",
              "inst": "Explain the speaker's feeling and declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Emotional_Tone*\" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_RESULT}",
              "inst": "Explain the speaker's feeling, declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"{EMOTION_RESULT}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's feeling, declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"<start>\" on the left and \"<end>\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; declared in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure, the key for SER should be \"emotion_tag\" respectively, your result should mirror this: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling and named in one word, must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only ",
          "lower_case": "Tell the speaker's feeling. Named in one word, must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "<EMOTION_OUTPUT>",
              "inst": "Tell the speaker's feeling, named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<EMOTION_OUTPUT>\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "[voice_emotion]",
              "inst": "Tell the speaker's feeling and named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"[voice_emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the speaker's feeling, named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"<s>\" and \"</s>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and named in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax, structure your json so that SER is labeled as \"predicted_emotion\"; consider this sample format: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_F017.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. Mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood. mention in one word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters: ",
          "lower_case": "Identify the speaker's mood, mention in one word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "*Feeling*",
              "inst": "Identify the speaker's mood and mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", initiated by \"*Feeling*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion}",
              "inst": "Identify the speaker's mood, mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"{Emotion}\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's mood and mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"<s>\" before and \"</s>\" after "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Mention in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result; when formatting, associate SER with \"predicted_emotion\"; the desired structure is as shown: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "only use one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. only use one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood and only use one word. The response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "State the speaker's mood, only use one word. the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "[PREDICTED_EMOTION]",
              "inst": "State the speaker's mood. Only use one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[PREDICTED_EMOTION]\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_tone}",
              "inst": "State the speaker's mood, only use one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"{emotional_tone}\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood, only use one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"'\" before and \"'\" after the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; only use one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object. attach \"emotional_state\" to the result of SER in the final output; a compliant example would appear like: {\"emotional_state\": \"(emotional tone)\"}: ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood, addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood. Addressed in one word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Explain the speaker's mood and addressed in one word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Explain the speaker's mood, addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"Classification result (emotion): \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_TONE**",
              "inst": "Explain the speaker's mood, addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"**EMOTIONAL_TONE**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the speaker's mood; addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Include the result within \"(\" and \")\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Addressed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format; ensure that SER is stored under the key \"SER\" and when in doubt, refer to: {\"SER\": \"(perceived emotion)\"}. ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_M002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "reply in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; reply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings and reply in one word. allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Describe the speaker's feelings; reply in one word. allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "<EMOTION_TAG>",
              "inst": "Describe the speaker's feelings; reply in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"<EMOTION_TAG>\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_state}",
              "inst": "Describe the speaker's feelings and reply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"{emotional_state}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the speaker's feelings and reply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"***\" at the beginning and \"***\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, reply in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format and assign the string \"emotion_tag\" as the field name for SER; your result should mirror this: {\"emotion_tag\": \"(emotional tone)\"}. ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_M016.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling and just use one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase ",
          "lower_case": "Explain the speaker's feeling. just use one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "{Predicted_Emotion}",
              "inst": "Explain the speaker's feeling; just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"{Predicted_Emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "Explain the speaker's feeling, just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And label the end of the result with \"*emotion*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the speaker's feeling and just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and just use one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary, allocate the key \"SER\" for the data derived from SER; the output should resemble: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_2/Ses05F_script01_2_M017.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; using only one word. provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase. ",
          "lower_case": "Point out the speaker's feeling. Using only one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "*VOICE_EMOTION*",
              "inst": "Point out the speaker's feeling; using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and introduced by \"*VOICE_EMOTION*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Label]",
              "inst": "Point out the speaker's feeling. Using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And put \"[Emotion_Label]\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's feeling and using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Using only one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string and allocate the key \"emotion_output\" for the data derived from SER and your final output should take the form: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling and in exactly one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result: ",
          "lower_case": "Tell the speaker's feeling. In exactly one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Tell the speaker's feeling; in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"Identified emotion label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Tell the speaker's feeling; in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure the final part is \"**emotion_label**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's feeling and in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"$\" and \"$\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; in exactly one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation. encode the SER content using \"emotion_result\" as its identifier, for example: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion; summarize in one word; return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label: ",
          "lower_case": "Point out the speaker's emotion. Summarize in one word; return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "[predicted_emotion]",
              "inst": "Point out the speaker's emotion. summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[predicted_emotion]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{mood}",
              "inst": "Point out the speaker's emotion, summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"{mood}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's emotion; summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"#\" and \"#\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. summarize in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result and encode the SER content using \"predicted_emotion\" as its identifier, a correctly structured entry is: {\"predicted_emotion\": \"(emotional tone)\"} ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker, just one word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion ",
          "lower_case": "State the emotion of the speaker and just one word. return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters ",
          "prefix": [
            {
              "prefix": "[SENTIMENT]",
              "inst": "State the emotion of the speaker. just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"[SENTIMENT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "State the emotion of the speaker; just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"**predicted_emotion**\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the emotion of the speaker, just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", box the result using \"*\" and \"*\" as the enclosing symbols. "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. Just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout, assign the string \"sentiment\" as the field name for SER and the appropriate response template: {\"sentiment\": \"(affect)\"}: ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "with one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; with one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion, with one single word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert and return the detected emotion fully uppercase ",
          "lower_case": "Explain the speaker's emotion. with one single word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "<mood>",
              "inst": "Explain the speaker's emotion, with one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"<mood>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion}",
              "inst": "Explain the speaker's emotion and with one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{emotion}\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's emotion, with one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"$\" and \"$\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. With one single word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules, the SER information must be placed under \"SER\"; the desired structure is as shown: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings. Summarized in one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result: ",
          "lower_case": "Describe the speaker's feelings, summarized in one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "{emotional_tone}",
              "inst": "Describe the speaker's feelings; summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"{emotional_tone}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Describe the speaker's feelings, summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"*SPEAKER_EMOTION*\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's feelings. Summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"[\" before and \"]\" after "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and summarized in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string and represent SER in the json with the key \"speaker_emotion\"; you can format it as follows: {\"speaker_emotion\": \"(perceived emotion)\"} ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion; mention in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase: ",
          "lower_case": "Tell the speaker's emotion; mention in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "Tell the speaker's emotion and mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[sentiment]\" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Predicted_Emotion**",
              "inst": "Tell the speaker's emotion, mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"**Predicted_Emotion**\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's emotion, mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; mention in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object; bind the task SER to the key \"emotional_state\". your final output should take the form: {\"emotional_state\": \"(emotional tone)\"}: ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood. In exactly one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters ",
          "lower_case": "Explain the speaker's mood and in exactly one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Explain the speaker's mood. in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Commence with \"Emotion result from audio: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Explain the speaker's mood; in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"{Emotion_Output}\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's mood and in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and in exactly one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". provide the output in a structured json layout; make sure the SER output is labeled \"speaker_emotion\" and this is an appropriate format: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings, simply in one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters ",
          "lower_case": "Describe the speaker's feelings. Simply in one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the recognized emotion in lowercase form. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Describe the speaker's feelings; simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Describe the speaker's feelings and simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"*Emotion_Result*\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the speaker's feelings. Simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<s>\" before and \"</s>\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, simply in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json, the json attribute for SER is \"emotion_tag\"; you are expected to return: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood. using only one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase. ",
          "lower_case": "State the speaker's mood and using only one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "State the speaker's mood, using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"The speaker's mood is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "State the speaker's mood; using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"<SENTIMENT>\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's mood. Using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"<text>\" and \"</text>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; using only one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object, SER should appear under the json key \"emotion\". Please follow the template: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood, concluded with one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the emotion recognition result is all uppercase characters: ",
          "lower_case": "Tell the speaker's mood and concluded with one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion output: ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Tell the speaker's mood. Concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<emotion>\" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Tell the speaker's mood. Concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have the result trail off with \"<SENTIMENT>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Tell the speaker's mood and concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap it by placing \"~\" in front and \"~\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. Concluded with one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting and the designated key for SER should remain \"emotion_output\" and consider this sample format: {\"emotion_output\": \"(feeling)\"} ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker and kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker, kept to one word; must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase: ",
          "lower_case": "Describe the emotion of the speaker, kept to one word; must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Describe the emotion of the speaker, kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"<Affect>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Predicted_Emotion}",
              "inst": "Describe the emotion of the speaker, kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"{Predicted_Emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the emotion of the speaker, kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"$\" before and \"$\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; kept to one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format and the json representation of SER must be keyed as \"emotion_tag\", the json result must follow this form: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker and chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker. Chosen in one word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER result in uppercase format only: ",
          "lower_case": "Specify the emotion of the speaker; chosen in one word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; present only the lowercase emotion label as the result ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Specify the emotion of the speaker and chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Predicted speaker emotion: \" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_tag}",
              "inst": "Specify the emotion of the speaker, chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"{emotion_tag}\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the emotion of the speaker; chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"(\" and append \")\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Chosen in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions and structure your json so that SER is labeled as \"emotional_state\" and a correctly structured entry is: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F022.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, just use one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text ",
          "lower_case": "State the speaker's mood, just use one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "*EMOTION_TAG*",
              "inst": "State the speaker's mood; just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"*EMOTION_TAG*\" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "[mood]",
              "inst": "State the speaker's mood; just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"[mood]\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's mood. Just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"$\" and \"$\" tags. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Just use one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the output directly into json, represent the result of SER using the key \"sentiment\" and an illustration of the format would be: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. Addressed in one word and select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase. ",
          "lower_case": "Tell the speaker's emotion and addressed in one word and select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Tell the speaker's emotion. Addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Beginning with \"Classification result (emotion): \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<mood>",
              "inst": "Tell the speaker's emotion and addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"<mood>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's emotion and addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"<text>\" at the start and \"</text>\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; addressed in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form and \"detected_emotion\" should be the identifier for the SER content; a compliant example would appear like: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling. Captured in one word; provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label. ",
          "lower_case": "Identify the speaker's feeling. captured in one word; provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Identify the speaker's feeling and captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Identify the speaker's feeling. Captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"<PERCEIVED_EMOTION>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's feeling, captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make use of \"$\" and \"$\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, captured in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation; the key \"speaker_emotion\" maps to the result of SER, the correct json format includes: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; expressed in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with uppercase-only predicted emotion text: ",
          "lower_case": "Describe the speaker's feelings, expressed in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Describe the speaker's feelings. expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"*Emotion_Tag*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "Describe the speaker's feelings; expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow the content with \"*AFFECT*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's feelings. expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; expressed in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting and use \"emotion_result\" as the designated key for SER, output a json string such as: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_F026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion. Only in one word and choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form ",
          "lower_case": "Point out the speaker's emotion and only in one word and choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "{VOICE_EMOTION}",
              "inst": "Point out the speaker's emotion and only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix it with \"{VOICE_EMOTION}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Point out the speaker's emotion; only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And suffix the output with \"{Emotion_Output}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Point out the speaker's emotion. Only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion, only in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions. The SER information must be placed under \"emotion_output\", the formatting guide is: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "state in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; state in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion and state in one word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Specify the speaker's emotion; state in one word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "{FEELING}",
              "inst": "Specify the speaker's emotion, state in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"{FEELING}\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Specify the speaker's emotion; state in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"[Feeling]\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the speaker's emotion. State in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"(\" and \")\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. State in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your result exactly as a json object. SER must be stored in the json under the key \"emotion_label\" and a demonstration of the expected format: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion. Revealed in one word, must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER output as uppercase text only: ",
          "lower_case": "Point out the speaker's emotion; revealed in one word, must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Point out the speaker's emotion and revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". commence with \"Speaker's affective state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Label}",
              "inst": "Point out the speaker's emotion. Revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{Emotion_Label}\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's emotion; revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"#\" to the beginning and \"#\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion, revealed in one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure. Encode the SER content using \"detected_emotion\" as its identifier, maintain the structure like so: {\"detected_emotion\": \"(emotional tone)\"}. ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. in only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood and in only one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce only uppercase text from the SER result ",
          "lower_case": "State the speaker's mood and in only one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "{mood}",
              "inst": "State the speaker's mood. In only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{mood}\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "<Sentiment>",
              "inst": "State the speaker's mood. In only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"<Sentiment>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the speaker's mood. In only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"[\" at the start and \"]\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; in only one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format. The designated key for SER should remain \"SER\" and the json object should be in this pattern: {\"SER\": \"(feeling)\"}. ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion, defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion. Defined in one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase: ",
          "lower_case": "Specify the speaker's emotion. Defined in one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "**VOICE_EMOTION**",
              "inst": "Specify the speaker's emotion; defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Commence with \"**VOICE_EMOTION**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<VOICE_EMOTION>",
              "inst": "Specify the speaker's emotion; defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make sure it ends with \"<VOICE_EMOTION>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the speaker's emotion and defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix the result with \"_\" and suffix it with \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, defined in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json; SER must be stored in the json under the key \"predicted_emotion\", the json object should be in this pattern: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "reply in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; reply in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling; reply in one word. output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return uppercase-only emotion recognition output ",
          "lower_case": "Express the speaker's feeling; reply in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_STATE*",
              "inst": "Express the speaker's feeling, reply in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix with \"*EMOTIONAL_STATE*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Express the speaker's feeling and reply in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"*Predicted_Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the speaker's feeling and reply in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"(\" and \")\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, reply in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style and SER should appear under the json key \"predicted_emotion\" and consider this sample format: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood and chosen in one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return uppercase-only emotion recognition output. ",
          "lower_case": "Express the speaker's mood. Chosen in one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Express the speaker's mood and chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"Predicted sentiment state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Express the speaker's mood, chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"*mood*\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's mood, chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, chosen in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure. Assign \"sentiment\" as the property key for SER related content; format your response exactly as: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "using only one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; using only one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling. Using only one word. output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase: ",
          "lower_case": "Explain the speaker's feeling, using only one word. Output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Explain the speaker's feeling. Using only one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"Predicted sentiment state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Explain the speaker's feeling; using only one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**emotion_label**\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's feeling; using only one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"_\" and \"_\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and using only one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation and please tag the SER information with the key \"detected_emotion\"; a valid format example: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "in one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and in one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker, in one single word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters: ",
          "lower_case": "Summarize the emotion of the speaker; in one single word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "**Feeling**",
              "inst": "Summarize the emotion of the speaker. In one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"**Feeling**\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Summarize the emotion of the speaker and in one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"*PREDICTED_EMOTION*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the emotion of the speaker, in one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"\"\" to the beginning and \"\"\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. In one single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object, represent the result of SER using the key \"emotion_result\" and the desired structure is as shown: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion and just one word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only ",
          "lower_case": "State the speaker's emotion, just one word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "{sentiment}",
              "inst": "State the speaker's emotion. Just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With an opening of \"{sentiment}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "State the speaker's emotion. Just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"*VOICE_EMOTION*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's emotion and just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, just one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object and the field related to SER must be labeled with \"emotion_output\" and a proper example would be: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; write in one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result. ",
          "lower_case": "Summarize the speaker's feeling. write in one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Summarize the speaker's feeling. write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"**emotion_tag**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{perceived_emotion}",
              "inst": "Summarize the speaker's feeling. Write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"{perceived_emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's feeling. Write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"<BOS>\" and \"<EOS>\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, write in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions. the SER value should be indexed by \"predicted_emotion\"; an illustration of the format would be: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "presented in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, presented in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker and presented in one word. must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Summarize the emotion of the speaker, presented in one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "<EMOTION>",
              "inst": "Summarize the emotion of the speaker and presented in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"<EMOTION>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**FEELING**",
              "inst": "Summarize the emotion of the speaker and presented in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"**FEELING**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the emotion of the speaker and presented in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result between the symbols \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; presented in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure; link the key \"detected_emotion\" directly to the SER data and maintain the structure like so: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker. articulated in one word, provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase: ",
          "lower_case": "Explain the emotion of the speaker and articulated in one word, provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "Explain the emotion of the speaker and articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"**Sentiment**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_output*",
              "inst": "Explain the emotion of the speaker, articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"*emotion_output*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the emotion of the speaker and articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"#\" before and \"#\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, articulated in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting and encode the SER content using \"speaker_emotion\" as its identifier. Here's how a typical entry should look: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood and presented in one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only ",
          "lower_case": "Identify the speaker's mood, presented in one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "[Emotion_Label]",
              "inst": "Identify the speaker's mood, presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; kicking off with \"[Emotion_Label]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Identify the speaker's mood; presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"{EMOTION_OUTPUT}\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's mood and presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"_\" and \"_\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; presented in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules; format the SER data using \"sentiment\" as its key name. One possible output form: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "kept to one word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and kept to one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion, kept to one word. Return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Detect the emotion and format all letters as uppercase. ",
          "lower_case": "Point out the speaker's emotion and kept to one word. Return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "Point out the speaker's emotion; kept to one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make \"*affect*\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "Point out the speaker's emotion and kept to one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"**Voice_Emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's emotion and kept to one word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. kept to one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style and please tag the SER information with the key \"sentiment\", your final output should take the form: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling; just one word and the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase emotion output. ",
          "lower_case": "Identify the speaker's feeling. Just one word and the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "[Emotion_Result]",
              "inst": "Identify the speaker's feeling, just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[Emotion_Result]\" as the heading "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Identify the speaker's feeling, just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"*mood*\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's feeling; just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". set \"**\" and \"**\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and just one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce the output adhering to json format and the key for SER should be \"sentiment\" respectively and the json representation should be like: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker. Summed up in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce only uppercase text from the SER result: ",
          "lower_case": "Explain the emotion of the speaker; summed up in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "{EMOTION_RESULT}",
              "inst": "Explain the emotion of the speaker and summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". by preceding all with \"{EMOTION_RESULT}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{perceived_emotion}",
              "inst": "Explain the emotion of the speaker. Summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"{perceived_emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the emotion of the speaker and summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put \"<start>\" and \"<end>\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; summed up in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format and bind the task SER to the key \"SER\". The appropriate response template: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood. Only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood and only in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Tell the speaker's mood. Only in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "**voice_emotion**",
              "inst": "Tell the speaker's mood, only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**voice_emotion**\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Tell the speaker's mood, only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"**EMOTIONAL_STATE**\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the speaker's mood and only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"[\" and \"]\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and only in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json; the key \"detected_emotion\" maps to the result of SER and keep your output consistent with: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M030.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "summed in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, summed in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion. Summed in one word. select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present the SER label in uppercase letters only. ",
          "lower_case": "Express the speaker's emotion; summed in one word. select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "*Emotion*",
              "inst": "Express the speaker's emotion and summed in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"*Emotion*\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Express the speaker's emotion and summed in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"**speaker_emotion**\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's emotion, summed in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. summed in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style, the field related to SER must be labeled with \"emotion_result\", to illustrate, use: {\"emotion_result\": \"(feeling)\"}: ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood. Restricted to one word and provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only. ",
          "lower_case": "Describe the speaker's mood, restricted to one word and provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "[mood]",
              "inst": "Describe the speaker's mood. restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[mood]\" opening up the text: "
            }
          ],
          "suffix": [
            {
              "suffix": "<speaker_emotion>",
              "inst": "Describe the speaker's mood; restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; suffixed with \"<speaker_emotion>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the speaker's mood, restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and frame the result with a leading \"<s>\" and trailing \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; restricted to one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style and the key \"predicted_emotion\" maps to the result of SER. The correct json format includes: {\"predicted_emotion\": \"(perceived emotion)\"} ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings; revealed in one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return uppercase-only emotion recognition output. ",
          "lower_case": "Describe the speaker's feelings and revealed in one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "<Feeling>",
              "inst": "Describe the speaker's feelings and revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"<Feeling>\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION*",
              "inst": "Describe the speaker's feelings; revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"*EMOTION*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the speaker's feelings, revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result inside the bounds of \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and revealed in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure; label the output of SER using the key \"SER\", the desired structure is as shown: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M033.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. Summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, summarized in one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion label in uppercase text only. ",
          "lower_case": "Explain the speaker's feeling; summarized in one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Explain the speaker's feeling. Summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"Identified emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*sentiment*",
              "inst": "Explain the speaker's feeling, summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"*sentiment*\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's feeling. Summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; summarized in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format, SER should appear under the json key \"emotion_result\" and a valid format example: {\"emotion_result\": \"(emotion)\"} ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M034.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion, kept to one word and only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters: ",
          "lower_case": "Specify the speaker's emotion and kept to one word and only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "{EMOTION_TAG}",
              "inst": "Specify the speaker's emotion; kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", introduced by \"{EMOTION_TAG}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Specify the speaker's emotion. Kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"{Feeling}\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the speaker's emotion. kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"\"\" and append \"\"\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. Kept to one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object. the SER information must be placed under \"sentiment\". maintain the structure like so: {\"sentiment\": \"(affect)\"}. ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M035.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and captured in one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce uppercase-only emotion text. ",
          "lower_case": "Describe the emotion of the speaker; captured in one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "*emotion_label*",
              "inst": "Describe the emotion of the speaker; captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"*emotion_label*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Describe the emotion of the speaker; captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"[Emotion_Output]\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Describe the emotion of the speaker; captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". tag the result with opening \"_\" and closing \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, captured in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the data inside a properly formed json; assign the string \"emotion_label\" as the field name for SER and a correct formatting instance is: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M036.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion, simply in one word, provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the uppercase emotion result. ",
          "lower_case": "State the speaker's emotion, simply in one word, provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "*Predicted_Emotion*",
              "inst": "State the speaker's emotion, simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"*Predicted_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "State the speaker's emotion; simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and include \"**emotion_label**\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the speaker's emotion; simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"<BOS>\" as the left boundary and \"<EOS>\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and simply in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object, when formatting, associate SER with \"predicted_emotion\" and refer to this sample output: {\"predicted_emotion\": \"(emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M037.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling; restricted to one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only ",
          "lower_case": "Explain the speaker's feeling; restricted to one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Explain the speaker's feeling and restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Speaker's affective state: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "Explain the speaker's feeling, restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"*emotion_tag*\" after the result body. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the speaker's feeling, restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. Restricted to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the output in a structured json layout; ensure \"emotion\" is used as the access key for SER; output a json string such as: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling; put in one word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Express the speaker's feeling, put in one word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "<Feeling>",
              "inst": "Express the speaker's feeling. put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". having \"<Feeling>\" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Express the speaker's feeling and put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"**VOICE_EMOTION**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's feeling. Put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"<text>\" on the left and \"</text>\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Put in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object; label the output of SER using the key \"detected_emotion\". your final output should take the form: {\"detected_emotion\": \"(affect)\"}: ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script01_3/Ses05F_script01_3_M040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker; mention in one word and return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase: ",
          "lower_case": "Tell the emotion of the speaker and mention in one word and return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "**affect**",
              "inst": "Tell the emotion of the speaker, mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"**affect**\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "*sentiment*",
              "inst": "Tell the emotion of the speaker. Mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"*sentiment*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the emotion of the speaker and mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"\"\" and \"\"\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. mention in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container, when formatting, associate SER with \"emotion_label\"; this is an appropriate format: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood and chosen in one word; provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the SER output entirely uppercase: ",
          "lower_case": "Specify the speaker's mood; chosen in one word; provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Specify the speaker's mood. Chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". fronted by \"Recognized feeling is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "Specify the speaker's mood, chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"**EMOTION_RESULT**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood, chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"{\" and \"}\" markers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; chosen in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the output in a structured json layout, the json attribute for SER is \"emotion_tag\", refer to this sample output: {\"emotion_tag\": \"(feeling)\"} ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and restricted to one word, only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Express the speaker's mood and restricted to one word, only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "[feeling]",
              "inst": "Express the speaker's mood, restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix with \"[feeling]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Express the speaker's mood, restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**VOICE_EMOTION**\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's mood, restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Restricted to one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form. Bind the task SER to the key \"sentiment\", you are expected to return: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling, in one single word and choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the detected emotion entirely in uppercase ",
          "lower_case": "Point out the speaker's feeling; in one single word and choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Point out the speaker's feeling and in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Perceived emotional tone: \" opening up the text "
            }
          ],
          "suffix": [
            {
              "suffix": "*FEELING*",
              "inst": "Point out the speaker's feeling; in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"*FEELING*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Point out the speaker's feeling; in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"*\" and append \"*\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, in one single word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout; record SER using \"detected_emotion\" as the key in the json structure, follow this example to structure the data: {\"detected_emotion\": \"(mood)\"} ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "in one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. In one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling and in one single word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the detected emotion entirely in uppercase. ",
          "lower_case": "Specify the speaker's feeling; in one single word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Specify the speaker's feeling. In one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"[Emotion_Tag]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Specify the speaker's feeling, in one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and apply \"{affect}\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the speaker's feeling and in one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"\"\" and \"\"\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; in one single word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and express the final output in proper json and allocate the key \"detected_emotion\" for the data derived from SER; your result should mirror this: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling and answer in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion: ",
          "lower_case": "Explain the speaker's feeling. Answer in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Explain the speaker's feeling. Answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*sentiment*\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Label}",
              "inst": "Explain the speaker's feeling, answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"{Emotion_Label}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Explain the speaker's feeling; answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, answer in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards, the key \"emotion_output\" maps to the result of SER and when in doubt, refer to: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker and describe in one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Specify the emotion of the speaker; describe in one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "**emotional_state**",
              "inst": "Specify the emotion of the speaker; describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**emotional_state**\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_state**",
              "inst": "Specify the emotion of the speaker. Describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"**emotional_state**\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the emotion of the speaker. Describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Describe in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure; link the key \"SER\" directly to the SER data; refer to this sample output: {\"SER\": \"(perceived emotion)\"}. ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood. Only use one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only ",
          "lower_case": "State the speaker's mood and only use one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion written entirely in lowercase letters. ",
          "prefix": [
            {
              "prefix": "{emotion_output}",
              "inst": "State the speaker's mood, only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{emotion_output}\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "State the speaker's mood; only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"*emotion_tag*\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's mood, only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"<text>\" and \"</text>\" as the enclosing symbols. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, only use one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure, ensure that SER is stored under the key \"emotional_state\". When in doubt, refer to: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker and reply in one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase: ",
          "lower_case": "State the emotion of the speaker, reply in one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "{Perceived_Emotion}",
              "inst": "State the emotion of the speaker, reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin with \"{Perceived_Emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Label]",
              "inst": "State the emotion of the speaker; reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"[Emotion_Label]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the emotion of the speaker; reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and reply in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is encapsulated in json; assign the string \"emotion_result\" as the field name for SER, format your response exactly as: {\"emotion_result\": \"(mood)\"}: ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; only in one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Summarize the speaker's feeling; only in one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output: ",
          "prefix": [
            {
              "prefix": "**EMOTION_RESULT**",
              "inst": "Summarize the speaker's feeling; only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**EMOTION_RESULT**\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Summarize the speaker's feeling; only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"[speaker_emotion]\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the speaker's feeling; only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"{\" to the beginning and \"}\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, only in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation, the json attribute for SER is \"emotion_output\"; here is a sample representation: {\"emotion_output\": \"(feeling)\"} ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood. mention in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form ",
          "lower_case": "Summarize the speaker's mood, mention in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "<speaker_emotion>",
              "inst": "Summarize the speaker's mood; mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with a lead-in of \"<speaker_emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**mood**",
              "inst": "Summarize the speaker's mood; mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and let \"**mood**\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Summarize the speaker's mood. mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is wrapped using \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and mention in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format; record SER using \"emotion_output\" as the key in the json structure, please use a format similar to: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker. Limited to one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text ",
          "lower_case": "Specify the emotion of the speaker; limited to one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only. ",
          "prefix": [
            {
              "prefix": "[Emotion_Tag]",
              "inst": "Specify the emotion of the speaker, limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[Emotion_Tag]\" at its forefront: "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Specify the emotion of the speaker. limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; suffixed with \"[EMOTION_LABEL]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the emotion of the speaker. limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"***\" to the beginning and \"***\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout, for the SER entry, use \"emotional_state\" as its key. The expected structure looks like this: {\"emotional_state\": \"(feeling)\"}: ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "say it in exactly one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and say it in exactly one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood; say it in exactly one word. return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the returned emotion has only uppercase characters: ",
          "lower_case": "State the speaker's mood; say it in exactly one word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "State the speaker's mood, say it in exactly one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin it with \"Classification result (emotion): \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "State the speaker's mood. Say it in exactly one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"*emotion_result*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's mood, say it in exactly one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"<s>\" and append \"</s>\" to the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Say it in exactly one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format the outcome as a json-compliant object and the output variable for SER is expected to be labeled \"emotion_label\"; the json result must follow this form: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; with a single word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase ",
          "lower_case": "Explain the speaker's emotion, with a single word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Explain the speaker's emotion. With a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". starts with \"Speech emotion detected as: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*MOOD*",
              "inst": "Explain the speaker's emotion. With a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"*MOOD*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's emotion, with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Mark the result using \"***\" before and \"***\" after: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; with a single word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result; record SER using \"predicted_emotion\" as the key in the json structure. consider this sample format: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker and in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker. In one single word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters ",
          "lower_case": "Identify the emotion of the speaker; in one single word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "<AFFECT>",
              "inst": "Identify the emotion of the speaker and in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"<AFFECT>\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Identify the emotion of the speaker and in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"**EMOTIONAL_STATE**\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Identify the emotion of the speaker and in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"<BOS>\" and \"<EOS>\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, in one single word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions, \"emotional_state\" should be the identifier for the SER content. Use the following format in your response: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion, concluded with one word; allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result ",
          "lower_case": "Summarize the speaker's emotion; concluded with one word; allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "{emotion}",
              "inst": "Summarize the speaker's emotion. concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". preceded by \"{emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Summarize the speaker's emotion. Concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"[Mood]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's emotion and concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. Concluded with one word; allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format, make sure the SER output is labeled \"emotion_tag\" and keep your output consistent with: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "revealed in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; revealed in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood. Revealed in one word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present the SER label in uppercase letters only. ",
          "lower_case": "Point out the speaker's mood; revealed in one word. Return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "*SPEAKER_EMOTION*",
              "inst": "Point out the speaker's mood, revealed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and start it with \"*SPEAKER_EMOTION*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "Point out the speaker's mood. revealed in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"**Sentiment**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's mood and revealed in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<start>\" before and \"<end>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, revealed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout, for the SER entry, use \"emotion_output\" as its key. Your final output should take the form: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker; in only one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only. ",
          "lower_case": "Specify the emotion of the speaker and in only one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Specify the emotion of the speaker and in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin the output using \"Predicted mood label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Specify the emotion of the speaker; in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"[Affect]\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the emotion of the speaker. in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; in only one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Give the result back in proper json notation; write the SER result with \"sentiment\" as its property name; you are expected to return: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion. Delivered in one word and return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only. ",
          "lower_case": "Point out the speaker's emotion. Delivered in one word and return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "**Mood**",
              "inst": "Point out the speaker's emotion and delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**Mood**\" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "<mood>",
              "inst": "Point out the speaker's emotion, delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"<mood>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Point out the speaker's emotion; delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"[\" and \"]\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. Delivered in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object; encode the SER content using \"emotion_result\" as its identifier; a correctly structured entry is: {\"emotion_result\": \"(mood)\"}: ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "just one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker. just one word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker; just one word. Return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase ",
          "lower_case": "Summarize the emotion of the speaker and just one word. Return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Summarize the emotion of the speaker and just one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<Affect>\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Summarize the emotion of the speaker; just one word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"[Feeling]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the emotion of the speaker; just one word. Return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"**\" and suffix it with \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and just one word. return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", generate a json-formatted version of the result, please tag the SER information with the key \"predicted_emotion\" and the output should resemble: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. Revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker. revealed in one word; output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". generate the emotion result only in uppercase characters. ",
          "lower_case": "Specify the emotion of the speaker; revealed in one word; output must be \"happy\", \"sad\", \"angry\" or \"neutral\"; output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "**speaker_emotion**",
              "inst": "Specify the emotion of the speaker, revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**speaker_emotion**\" opening up the text: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Perceived_Emotion]",
              "inst": "Specify the emotion of the speaker. revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"[Perceived_Emotion]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the emotion of the speaker. revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"<\" as the left boundary and \">\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and revealed in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format. The result corresponding to SER should be mapped to \"emotion_label\", please use a format similar to: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion, declared in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the emotion result using uppercase letters only. ",
          "lower_case": "Identify the speaker's emotion; declared in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "<voice_emotion>",
              "inst": "Identify the speaker's emotion, declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Having \"<voice_emotion>\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Identify the speaker's emotion, declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"**Perceived_Emotion**\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion and declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bracket the result inside \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation and structure your json so that SER is labeled as \"emotional_state\". The formatting guide is: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling, expressed in one word. pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters ",
          "lower_case": "Summarize the speaker's feeling; expressed in one word. Pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "**speaker_emotion**",
              "inst": "Summarize the speaker's feeling. expressed in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**speaker_emotion**\" opening up the text "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_Tone**",
              "inst": "Summarize the speaker's feeling; expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"**Emotional_Tone**\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's feeling. Expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"[\" at the start and \"]\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout. Ensure \"emotion\" is used as the access key for SER; to illustrate, use: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling; summarized in one word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form ",
          "lower_case": "Summarize the speaker's feeling, summarized in one word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only: ",
          "prefix": [
            {
              "prefix": "**feeling**",
              "inst": "Summarize the speaker's feeling. Summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"**feeling**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[voice_emotion]",
              "inst": "Summarize the speaker's feeling and summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[voice_emotion]\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's feeling, summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"<text>\" and trailing \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling and summarized in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax, assign the string \"detected_emotion\" as the field name for SER; maintain the structure like so: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker and state in one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give only the predicted emotion using uppercase letters ",
          "lower_case": "Specify the emotion of the speaker, state in one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Specify the emotion of the speaker; state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"The classified emotion label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Specify the emotion of the speaker and state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And terminate the result using \"*VOICE_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the emotion of the speaker; state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"'\" and \"'\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, state in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output using a clean and valid json layout, encode the SER content using \"sentiment\" as its identifier, for reference, your output might look like: {\"sentiment\": \"(emotion)\"}: ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker, limited to one word, output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form ",
          "lower_case": "Specify the emotion of the speaker; limited to one word, output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\". format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "**Emotion_Label**",
              "inst": "Specify the emotion of the speaker and limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Headed by \"**Emotion_Label**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Specify the emotion of the speaker, limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"[Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the emotion of the speaker, limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". delimit the content using \"(\" and \")\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; limited to one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure the final output as a json object and the key for SER should be \"emotion_result\" respectively; the formatting guide is: {\"emotion_result\": \"(emotion)\"} ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion and conveyed in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Explain the speaker's emotion, conveyed in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "Explain the speaker's emotion. Conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[emotion_tag]\" opening the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{AFFECT}",
              "inst": "Explain the speaker's emotion; conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"{AFFECT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Explain the speaker's emotion. conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data, the designated key for SER should remain \"emotion_result\" and a correctly structured entry is: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling. rendered in one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the uppercase emotion result ",
          "lower_case": "State the speaker's feeling, rendered in one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "{emotion_label}",
              "inst": "State the speaker's feeling and rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". begin with \"{emotion_label}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "State the speaker's feeling and rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and suffix the output with \"*AFFECT*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's feeling; rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<wrap>\" and append \"</wrap>\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. rendered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions. Record SER using \"emotion_tag\" as the key in the json structure. a compliant example would appear like: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood and simply in one word, choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only. ",
          "lower_case": "Explain the speaker's mood; simply in one word, choose between \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "*emotion_label*",
              "inst": "Explain the speaker's mood. Simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"*emotion_label*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Explain the speaker's mood. Simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and terminate the result using \"*Emotion_Output*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's mood; simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"$\" to the beginning and \"$\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; simply in one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result, allocate the key \"detected_emotion\" for the data derived from SER, output a json string such as: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_1/Ses05F_script02_1_M034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker. in only one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Describe the emotion of the speaker. in only one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Describe the emotion of the speaker, in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Classification result (emotion): \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Describe the emotion of the speaker; in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{Emotional_State}\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Describe the emotion of the speaker, in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, in only one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting, SER must be stored in the json under the key \"emotion_label\" and follow this example to structure the data: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and presented in one word, provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion. ",
          "lower_case": "Identify the speaker's feeling, presented in one word, provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "<Emotion_Output>",
              "inst": "Identify the speaker's feeling; presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and front-loaded with \"<Emotion_Output>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Speaker_Emotion]",
              "inst": "Identify the speaker's feeling; presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and label the end of the result with \"[Speaker_Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's feeling; presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"<wrap>\" and \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling. presented in one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure your response as a valid json string, \"emotion_label\" should be the identifier for the SER content, follow this example to structure the data: {\"emotion_label\": \"(emotion)\"} ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling, elaborated in one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Summarize the speaker's feeling, elaborated in one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "<emotion_tag>",
              "inst": "Summarize the speaker's feeling and elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and introduced by \"<emotion_tag>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's feeling. Elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"<EMOTIONAL_TONE>\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's feeling, elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, elaborated in one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format, make sure the SER output is labeled \"emotion\" and when in doubt, refer to: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F014.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling. answer in one word and the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only: ",
          "lower_case": "Specify the speaker's feeling; answer in one word and the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "**VOICE_EMOTION**",
              "inst": "Specify the speaker's feeling. Answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"**VOICE_EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Specify the speaker's feeling; answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"*mood*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the speaker's feeling and answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"\"\" and \"\"\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, answer in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax and ensure that SER is stored under the key \"speaker_emotion\" and consider this sample format: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "summarized in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and summarized in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion; summarized in one word. Return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion: ",
          "lower_case": "Tell the speaker's emotion. Summarized in one word. return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "{voice_emotion}",
              "inst": "Tell the speaker's emotion and summarized in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"{voice_emotion}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Tell the speaker's emotion; summarized in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"<Perceived_Emotion>\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's emotion; summarized in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"$\" and closing \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, summarized in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container. The result corresponding to SER should be mapped to \"emotional_state\" and the expected structure looks like this: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion. Just one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion ",
          "lower_case": "Express the speaker's emotion, just one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Express the speaker's emotion. Just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"The classified sentiment is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Express the speaker's emotion. Just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<Speaker_Emotion>\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's emotion. just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"**\" and \"**\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion and just one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax; the key for SER should be \"emotional_state\" respectively; the json representation should be like: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F017.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker and elaborated in one word; select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the returned emotion has only uppercase characters ",
          "lower_case": "State the emotion of the speaker. Elaborated in one word; select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the emotion using lowercase letters only: ",
          "prefix": [
            {
              "prefix": "[Speaker_Emotion]",
              "inst": "State the emotion of the speaker. Elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"[Speaker_Emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the emotion of the speaker, elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"**EMOTION_RESULT**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the emotion of the speaker; elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put \"{\" and \"}\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; elaborated in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object; assign the string \"SER\" as the field name for SER; a proper example would be: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F018.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "restricted to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; restricted to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling, restricted to one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". output the SER result in uppercase format only. ",
          "lower_case": "State the speaker's feeling; restricted to one word. the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "State the speaker's feeling, restricted to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"Speech-derived emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "State the speaker's feeling. restricted to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"{Feeling}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's feeling and restricted to one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"{\" and \"}\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. restricted to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format, ensure \"emotion_result\" is used as the access key for SER. Maintain the structure like so: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling. defined in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give only the predicted emotion using uppercase letters ",
          "lower_case": "Specify the speaker's feeling. defined in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Specify the speaker's feeling and defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Emotion recognized from speech: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Specify the speaker's feeling, defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"<Perceived_Emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Specify the speaker's feeling, defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"$\" as prefix and \"$\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, defined in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object and when formatting, associate SER with \"emotion_output\". Consider this sample format: {\"emotion_output\": \"(affect)\"}: ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; written in one word, the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion label in uppercase text only ",
          "lower_case": "Point out the speaker's feeling; written in one word, the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "[Emotional_State]",
              "inst": "Point out the speaker's feeling; written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". add \"[Emotional_State]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Sentiment>",
              "inst": "Point out the speaker's feeling; written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"<Sentiment>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's feeling, written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the entire result using \"***\" as prefix and \"***\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Written in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json. The result corresponding to SER should be mapped to \"detected_emotion\"; this is an appropriate format: {\"detected_emotion\": \"(affect)\"}: ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling and revealed in one word and must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result: ",
          "lower_case": "Tell the speaker's feeling. revealed in one word and must return \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Tell the speaker's feeling and revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"[Voice_Emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Tell the speaker's feeling, revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"<Feeling>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's feeling and revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"<wrap>\" and \"</wrap>\" to bracket the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and revealed in one word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", generate a json-formatted version of the result, place the result of SER beneath the key \"emotion_output\". the json object should be in this pattern: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling; summarize in one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Tell the speaker's feeling, summarize in one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "<affect>",
              "inst": "Tell the speaker's feeling and summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<affect>\" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Tell the speaker's feeling and summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"**Speaker_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the speaker's feeling, summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". enclose the result using \"**\" at the start and \"**\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; summarize in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure; the SER information must be placed under \"detected_emotion\" and format your response exactly as: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling, summed in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return just the emotion label with no lowercase letters ",
          "lower_case": "Explain the speaker's feeling; summed in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "<Emotional_Tone>",
              "inst": "Explain the speaker's feeling. Summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", introduced by \"<Emotional_Tone>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Explain the speaker's feeling, summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"*mood*\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the speaker's feeling; summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is framed by \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. summed in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert the result into a json-compatible structure. The json attribute for SER is \"emotion_result\". Your result should mirror this: {\"emotion_result\": \"(feeling)\"}: ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "addressed in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; addressed in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker; addressed in one word. The emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase characters in the emotion label ",
          "lower_case": "Tell the emotion of the speaker. addressed in one word. the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "Tell the emotion of the speaker and addressed in one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The detected emotional state is: \" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Tell the emotion of the speaker, addressed in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"<predicted_emotion>\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the emotion of the speaker. Addressed in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"<s>\" on the left and \"</s>\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and addressed in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json and the output variable for SER is expected to be labeled \"sentiment\" and refer to this sample output: {\"sentiment\": \"(emotion)\"}. ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F030.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "state in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. State in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling and state in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase ",
          "lower_case": "Specify the speaker's feeling; state in one word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters: ",
          "prefix": [
            {
              "prefix": "**Mood**",
              "inst": "Specify the speaker's feeling and state in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed by \"**Mood**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Specify the speaker's feeling and state in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{Affect}\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's feeling; state in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"<\" and \">\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. State in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json and allocate the key \"speaker_emotion\" for the data derived from SER and please follow the template: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood, named in one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Point out the speaker's mood. Named in one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Point out the speaker's mood. Named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"Predicted emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Point out the speaker's mood. Named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and add \"**voice_emotion**\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's mood. Named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and named in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format and the result corresponding to SER should be mapped to \"detected_emotion\", a proper example would be: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. In precisely one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with uppercase-only predicted emotion text: ",
          "lower_case": "Express the speaker's feeling. in precisely one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "<Emotion_Result>",
              "inst": "Express the speaker's feeling; in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<Emotion_Result>\" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Express the speaker's feeling, in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"{Speaker_Emotion}\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's feeling and in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". put \"[\" and \"]\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, in precisely one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container and the key for SER should be \"SER\" respectively; you are expected to return: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. Reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood, reply in one word; answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format: ",
          "lower_case": "Express the speaker's mood, reply in one word; answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the emotion label is all lowercase characters ",
          "prefix": [
            {
              "prefix": "<feeling>",
              "inst": "Express the speaker's mood, reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"<feeling>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Express the speaker's mood, reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{Emotion_Output}\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the speaker's mood and reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"<wrap>\" before the result and \"</wrap>\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure and encode the SER content using \"emotion_output\" as its identifier, the result should be rendered in this format: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_F037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling; declared in one word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and only output the emotion in uppercase format ",
          "lower_case": "Specify the speaker's feeling; declared in one word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Specify the speaker's feeling, declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The emotion from the speech: \" opening the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Specify the speaker's feeling; declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"{Emotional_State}\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling, declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"***\" and closing \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation and label the output of SER using the key \"emotion_tag\"; follow this example to structure the data: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion and call it in one word and return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output. ",
          "lower_case": "Express the speaker's emotion. Call it in one word and return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Express the speaker's emotion and call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with an opening of \"Recognized feeling is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Express the speaker's emotion. call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"{feeling}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's emotion and call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"<\" in the front and \">\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion and call it in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation; the key \"emotional_state\" maps to the result of SER and a proper example would be: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "summed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; summed in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood, summed in one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase text for the predicted emotion: ",
          "lower_case": "Point out the speaker's mood, summed in one word. return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "Point out the speaker's mood, summed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"*emotion_tag*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "Point out the speaker's mood; summed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and tag the result by adding \"[EMOTION_LABEL]\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's mood, summed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". contain the result within the symbols \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, summed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation, please assign the key \"SER\" to the SER field. Consider this sample format: {\"SER\": \"(emotion)\"}. ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "revealed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; revealed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling. Revealed in one word. Only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the emotion label fully uppercase ",
          "lower_case": "Point out the speaker's feeling; revealed in one word. Only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Point out the speaker's feeling. Revealed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"Determined mood from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[feeling]",
              "inst": "Point out the speaker's feeling; revealed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"[feeling]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling, revealed in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and revealed in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure; the designated key for SER should remain \"emotional_state\" and the appropriate response template: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling. Written in one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase ",
          "lower_case": "State the speaker's feeling; written in one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "State the speaker's feeling; written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". open by adding \"Resulting emotion classification: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*predicted_emotion*",
              "inst": "State the speaker's feeling. written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"*predicted_emotion*\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's feeling and written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, written in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json and use \"emotion_output\" as the json label for SER; the output must match this structure: {\"emotion_output\": \"(feeling)\"}. ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion. simply in one word; output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text: ",
          "lower_case": "State the speaker's emotion. Simply in one word; output must be \"happy\", \"sad\", \"angry\" or \"neutral\". Return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "State the speaker's emotion and simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"<Affect>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "State the speaker's emotion and simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and apply \"[emotion_output]\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the speaker's emotion and simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". enclose the result using \"<BOS>\" at the start and \"<EOS>\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, simply in one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object; represent the result of SER using the key \"emotion_tag\"; an illustration of the format would be: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion and describe in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result ",
          "lower_case": "Summarize the speaker's emotion. describe in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "{Sentiment}",
              "inst": "Summarize the speaker's emotion and describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Sentiment}\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Summarize the speaker's emotion; describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"[Voice_Emotion]\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the speaker's emotion and describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"{\" before and \"}\" after "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; describe in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string; \"detected_emotion\" should be the identifier for the SER content and a correct formatting instance is: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion; declared in one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only. ",
          "lower_case": "State the speaker's emotion. declared in one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "**emotion_label**",
              "inst": "State the speaker's emotion; declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"**emotion_label**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "State the speaker's emotion. Declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"*Feeling*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's emotion. Declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the content using \"***\" and \"***\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. Declared in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object; bind the task SER to the key \"emotion\"; to illustrate, use: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "only in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; only in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion, only in one word. Only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce only uppercase text from the SER result ",
          "lower_case": "Explain the speaker's emotion. Only in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "**emotional_tone**",
              "inst": "Explain the speaker's emotion and only in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"**emotional_tone**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "Explain the speaker's emotion and only in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"[Emotion_Tag]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's emotion. Only in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"<start>\" and \"<end>\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and only in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax. The SER result must be identified using the key \"sentiment\". Refer to this sample output: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "expressed in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; expressed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood and expressed in one word. Provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase. ",
          "lower_case": "Describe the speaker's mood; expressed in one word. Provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Describe the speaker's mood and expressed in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", launching with \"Recognized feeling is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[voice_emotion]",
              "inst": "Describe the speaker's mood. Expressed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[voice_emotion]\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's mood and expressed in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. Expressed in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form. bind the task SER to the key \"emotion\", please follow the template: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood; with a single word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Point out the speaker's mood, with a single word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Point out the speaker's mood, with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"[Voice_Emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "Point out the speaker's mood and with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"[emotional_tone]\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's mood; with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"#\" and \"#\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and with a single word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json, the key \"emotion_tag\" maps to the result of SER. here is a sample representation: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion; articulated in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Tell the speaker's emotion; articulated in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Tell the speaker's emotion; articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"[Voice_Emotion]\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Tell the speaker's emotion. Articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And end the result by inserting \"*Emotional_Tone*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the speaker's emotion, articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result between the symbols \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; articulated in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax, ensure that SER is stored under the key \"emotion_output\"; a correctly structured entry is: {\"emotion_output\": \"(feeling)\"}: ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion, just use one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion: ",
          "lower_case": "Express the speaker's emotion, just use one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Express the speaker's emotion and just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Start it with \"The emotion from the speech: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Express the speaker's emotion; just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"{EMOTION_LABEL}\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's emotion. just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"*\" and \"*\" markers "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion and just use one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax and the designated key for SER should remain \"SER\"; you can format it as follows: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M033.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion, respond in one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Summarize the speaker's emotion and respond in one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "<emotional_state>",
              "inst": "Summarize the speaker's emotion. Respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with an opening of \"<emotional_state>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Summarize the speaker's emotion; respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And label the end of the result with \"*Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Summarize the speaker's emotion, respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"'\" and \"'\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; respond in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and serialize the result into json form; the result corresponding to SER should be mapped to \"emotion_tag\", here is a sample representation: {\"emotion_tag\": \"(feeling)\"} ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling; defined in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters ",
          "lower_case": "Explain the speaker's feeling. defined in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "**speaker_emotion**",
              "inst": "Explain the speaker's feeling and defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"**speaker_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "Explain the speaker's feeling and defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"*emotion*\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's feeling. Defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"{\" and \"}\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and defined in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format. The output variable for SER is expected to be labeled \"emotion_tag\"; for example: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; explained in one word. Provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters: ",
          "lower_case": "Express the speaker's emotion. explained in one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "Express the speaker's emotion; explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"[emotion_tag]\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_state]",
              "inst": "Express the speaker's emotion, explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"[emotional_state]\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the speaker's emotion. Explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. explained in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style; please assign the key \"predicted_emotion\" to the SER field. Your final output should take the form: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling and reply in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase predicted emotion with no extra words. ",
          "lower_case": "Specify the speaker's feeling. Reply in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "<emotion_output>",
              "inst": "Specify the speaker's feeling and reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<emotion_output>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Specify the speaker's feeling, reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"**feeling**\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Specify the speaker's feeling; reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"[\" and \"]\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce a response that adheres to json syntax, use \"sentiment\" as the json label for SER, refer to this sample output: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "just use one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; just use one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling; just use one word. Choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Specify the speaker's feeling; just use one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "<speaker_emotion>",
              "inst": "Specify the speaker's feeling. Just use one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"<speaker_emotion>\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion}",
              "inst": "Specify the speaker's feeling and just use one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"{Emotion}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's feeling, just use one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"'\" on the left and \"'\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and just use one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object. Please tag the SER information with the key \"emotion\". A correctly structured entry is: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script02_2/Ses05F_script02_2_M041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion; addressed in one word; pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce uppercase-only emotion text: ",
          "lower_case": "Tell the speaker's emotion and addressed in one word; pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "*Sentiment*",
              "inst": "Tell the speaker's emotion; addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", START WITH \"*Sentiment*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Tell the speaker's emotion; addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"*Emotion_Result*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's emotion, addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. Addressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string and use \"SER\" as the json label for SER; when in doubt, refer to: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker, conveyed in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce uppercase-only emotion text. ",
          "lower_case": "Describe the emotion of the speaker and conveyed in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "[emotional_tone]",
              "inst": "Describe the emotion of the speaker; conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"[emotional_tone]\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Describe the emotion of the speaker and conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And concatenate \"[emotion_result]\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the emotion of the speaker; conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result so it is enclosed in \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, conveyed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json and structure your json so that SER is labeled as \"detected_emotion\", please use a format similar to: {\"detected_emotion\": \"(emotional tone)\"} ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "in only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. In only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion, in only one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "Describe the speaker's emotion; in only one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "[Predicted_Emotion]",
              "inst": "Describe the speaker's emotion; in only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"[Predicted_Emotion]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "Describe the speaker's emotion and in only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"*speaker_emotion*\" tag: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's emotion; in only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion and in only one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary; encode the SER content using \"emotion_output\" as its identifier. For example: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and summed up in one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters: ",
          "lower_case": "Tell the speaker's emotion and summed up in one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Tell the speaker's emotion and summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Recognized sentiment label: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Tell the speaker's emotion. summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow up by appending \"*EMOTIONAL_STATE*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's emotion; summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"(\" in the front and \")\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, summed up in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the output in a structured json layout and record SER using \"emotion_tag\" as the key in the json structure; the output must match this structure: {\"emotion_tag\": \"(perceived emotion)\"}. ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood. Explained in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text: ",
          "lower_case": "Express the speaker's mood, explained in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "<FEELING>",
              "inst": "Express the speaker's mood. Explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<FEELING>\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "Express the speaker's mood. Explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"[Emotion_Tag]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's mood, explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"#\" as the left boundary and \"#\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. explained in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure, assign the string \"emotion_label\" as the field name for SER. When in doubt, refer to: {\"emotion_label\": \"(perceived emotion)\"}. ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling and delivered in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Tell the speaker's feeling, delivered in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "<EMOTION_RESULT>",
              "inst": "Tell the speaker's feeling, delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<EMOTION_RESULT>\" at its forefront: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Tell the speaker's feeling; delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"*EMOTIONAL_TONE*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the speaker's feeling, delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result inside the bounds of \"<s>\" and \"</s>\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and delivered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object and the json attribute for SER is \"predicted_emotion\" and here is a sample representation: {\"predicted_emotion\": \"(feeling)\"}. ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker, explained in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase. ",
          "lower_case": "Describe the emotion of the speaker. explained in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "{EMOTION_TAG}",
              "inst": "Describe the emotion of the speaker; explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"{EMOTION_TAG}\" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_state**",
              "inst": "Describe the emotion of the speaker. Explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and apply \"**emotional_state**\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the emotion of the speaker, explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"(\" and trailing \")\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker; explained in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is encapsulated in json. use \"SER\" as the designated key for SER and the json object should be in this pattern: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. Summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling and summed up in one word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "State the speaker's feeling, summed up in one word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "[speaker_emotion]",
              "inst": "State the speaker's feeling; summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"[speaker_emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_STATE}",
              "inst": "State the speaker's feeling; summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"{EMOTIONAL_STATE}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's feeling, summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. Summed up in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object, bind the task SER to the key \"emotion_output\" and to illustrate, use: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling, with one single word. Restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words. ",
          "lower_case": "Summarize the speaker's feeling, with one single word. Restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "<mood>",
              "inst": "Summarize the speaker's feeling; with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<mood>\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Summarize the speaker's feeling, with one single word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and append the suffix \"{Emotion_Result}\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's feeling; with one single word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"\"\" as prefix and \"\"\" as suffix. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. with one single word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules; when formatting, associate SER with \"speaker_emotion\", the appropriate response template: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker. Mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, mention in one word, answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only: ",
          "lower_case": "Explain the emotion of the speaker, mention in one word, answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with the emotion using lowercase letters only: ",
          "prefix": [
            {
              "prefix": "<PERCEIVED_EMOTION>",
              "inst": "Explain the emotion of the speaker and mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<PERCEIVED_EMOTION>\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Sentiment*",
              "inst": "Explain the emotion of the speaker; mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". suffixed with \"*Sentiment*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the emotion of the speaker. Mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"(\" in the front and \")\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. Mention in one word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format; the key \"predicted_emotion\" maps to the result of SER, consider this sample format: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "conveyed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and conveyed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, conveyed in one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Explain the speaker's feeling; conveyed in one word. return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "<VOICE_EMOTION>",
              "inst": "Explain the speaker's feeling and conveyed in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<VOICE_EMOTION>\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "<Affect>",
              "inst": "Explain the speaker's feeling; conveyed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"<Affect>\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's feeling; conveyed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"{\" to the beginning and \"}\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; conveyed in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and serialize the result into json form, encode the SER content using \"emotion_tag\" as its identifier. To illustrate, use: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. in just one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase ",
          "lower_case": "Point out the speaker's feeling; in just one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Point out the speaker's feeling, in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", open it with \"*Emotion_Tag*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Point out the speaker's feeling; in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make sure it ends with \"[Affect]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Point out the speaker's feeling and in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"<\" and \">\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. in just one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax and bind the task SER to the key \"emotion_tag\" and a proper example would be: {\"emotion_tag\": \"(perceived emotion)\"}. ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_F033.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood. in a single word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters. ",
          "lower_case": "State the speaker's mood, in a single word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "State the speaker's mood. In a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[emotion_label]\" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Tag>",
              "inst": "State the speaker's mood, in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"<Emotion_Tag>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's mood; in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"<wrap>\" and closing \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; in a single word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format, please assign the key \"emotion_label\" to the SER field. please use a format similar to: {\"emotion_label\": \"(emotional tone)\"}: ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "defined in one word. choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Defined in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood, defined in one word. Choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only: ",
          "lower_case": "Specify the speaker's mood; defined in one word. Choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "<AFFECT>",
              "inst": "Specify the speaker's mood. Defined in one word. choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"<AFFECT>\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Specify the speaker's mood and defined in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"{SENTIMENT}\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's mood. defined in one word. choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result between the symbols \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; defined in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure, the SER information must be placed under \"SER\"; the desired structure is as shown: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood, kept to one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result. ",
          "lower_case": "Tell the speaker's mood; kept to one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "{Emotion_Tag}",
              "inst": "Tell the speaker's mood, kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and START WITH \"{Emotion_Tag}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Sentiment>",
              "inst": "Tell the speaker's mood, kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"<Sentiment>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's mood; kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"_\" to the beginning and \"_\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood, kept to one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. Assign \"emotion_tag\" as the property key for SER related content and here's how a typical entry should look: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "kept to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; kept to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion. Kept to one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Point out the speaker's emotion. Kept to one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "{EMOTION_TAG}",
              "inst": "Point out the speaker's emotion and kept to one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin it with \"{EMOTION_TAG}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*sentiment*",
              "inst": "Point out the speaker's emotion and kept to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"*sentiment*\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's emotion and kept to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and kept to one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style, allocate the key \"predicted_emotion\" for the data derived from SER and the json object should be in this pattern: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker and summed up in one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Summarize the emotion of the speaker; summed up in one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters: ",
          "prefix": [
            {
              "prefix": "*Mood*",
              "inst": "Summarize the emotion of the speaker and summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"*Mood*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Summarize the emotion of the speaker; summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and put \"{EMOTION_LABEL}\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the emotion of the speaker; summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"\"\" in front and \"\"\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. Summed up in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json, for the SER entry, use \"emotion_output\" as its key; output a json string such as: {\"emotion_output\": \"(affect)\"}: ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion, simply in one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion ",
          "lower_case": "Point out the speaker's emotion and simply in one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_TONE]",
              "inst": "Point out the speaker's emotion. Simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"[EMOTIONAL_TONE]\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Point out the speaker's emotion, simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"**emotion_result**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Point out the speaker's emotion; simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"<\" and \">\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Display the result in json formatting style and the designated key for SER should remain \"emotion_result\"; the json result must follow this form: {\"emotion_result\": \"(emotion)\"}. ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion, just use one word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". output the SER label as uppercase text ",
          "lower_case": "State the speaker's emotion and just use one word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "State the speaker's emotion, just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"The analyzed emotion state: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_RESULT}",
              "inst": "State the speaker's emotion, just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and terminate the result using \"{EMOTION_RESULT}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's emotion. Just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and just use one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object and use \"speaker_emotion\" as the json label for SER; a correct formatting instance is: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. Limited to one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure all emotion labels are uppercase ",
          "lower_case": "Tell the speaker's emotion, limited to one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Tell the speaker's emotion, limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The speaker's emotion is: \" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Tell the speaker's emotion, limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"{affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's emotion and limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"\"\" and append \"\"\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, limited to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format. Link the key \"emotion_output\" directly to the SER data, the output must match this structure: {\"emotion_output\": \"(perceived emotion)\"}. ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker; describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker; describe in one word and pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase text for the predicted emotion. ",
          "lower_case": "Identify the emotion of the speaker, describe in one word and pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "*EMOTION_TAG*",
              "inst": "Identify the emotion of the speaker and describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*EMOTION_TAG*\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Identify the emotion of the speaker and describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"{EMOTION_LABEL}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Identify the emotion of the speaker, describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"~\" and \"~\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, describe in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and use \"emotion\" as the json label for SER and you can format it as follows: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling, conveyed in one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Point out the speaker's feeling and conveyed in one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Point out the speaker's feeling and conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin the output using \"The analyzed emotion state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[SPEAKER_EMOTION]",
              "inst": "Point out the speaker's feeling. conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"[SPEAKER_EMOTION]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's feeling and conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result inside a pair of \"_\" and \"_\" tags "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; conveyed in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Show the result using key-value pairs in json, please assign the key \"emotion_result\" to the SER field; a compliant example would appear like: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood; written in one word and choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Specify the speaker's mood and written in one word and choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "{Emotion}",
              "inst": "Specify the speaker's mood and written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", START WITH \"{Emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<PREDICTED_EMOTION>",
              "inst": "Specify the speaker's mood and written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have \"<PREDICTED_EMOTION>\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's mood, written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"'\" and \"'\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and written in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string. Place the result of SER beneath the key \"emotion_result\". One possible output form: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling, summarize in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present the SER label in uppercase letters only: ",
          "lower_case": "Tell the speaker's feeling; summarize in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "Tell the speaker's feeling and summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Emotion_Result}\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<affect>",
              "inst": "Tell the speaker's feeling, summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"<affect>\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's feeling and summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"<text>\" and append \"</text>\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. summarize in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure and when structuring the result, use \"emotion\" for the SER section and consider this sample format: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood, conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood. conveyed in one word; must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Describe the speaker's mood, conveyed in one word; must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "*emotion_label*",
              "inst": "Describe the speaker's mood and conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and initiated by \"*emotion_label*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{FEELING}",
              "inst": "Describe the speaker's mood; conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"{FEELING}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's mood. Conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"#\" and \"#\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. Conveyed in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container; use \"detected_emotion\" as the json label for SER. The result should be rendered in this format: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "in a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. in a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling. In a single word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and only output the emotion in uppercase format. ",
          "lower_case": "Explain the speaker's feeling, in a single word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "<emotion_tag>",
              "inst": "Explain the speaker's feeling, in a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make \"<emotion_tag>\" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "{voice_emotion}",
              "inst": "Explain the speaker's feeling; in a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finalize it by adding \"{voice_emotion}\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the speaker's feeling; in a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"'\" at the start and \"'\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. In a single word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container. SER must be stored in the json under the key \"emotion_label\", a correct formatting instance is: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "with a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, with a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker. With a single word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the recognized emotion in all uppercase letters: ",
          "lower_case": "Describe the emotion of the speaker; with a single word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Describe the emotion of the speaker, with a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"Predicted speaker emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "Describe the emotion of the speaker; with a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"*emotion*\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the emotion of the speaker and with a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Mark the result using \"<\" before and \">\" after "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. With a single word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the output in a structured json layout and link the key \"emotion\" directly to the SER data and a valid format example: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion. Named in one word. Provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result. ",
          "lower_case": "Summarize the speaker's emotion and named in one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Summarize the speaker's emotion; named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"{emotion_result}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION**",
              "inst": "Summarize the speaker's emotion and named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and label the end of the result with \"**EMOTION**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's emotion. Named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"<text>\" at the start and \"</text>\" at the end: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, named in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure and assign the string \"predicted_emotion\" as the field name for SER; this is an appropriate format: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood; written in one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Express the speaker's mood. Written in one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only: ",
          "prefix": [
            {
              "prefix": "*AFFECT*",
              "inst": "Express the speaker's mood; written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*AFFECT*\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "Express the speaker's mood and written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"**SENTIMENT**\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's mood, written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure; record SER using \"predicted_emotion\" as the key in the json structure, keep your output consistent with: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "mention in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. mention in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; mention in one word. Pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters. ",
          "lower_case": "Explain the speaker's emotion and mention in one word. Pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Explain the speaker's emotion; mention in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". adding \"The classified sentiment is: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Explain the speaker's emotion and mention in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"{Mood}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the speaker's emotion; mention in one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and mention in one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Serialize the result into json form; record SER using \"emotion_tag\" as the key in the json structure, consider this sample format: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "reply in one word. return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion, reply in one word. return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion. Reply in one word. Return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion label in uppercase text only ",
          "lower_case": "Specify the speaker's emotion. reply in one word. return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\" and present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Specify the speaker's emotion. Reply in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"Determined mood from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Specify the speaker's emotion. Reply in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and apply \"{EMOTION_OUTPUT}\" to the output's end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the speaker's emotion and reply in one word. Return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Frame the result with a leading \"(\" and trailing \")\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, reply in one word. return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format, when structuring the result, use \"emotional_state\" for the SER section and a demonstration of the expected format: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in precisely one word. limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. In precisely one word. limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, in precisely one word. limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text ",
          "lower_case": "State the speaker's mood; in precisely one word. limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "State the speaker's mood and in precisely one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Emotion_Result}\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "State the speaker's mood; in precisely one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"*emotional_tone*\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's mood; in precisely one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"_\" before and \"_\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; in precisely one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules and the output variable for SER is expected to be labeled \"emotion_output\", maintain the structure like so: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "clarified in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, clarified in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling; clarified in one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only ",
          "lower_case": "Express the speaker's feeling. Clarified in one word. the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Express the speaker's feeling; clarified in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Identified emotion category: \" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_output>",
              "inst": "Express the speaker's feeling, clarified in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"<emotion_output>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling, clarified in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"$\" and \"$\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. clarified in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the data inside a properly formed json. The output variable for SER is expected to be labeled \"emotion_label\", the expected structure looks like this: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, summarize in one word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result ",
          "lower_case": "Describe the speaker's mood. summarize in one word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Describe the speaker's mood. Summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed by \"Final predicted emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Describe the speaker's mood; summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"[AFFECT]\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the speaker's mood; summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, summarize in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Show the result using key-value pairs in json; when formatting, associate SER with \"SER\". An illustration of the format would be: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "simply in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and simply in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and simply in one word. the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the uppercase version of the detected emotion ",
          "lower_case": "Express the speaker's mood; simply in one word. The answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Format the emotion label so that all text is lowercase: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Express the speaker's mood and simply in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with the top marked by \"The emotional tone detected: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Express the speaker's mood. simply in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<EMOTION_RESULT>\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's mood. simply in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". frame the result with a leading \"\"\" and trailing \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Simply in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style and make sure the SER output is labeled \"speaker_emotion\", your result should mirror this: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. declared in one word and pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase ",
          "lower_case": "Explain the speaker's feeling. Declared in one word and pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_STATE]",
              "inst": "Explain the speaker's feeling. Declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed by \"[EMOTIONAL_STATE]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Explain the speaker's feeling and declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"<predicted_emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's feeling and declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"<text>\" and \"</text>\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and declared in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object, allocate the key \"speaker_emotion\" for the data derived from SER. the expected structure looks like this: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. Delivered in one word; the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER label as uppercase text: ",
          "lower_case": "Explain the speaker's feeling. Delivered in one word; the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Explain the speaker's feeling, delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"Recognized emotional category: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Explain the speaker's feeling. delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"{Feeling}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the speaker's feeling; delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"\"\" on the left and \"\"\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. delivered in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format and assign \"emotion_label\" as the property key for SER related content. Your result should mirror this: {\"emotion_label\": \"(affect)\"}: ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_1/Ses05F_script03_1_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling; conveyed in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result ",
          "lower_case": "Explain the speaker's feeling. conveyed in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\". return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Explain the speaker's feeling. conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"Recognized emotional category: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_RESULT*",
              "inst": "Explain the speaker's feeling. Conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"*EMOTION_RESULT*\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the speaker's feeling; conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"'\" and \"'\" tags "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure. Include the SER output under the key \"SER\". your final output should take the form: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood; limited to one word and the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and detect the emotion and format all letters as uppercase: ",
          "lower_case": "Explain the speaker's mood and limited to one word and the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "[PREDICTED_EMOTION]",
              "inst": "Explain the speaker's mood, limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[PREDICTED_EMOTION]\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_tag}",
              "inst": "Explain the speaker's mood and limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"{emotion_tag}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's mood; limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; limited to one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json. Bind the task SER to the key \"emotion\" and the output should resemble: {\"emotion\": \"(perceived emotion)\"} ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood and limited to one word and return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Summarize the speaker's mood. Limited to one word and return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Summarize the speaker's mood, limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", beginning with \"Emotion result from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "Summarize the speaker's mood. Limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"*emotion_tag*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's mood, limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; limited to one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. The designated key for SER should remain \"emotion_result\" and this is an appropriate format: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion, limited to one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". show the detected emotion fully in uppercase characters ",
          "lower_case": "Identify the speaker's emotion, limited to one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "{emotion_label}",
              "inst": "Identify the speaker's emotion. limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{emotion_label}\" as the heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Identify the speaker's emotion; limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"[sentiment]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's emotion, limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"(\" before the result and \")\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object; place the result of SER beneath the key \"SER\"; the correct json format includes: {\"SER\": \"(mood)\"}. ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, only in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return uppercase-only emotion recognition output. ",
          "lower_case": "Explain the speaker's mood and only in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Explain the speaker's mood and only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"Perceived emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Explain the speaker's mood, only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow up by appending \"<EMOTIONAL_TONE>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's mood and only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap it by placing \"$\" in front and \"$\" behind "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; only in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the data inside a properly formed json. record SER using \"emotional_state\" as the key in the json structure and one possible output form: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings and rendered in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce the emotion label with all letters in uppercase: ",
          "lower_case": "Describe the speaker's feelings. rendered in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Describe the speaker's feelings, rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and commence with \"Recognized voice emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{VOICE_EMOTION}",
              "inst": "Describe the speaker's feelings, rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"{VOICE_EMOTION}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's feelings and rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"<\" and \">\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format and the json attribute for SER is \"emotion_label\"; the result should be rendered in this format: {\"emotion_label\": \"(perceived emotion)\"}. ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion; revealed in one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase ",
          "lower_case": "Specify the speaker's emotion; revealed in one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "*EMOTION_LABEL*",
              "inst": "Specify the speaker's emotion; revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"*EMOTION_LABEL*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_State*",
              "inst": "Specify the speaker's emotion; revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*Emotional_State*\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's emotion, revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"'\" and append \"'\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; revealed in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json and the SER value should be indexed by \"emotion_tag\", your result should mirror this: {\"emotion_tag\": \"(feeling)\"} ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion and in only one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase. ",
          "lower_case": "Point out the speaker's emotion. In only one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "*emotion_output*",
              "inst": "Point out the speaker's emotion and in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and front-loaded with \"*emotion_output*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_LABEL>",
              "inst": "Point out the speaker's emotion and in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"<EMOTION_LABEL>\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's emotion. in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"{\" on the left and \"}\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion, in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object, represent SER in the json with the key \"predicted_emotion\"; the data should be formatted like this: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "in precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, in precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling; in precisely one word; the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters ",
          "lower_case": "Specify the speaker's feeling; in precisely one word; the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "[speaker_emotion]",
              "inst": "Specify the speaker's feeling, in precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[speaker_emotion]\" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION>",
              "inst": "Specify the speaker's feeling, in precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"<EMOTION>\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the speaker's feeling. In precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"<wrap>\" and \"</wrap>\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; in precisely one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json. Use \"SER\" as the json label for SER and output a json string such as: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker and written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker and written in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters ",
          "lower_case": "Identify the emotion of the speaker. written in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "*emotion*",
              "inst": "Identify the emotion of the speaker, written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"*emotion*\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Output>",
              "inst": "Identify the emotion of the speaker. written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have the result trail off with \"<Emotion_Output>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the emotion of the speaker. Written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"\"\" and \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation; the output variable for SER is expected to be labeled \"emotion\" and refer to this sample output: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling, chosen in one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters ",
          "lower_case": "Express the speaker's feeling and chosen in one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Express the speaker's feeling. chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[VOICE_EMOTION]\" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Express the speaker's feeling. Chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"[emotion_output]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's feeling and chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"<start>\" at the start and \"<end>\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; chosen in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is encapsulated in json and assign the string \"detected_emotion\" as the field name for SER. The data should be formatted like this: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F018.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "state it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; state it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood and state it in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Identify the speaker's mood; state it in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "{PERCEIVED_EMOTION}",
              "inst": "Identify the speaker's mood and state it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"{PERCEIVED_EMOTION}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Tag**",
              "inst": "Identify the speaker's mood and state it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finalize it by adding \"**Emotion_Tag**\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's mood. State it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"$\" and \"$\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; state it in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output the information using json formatting rules and for the SER entry, use \"emotional_state\" as its key. A compliant example would appear like: {\"emotional_state\": \"(emotion)\"}: ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F019.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker and simply in one word and provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase: ",
          "lower_case": "Describe the emotion of the speaker; simply in one word and provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\". present only the lowercase emotion label as the result ",
          "prefix": [
            {
              "prefix": "<PERCEIVED_EMOTION>",
              "inst": "Describe the emotion of the speaker and simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<PERCEIVED_EMOTION>\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**Predicted_Emotion**",
              "inst": "Describe the emotion of the speaker; simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**Predicted_Emotion**\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the emotion of the speaker, simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, simply in one word and provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style. The SER value should be indexed by \"emotion_result\" and the json representation should be like: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker and clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and clarified in one word. Select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER result in uppercase format only ",
          "lower_case": "Describe the emotion of the speaker. Clarified in one word. select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Describe the emotion of the speaker and clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"The emotional tone detected: \" leading. "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Describe the emotion of the speaker, clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"{SENTIMENT}\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the emotion of the speaker. Clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and clarified in one word. Select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style and the output variable for SER is expected to be labeled \"emotion\", the correct json format includes: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F021.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "restricted to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; restricted to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood and restricted to one word. answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase emotion output: ",
          "lower_case": "Point out the speaker's mood. Restricted to one word. Answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "*SPEAKER_EMOTION*",
              "inst": "Point out the speaker's mood; restricted to one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*SPEAKER_EMOTION*\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "Point out the speaker's mood, restricted to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"**Affect**\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's mood, restricted to one word. Answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; restricted to one word. answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object; represent SER in the json with the key \"emotion_label\". Please follow the template: {\"emotion_label\": \"(perceived emotion)\"}. ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood, expressed in one word and must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Tell the speaker's mood. expressed in one word and must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "*EMOTION*",
              "inst": "Tell the speaker's mood and expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"*EMOTION*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_TONE**",
              "inst": "Tell the speaker's mood, expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"**EMOTIONAL_TONE**\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's mood. Expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"***\" and append \"***\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and expressed in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object and ensure \"emotion_result\" is used as the access key for SER. the formatting guide is: {\"emotion_result\": \"(emotion)\"}. ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F023.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summed in one word. Only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and summed in one word. Only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling and summed in one word. Only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase text for the predicted emotion ",
          "lower_case": "Summarize the speaker's feeling; summed in one word. Only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "[affect]",
              "inst": "Summarize the speaker's feeling. Summed in one word. Only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[affect]\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Summarize the speaker's feeling and summed in one word. Only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"<Speaker_Emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Summarize the speaker's feeling. summed in one word. only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". represent the result inside the bounds of \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. summed in one word. only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format. Structure your json so that SER is labeled as \"emotion_label\" and the data should be formatted like this: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F024.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "elaborated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and elaborated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood; elaborated in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return uppercase-only emotion recognition output ",
          "lower_case": "Point out the speaker's mood. elaborated in one word. pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "[emotional_state]",
              "inst": "Point out the speaker's mood. Elaborated in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin it with \"[emotional_state]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_TAG>",
              "inst": "Point out the speaker's mood and elaborated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<EMOTION_TAG>\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Point out the speaker's mood; elaborated in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"<BOS>\" on the left and \"<EOS>\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; elaborated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format; make sure the SER output is labeled \"predicted_emotion\", to illustrate, use: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F027.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood, just use one word, select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion. ",
          "lower_case": "Summarize the speaker's mood. just use one word, select one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Summarize the speaker's mood, just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Having \"Recognized voice emotion: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Summarize the speaker's mood and just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"*emotion_label*\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Summarize the speaker's mood and just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<wrap>\" before and \"</wrap>\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, just use one word, select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style and attach \"emotion\" to the result of SER in the final output; maintain the structure like so: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F029.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood and written in one word and only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters ",
          "lower_case": "Identify the speaker's mood. written in one word and only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "<Predicted_Emotion>",
              "inst": "Identify the speaker's mood and written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"<Predicted_Emotion>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Identify the speaker's mood; written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and let \"*Affect*\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the speaker's mood; written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"*\" and \"*\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Written in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container. The key \"speaker_emotion\" maps to the result of SER, you can format it as follows: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F030.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion. say it in exactly one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give only the predicted emotion using uppercase letters. ",
          "lower_case": "Point out the speaker's emotion; say it in exactly one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "[EMOTION_TAG]",
              "inst": "Point out the speaker's emotion, say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"[EMOTION_TAG]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Point out the speaker's emotion and say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"<emotional_tone>\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's emotion and say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"(\" and \")\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions, allocate the key \"detected_emotion\" for the data derived from SER. Use the following format in your response: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F031.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood; in a single word; pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase. ",
          "lower_case": "Express the speaker's mood. in a single word; pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "*Feeling*",
              "inst": "Express the speaker's mood, in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make \"*Feeling*\" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Express the speaker's mood, in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and apply \"*Predicted_Emotion*\" to the output's end. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's mood. In a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the result into a json-compatible structure and the field related to SER must be labeled with \"emotion_tag\" and this is an appropriate format: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F032.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "chosen in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and chosen in one word. output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion and chosen in one word. Output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and format the emotion label so that all text is uppercase. ",
          "lower_case": "Describe the speaker's emotion, chosen in one word. output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Describe the speaker's emotion and chosen in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepend \"The analyzed emotion state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[perceived_emotion]",
              "inst": "Describe the speaker's emotion; chosen in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"[perceived_emotion]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Describe the speaker's emotion; chosen in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; chosen in one word. output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make the output conform to json formatting; use \"predicted_emotion\" as the json label for SER. For example: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion and captured in one word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return just the emotion label with no lowercase letters. ",
          "lower_case": "Specify the speaker's emotion; captured in one word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "Specify the speaker's emotion; captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert \"[emotion_label]\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_TONE**",
              "inst": "Specify the speaker's emotion and captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"**EMOTIONAL_TONE**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's emotion and captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"#\" and \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion and captured in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json. the field related to SER must be labeled with \"detected_emotion\" and here is a sample representation: {\"detected_emotion\": \"(emotional tone)\"}: ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood and summarized in one word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text: ",
          "lower_case": "Tell the speaker's mood, summarized in one word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Tell the speaker's mood, summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"Predicted mood label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Tell the speaker's mood and summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"**Perceived_Emotion**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the speaker's mood; summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is framed by \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; summarized in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; place the result of SER beneath the key \"SER\" and the expected structure looks like this: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood and conveyed in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER classification in uppercase letters: ",
          "lower_case": "Specify the speaker's mood and conveyed in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_STATE]",
              "inst": "Specify the speaker's mood, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". launching with \"[EMOTIONAL_STATE]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Specify the speaker's mood, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"**emotion_output**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood. Conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, conveyed in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format and please tag the SER information with the key \"speaker_emotion\" and the expected structure looks like this: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. In a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling and in a single word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and detect the emotion and format all letters as uppercase ",
          "lower_case": "Explain the speaker's feeling; in a single word. Pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "{PREDICTED_EMOTION}",
              "inst": "Explain the speaker's feeling. In a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{PREDICTED_EMOTION}\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Label**",
              "inst": "Explain the speaker's feeling and in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**Emotion_Label**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's feeling, in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"_\" and \"_\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, in a single word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format; SER must be stored in the json under the key \"emotion_label\", the output must match this structure: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F037.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "say it in exactly one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, say it in exactly one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker and say it in exactly one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert and return the detected emotion fully uppercase: ",
          "lower_case": "Identify the emotion of the speaker, say it in exactly one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "Identify the emotion of the speaker. say it in exactly one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"The mood derived from voice: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{PREDICTED_EMOTION}",
              "inst": "Identify the emotion of the speaker and say it in exactly one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{PREDICTED_EMOTION}\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the emotion of the speaker, say it in exactly one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"**\" and \"**\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and say it in exactly one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting. bind the task SER to the key \"SER\"; the formatting guide is: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F038.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker; captured in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", detect the emotion and format all letters as uppercase: ",
          "lower_case": "State the emotion of the speaker, captured in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "<Emotional_Tone>",
              "inst": "State the emotion of the speaker and captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<Emotional_Tone>\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "State the emotion of the speaker; captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"{Speaker_Emotion}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the emotion of the speaker; captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; captured in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting, bind the task SER to the key \"SER\". the formatting guide is: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F039.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and explained in one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Tell the emotion of the speaker; explained in one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Tell the emotion of the speaker, explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"Speech tone analysis result: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Tell the emotion of the speaker and explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{Feeling}\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the emotion of the speaker; explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"_\" and \"_\" to bracket the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and explained in one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure and SER must be stored in the json under the key \"emotion_output\" and this is an appropriate format: {\"emotion_output\": \"(feeling)\"}: ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood and rendered in one word, chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce the emotion label with all letters in uppercase ",
          "lower_case": "Explain the speaker's mood; rendered in one word, chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "{EMOTION}",
              "inst": "Explain the speaker's mood; rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{EMOTION}\" opening up the text "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Explain the speaker's mood and rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*mood*\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's mood. Rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, rendered in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data; the SER value should be indexed by \"emotion_output\", the result should be rendered in this format: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_F041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood and expressed in one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only ",
          "lower_case": "Point out the speaker's mood, expressed in one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Point out the speaker's mood, expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"*Emotion_Tag*\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Point out the speaker's mood, expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"{MOOD}\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's mood and expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, expressed in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object and structure your json so that SER is labeled as \"emotional_state\"; the expected structure looks like this: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M004.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "expressed in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion, expressed in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion and expressed in one word. pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Summarize the speaker's emotion and expressed in one word. Pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "*predicted_emotion*",
              "inst": "Summarize the speaker's emotion and expressed in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"*predicted_emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_TAG*",
              "inst": "Summarize the speaker's emotion; expressed in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"*EMOTION_TAG*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's emotion and expressed in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"[\" and closing \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; expressed in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout; allocate the key \"detected_emotion\" for the data derived from SER. an illustration of the format would be: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood and addressed in one word and the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes. ",
          "lower_case": "Summarize the speaker's mood, addressed in one word and the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "Summarize the speaker's mood and addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"*emotion_tag*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Summarize the speaker's mood. Addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"<Speaker_Emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's mood, addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"#\" and suffix it with \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and addressed in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json, format the SER data using \"sentiment\" as its key name and keep your output consistent with: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M008.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "simply in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; simply in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion and simply in one word. The output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present the SER label in uppercase letters only. ",
          "lower_case": "Describe the speaker's emotion. simply in one word. The output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Describe the speaker's emotion and simply in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"Speech-derived emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**PERCEIVED_EMOTION**",
              "inst": "Describe the speaker's emotion. Simply in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"**PERCEIVED_EMOTION**\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the speaker's emotion, simply in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; simply in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object; allocate the key \"emotion\" for the data derived from SER. The json result must follow this form: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "in just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and in just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker; in just one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase: ",
          "lower_case": "Express the emotion of the speaker and in just one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "<MOOD>",
              "inst": "Express the emotion of the speaker. In just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<MOOD>\" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "[voice_emotion]",
              "inst": "Express the emotion of the speaker. In just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"[voice_emotion]\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the emotion of the speaker. in just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker and in just one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the output directly into json. Make sure the SER output is labeled \"emotion\"; a correctly structured entry is: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "explained in one word. limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; explained in one word. limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling. Explained in one word. limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form ",
          "lower_case": "Tell the speaker's feeling. explained in one word. limited to \"happy\", \"sad\", \"angry\" or \"neutral\". deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "<FEELING>",
              "inst": "Tell the speaker's feeling; explained in one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<FEELING>\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Tell the speaker's feeling and explained in one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"{EMOTION_LABEL}\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Tell the speaker's feeling; explained in one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"'\" and closing \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; explained in one word. Limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", generate a json-formatted version of the result; represent the result of SER using the key \"detected_emotion\", a demonstration of the expected format: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M013.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "only use one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; only use one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling; only use one word. Return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase. ",
          "lower_case": "Specify the speaker's feeling and only use one word. Return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\". reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Specify the speaker's feeling and only use one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"The analyzed emotion state: \" at the very top. "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "Specify the speaker's feeling, only use one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"*AFFECT*\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Specify the speaker's feeling; only use one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"$\" in front and \"$\" behind "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. Only use one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object; when formatting, associate SER with \"emotion\", a correct formatting instance is: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M014.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "in one single word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, in one single word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and in one single word. the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase: ",
          "lower_case": "Describe the emotion of the speaker and in one single word. the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Describe the emotion of the speaker. in one single word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; start it with \"Final predicted emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Describe the emotion of the speaker; in one single word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"{EMOTION_LABEL}\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Describe the emotion of the speaker. In one single word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix the result with \"_\" and suffix it with \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, in one single word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object, assign the string \"emotion_result\" as the field name for SER, your final output should take the form: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M016.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in one single word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and in one single word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling, in one single word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only ",
          "lower_case": "Point out the speaker's feeling, in one single word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Point out the speaker's feeling. In one single word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Detected speech feeling: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Tag*",
              "inst": "Point out the speaker's feeling, in one single word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*Emotion_Tag*\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's feeling. in one single word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"_\" and closing \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; in one single word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation and please tag the SER information with the key \"SER\". one possible output form: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M019.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and just one word, chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only ",
          "lower_case": "Point out the speaker's feeling and just one word, chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Point out the speaker's feeling, just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Identified emotion category: \" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "Point out the speaker's feeling, just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"[emotional_tone]\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling, just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make use of \"~\" and \"~\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, just one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json; when formatting, associate SER with \"predicted_emotion\". One possible output form: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M022.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker. Mention in one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only ",
          "lower_case": "Describe the emotion of the speaker, mention in one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text: ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Describe the emotion of the speaker. Mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Describe the emotion of the speaker, mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"{Speaker_Emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the emotion of the speaker and mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, mention in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object and link the key \"SER\" directly to the SER data; refer to this sample output: {\"SER\": \"(feeling)\"}: ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M024.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion. Captured in one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "State the speaker's emotion, captured in one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_TONE*",
              "inst": "State the speaker's emotion; captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"*EMOTIONAL_TONE*\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "State the speaker's emotion. captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and label the end of the result with \"**emotion_result**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's emotion. Captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"**\" at the beginning and \"**\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and captured in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format everything using strict json notation, ensure \"emotional_state\" is used as the access key for SER. you can format it as follows: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "in one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and in one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion, in one single word, answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text ",
          "lower_case": "Describe the speaker's emotion, in one single word, answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Describe the speaker's emotion and in one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with an opening of \"[EMOTION_RESULT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "Describe the speaker's emotion. In one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finalize it by adding \"**emotion_label**\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's emotion, in one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"$\" on the left and \"$\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; in one single word, answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object. The label \"emotion_result\" must correspond to the SER section, for reference, your output might look like: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M026.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion. in only one word. Output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Express the speaker's emotion, in only one word. output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; give only the emotion classification using lowercase letters ",
          "prefix": [
            {
              "prefix": "**EMOTION_OUTPUT**",
              "inst": "Express the speaker's emotion; in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"**EMOTION_OUTPUT**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Express the speaker's emotion, in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"**PREDICTED_EMOTION**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion. In only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bracket the result inside \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; in only one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object, encode the SER content using \"SER\" as its identifier, maintain the structure like so: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M037.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling, describe in one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result: ",
          "lower_case": "Tell the speaker's feeling; describe in one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "**Feeling**",
              "inst": "Tell the speaker's feeling; describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make \"**Feeling**\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "Tell the speaker's feeling and describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"**affect**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the speaker's feeling; describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"**\" and \"**\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and describe in one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object. The json attribute for SER is \"detected_emotion\"; a valid format example: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M038.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion. Summed up in one word, output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion label in uppercase text only ",
          "lower_case": "Summarize the speaker's emotion; summed up in one word, output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "Summarize the speaker's emotion and summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", headed by \"{Emotion_Result}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Summarize the speaker's emotion. Summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"{emotion_label}\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's emotion. Summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<s>\" before and \"</s>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, summed up in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format and when structuring the result, use \"detected_emotion\" for the SER section and the data should be formatted like this: {\"detected_emotion\": \"(emotional tone)\"}: ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M039.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood and only use one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". detect the emotion and format all letters as uppercase ",
          "lower_case": "Specify the speaker's mood; only use one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Specify the speaker's mood and only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Emotion result from audio: \" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "<sentiment>",
              "inst": "Specify the speaker's mood; only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and add \"<sentiment>\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's mood; only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"<\" and \">\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. only use one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax. Write the SER result with \"emotion_result\" as its property name, when in doubt, refer to: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. Limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion, limited to one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only ",
          "lower_case": "Describe the speaker's emotion; limited to one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "{EMOTIONAL_TONE}",
              "inst": "Describe the speaker's emotion and limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"{EMOTIONAL_TONE}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_tone}",
              "inst": "Describe the speaker's emotion. Limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"{emotional_tone}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's emotion and limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put \"#\" and \"#\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, limited to one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is encapsulated in json. The SER result must be identified using the key \"emotion_label\". your final output should take the form: {\"emotion_label\": \"(emotional tone)\"}: ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Revealed in one word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the uppercase emotion result. ",
          "lower_case": "Specify the speaker's mood. Revealed in one word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Specify the speaker's mood. Revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{emotion_tag}\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Specify the speaker's mood; revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"[emotion_result]\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's mood; revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Include the result within \"*\" and \"*\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result and the SER value should be indexed by \"emotion_output\"; the expected structure looks like this: {\"emotion_output\": \"(emotion)\"}. ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M042.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's emotion, reply in one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give the predicted emotion entirely in uppercase: ",
          "lower_case": "Point out the speaker's emotion; reply in one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "{EMOTION_OUTPUT}",
              "inst": "Point out the speaker's emotion and reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make \"{EMOTION_OUTPUT}\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "Point out the speaker's emotion, reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**EMOTION_RESULT**\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's emotion and reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; reply in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the data inside a properly formed json. Make sure the SER output is labeled \"SER\"; to illustrate, use: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05F_script03_2/Ses05F_script03_2_M043.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood, explained in one word, select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the emotion label in uppercase form: ",
          "lower_case": "Describe the speaker's mood; explained in one word, select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "*Affect*",
              "inst": "Describe the speaker's mood and explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"*Affect*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Describe the speaker's mood. Explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"**Perceived_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's mood. Explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, explained in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object. Link the key \"predicted_emotion\" directly to the SER data; refer to this sample output: {\"predicted_emotion\": \"(mood)\"}. ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion. Declared in one word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce only uppercase text from the SER result: ",
          "lower_case": "Tell the speaker's emotion; declared in one word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Tell the speaker's emotion, declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Detected affective state: \" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "[affect]",
              "inst": "Tell the speaker's emotion; declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"[affect]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's emotion. declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"_\" and trailing \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; declared in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the result into json-structured data and encode the SER content using \"SER\" as its identifier; a compliant example would appear like: {\"SER\": \"(mood)\"}. ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood. captured in one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion. ",
          "lower_case": "Tell the speaker's mood; captured in one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "[Affect]",
              "inst": "Tell the speaker's mood, captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[Affect]\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Tell the speaker's mood, captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"[EMOTIONAL_STATE]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Tell the speaker's mood; captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"<\" in the front and \">\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; captured in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data and assign \"emotional_state\" as the property key for SER related content and here's how a typical entry should look: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and declared in one word. the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce only uppercase text from the SER result: ",
          "lower_case": "Specify the speaker's feeling and declared in one word. The selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "<Sentiment>",
              "inst": "Specify the speaker's feeling, declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"<Sentiment>\" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Specify the speaker's feeling and declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{Affect}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Specify the speaker's feeling; declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. Declared in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the output in a structured json layout, make sure the SER output is labeled \"emotion_tag\"; please follow the template: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood; rendered in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the uppercase emotion result: ",
          "lower_case": "Tell the speaker's mood. Rendered in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". return the detected emotional state in all lowercase letters: ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Tell the speaker's mood; rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{feeling}\" heading things up: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Tell the speaker's mood; rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And end the result by inserting \"*emotional_tone*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the speaker's mood and rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"[\" and \"]\" tags "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. Rendered in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data and the output variable for SER is expected to be labeled \"sentiment\". you are expected to return: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "expressed in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; expressed in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood. expressed in one word. Only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters. ",
          "lower_case": "Express the speaker's mood, expressed in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "<Affect>",
              "inst": "Express the speaker's mood. Expressed in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"<Affect>\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "Express the speaker's mood, expressed in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"**affect**\" to finish the sequence: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's mood; expressed in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"**\" before the result and \"**\" after it "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Expressed in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax, the designated key for SER should remain \"emotion_label\", maintain the structure like so: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood; summarized in one word and the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make the emotion recognition result all uppercase: ",
          "lower_case": "Explain the speaker's mood. Summarized in one word and the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "<Emotional_Tone>",
              "inst": "Explain the speaker's mood; summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<Emotional_Tone>\" leading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[affect]",
              "inst": "Explain the speaker's mood and summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finalize it by adding \"[affect]\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's mood, summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, summarized in one word and the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object. Place the result of SER beneath the key \"predicted_emotion\" and a demonstration of the expected format: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood; presented in one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Specify the speaker's mood. Presented in one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "<MOOD>",
              "inst": "Specify the speaker's mood. Presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Led by \"<MOOD>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Specify the speaker's mood, presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish everything with a \"*SPEAKER_EMOTION*\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood, presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result between \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. Presented in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container. Please tag the SER information with the key \"speaker_emotion\", the formatting guide is: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood. Say it in exactly one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the recognized emotion into uppercase text ",
          "lower_case": "Describe the speaker's mood; say it in exactly one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "*Emotion*",
              "inst": "Describe the speaker's mood and say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Emotion*\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Result>",
              "inst": "Describe the speaker's mood and say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<Emotion_Result>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the speaker's mood. Say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"<text>\" and \"</text>\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and say it in exactly one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax and for the SER entry, use \"detected_emotion\" as its key; the formatting guide is: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F021.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood and put in one word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label. ",
          "lower_case": "State the speaker's mood and put in one word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "[EMOTION]",
              "inst": "State the speaker's mood and put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"[EMOTION]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "State the speaker's mood; put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and keep \"{Mood}\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the speaker's mood. Put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"<BOS>\" to the beginning and \"<EOS>\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json; use \"emotion_result\" as the json label for SER and your result should mirror this: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_F023.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood, say it in exactly one word, pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase ",
          "lower_case": "Identify the speaker's mood. say it in exactly one word, pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "*speaker_emotion*",
              "inst": "Identify the speaker's mood, say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With a lead-in of \"*speaker_emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Identify the speaker's mood. Say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"*EMOTION_OUTPUT*\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's mood and say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Say it in exactly one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string. Represent the result of SER using the key \"detected_emotion\". The output must match this structure: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_M005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and in exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood. in exactly one word; the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide just the uppercase version of the emotion. ",
          "lower_case": "Point out the speaker's mood, in exactly one word; the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Point out the speaker's mood, in exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open by adding \"The emotion from the speech: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "Point out the speaker's mood and in exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"[EMOTION_OUTPUT]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's mood. In exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"_\" and \"_\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and in exactly one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". provide the output in a structured json layout, the SER information must be placed under \"predicted_emotion\", please use a format similar to: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro01/Ses05M_impro01_M015.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. Say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion. say it in exactly one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Point out the speaker's emotion and say it in exactly one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "**EMOTION_LABEL**",
              "inst": "Point out the speaker's emotion; say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"**EMOTION_LABEL**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Point out the speaker's emotion; say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**predicted_emotion**\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's emotion, say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Tag the result with opening \"_\" and closing \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and say it in exactly one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". provide the answer inside a json container; SER should appear under the json key \"emotion\"; use the following format in your response: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker. mention in one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only ",
          "lower_case": "Summarize the emotion of the speaker; mention in one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Summarize the emotion of the speaker. Mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"The speaker's mood is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Summarize the emotion of the speaker. Mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[Voice_Emotion]\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Summarize the emotion of the speaker and mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; mention in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". provide the answer inside a json container and use \"speaker_emotion\" as the json label for SER. the output should resemble: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker, concluded with one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER classification in uppercase letters: ",
          "lower_case": "Identify the emotion of the speaker, concluded with one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the emotion label is all lowercase characters. ",
          "prefix": [
            {
              "prefix": "**emotion_label**",
              "inst": "Identify the emotion of the speaker. Concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Beginning with \"**emotion_label**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Label**",
              "inst": "Identify the emotion of the speaker, concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and apply \"**Emotion_Label**\" to the output's end "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Identify the emotion of the speaker, concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"~\" and \"~\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; concluded with one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the data inside a properly formed json, link the key \"emotion_output\" directly to the SER data; a compliant example would appear like: {\"emotion_output\": \"(mood)\"}: ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood, call it in one word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the recognized emotion into uppercase text ",
          "lower_case": "Explain the speaker's mood, call it in one word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Explain the speaker's mood. Call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", open by adding \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Explain the speaker's mood; call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"<emotional_tone>\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's mood, call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". bracket the result inside \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, call it in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json, assign the string \"sentiment\" as the field name for SER, the json representation should be like: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; mention in one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert and return the detected emotion fully uppercase. ",
          "lower_case": "Specify the speaker's mood; mention in one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "<Emotional_Tone>",
              "inst": "Specify the speaker's mood and mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<Emotional_Tone>\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "Specify the speaker's mood. Mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"[EMOTION_TAG]\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's mood, mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"*\" and suffix it with \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and mention in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object. The label \"emotional_state\" must correspond to the SER section and this is an appropriate format: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker, written in one word and must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Summarize the emotion of the speaker, written in one word and must pick from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "Summarize the emotion of the speaker; written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix it with \"Speech emotion classification: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Mood**",
              "inst": "Summarize the emotion of the speaker and written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"**Mood**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Summarize the emotion of the speaker; written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; written in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure, the SER information must be placed under \"sentiment\"; for reference, your output might look like: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_F024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings. elaborated in one word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text. ",
          "lower_case": "Describe the speaker's feelings. elaborated in one word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Describe the speaker's feelings. elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"Classification result (emotion): \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[mood]",
              "inst": "Describe the speaker's feelings and elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finalize it by adding \"[mood]\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's feelings; elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and elaborated in one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object, structure your json so that SER is labeled as \"emotion_tag\". One possible output form: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "revealed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Revealed in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker; revealed in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make the emotion recognition result all uppercase: ",
          "lower_case": "Identify the emotion of the speaker; revealed in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Identify the emotion of the speaker. Revealed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin the output using \"Predicted emotional output: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Identify the emotion of the speaker, revealed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"**voice_emotion**\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the emotion of the speaker, revealed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"{\" and suffix it with \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, revealed in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format; the SER result must be identified using the key \"emotion\"; the json result must follow this form: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood and in precisely one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Specify the speaker's mood and in precisely one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Specify the speaker's mood; in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepended with \"*sentiment*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "Specify the speaker's mood; in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**Emotional_State**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's mood, in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output the information using json formatting rules and \"emotion_tag\" should be the identifier for the SER content and maintain the structure like so: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, in exactly one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters ",
          "lower_case": "State the speaker's mood; in exactly one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "[Speaker_Emotion]",
              "inst": "State the speaker's mood; in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; kicking off with \"[Speaker_Emotion]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "State the speaker's mood and in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"[VOICE_EMOTION]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's mood, in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"***\" before and \"***\" after "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and in exactly one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style; represent the result of SER using the key \"speaker_emotion\". You are expected to return: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion, say it in exactly one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format: ",
          "lower_case": "Tell the speaker's emotion and say it in exactly one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Tell the speaker's emotion, say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Speaker's affective state: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_Tone}",
              "inst": "Tell the speaker's emotion and say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"{Emotional_Tone}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the speaker's emotion, say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"<s>\" as prefix and \"</s>\" as suffix "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and say it in exactly one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert your output into a json-compatible format; use \"emotion\" as the json label for SER; output a json string such as: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M011.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "captured in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. captured in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker, captured in one word. Provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Detect the emotion and format all letters as uppercase ",
          "lower_case": "Describe the emotion of the speaker. Captured in one word. provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "<Emotion_Tag>",
              "inst": "Describe the emotion of the speaker; captured in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"<Emotion_Tag>\" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Voice_Emotion}",
              "inst": "Describe the emotion of the speaker; captured in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and put \"{Voice_Emotion}\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the emotion of the speaker; captured in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and captured in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object and for the SER entry, use \"emotion_result\" as its key. Your result should mirror this: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M012.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "just use one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; just use one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion. Just use one word. provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present only the uppercase detected emotion as the result: ",
          "lower_case": "State the speaker's emotion; just use one word. provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "State the speaker's emotion, just use one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"Predicted mood label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "State the speaker's emotion, just use one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and include \"[Sentiment]\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's emotion and just use one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<s>\" and \"</s>\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; just use one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax, make sure the SER output is labeled \"detected_emotion\". The expected structure looks like this: {\"detected_emotion\": \"(mood)\"} ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling and rendered in one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Tell the speaker's feeling, rendered in one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Tell the speaker's feeling and rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Identified emotion category: \" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "**sentiment**",
              "inst": "Tell the speaker's feeling and rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"**sentiment**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's feeling. Rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"<wrap>\" and closing \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object. The key \"emotion_tag\" maps to the result of SER and a correctly structured entry is: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M018.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "in just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; in just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood; in just one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result: ",
          "lower_case": "Explain the speaker's mood, in just one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the speaker's mood; in just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin with \"The speaker's emotion is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Explain the speaker's mood and in just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"<Emotional_Tone>\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Explain the speaker's mood. In just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. In just one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and express the final output in proper json, attach \"emotion_result\" to the result of SER in the final output and a demonstration of the expected format: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker, mention in one word; the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text: ",
          "lower_case": "Tell the emotion of the speaker, mention in one word; the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "**Sentiment**",
              "inst": "Tell the emotion of the speaker and mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"**Sentiment**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Tell the emotion of the speaker, mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"*Feeling*\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the emotion of the speaker. Mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and guard the result with \"***\" on the left and \"***\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. mention in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format, the designated key for SER should remain \"emotional_state\"; a correctly structured entry is: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood; revealed in one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Summarize the speaker's mood. Revealed in one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "**Mood**",
              "inst": "Summarize the speaker's mood and revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". preceded by \"**Mood**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION}",
              "inst": "Summarize the speaker's mood. Revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{EMOTION}\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's mood and revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, revealed in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style and format the SER data using \"sentiment\" as its key name. Maintain the structure like so: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M022.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and reply in one word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text. ",
          "lower_case": "State the speaker's emotion; reply in one word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "State the speaker's emotion; reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with a lead-in of \"Emotion category identified: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[feeling]",
              "inst": "State the speaker's emotion. reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And write \"[feeling]\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's emotion. reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"$\" before and \"$\" after the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and reply in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object, encode the SER content using \"detected_emotion\" as its identifier and the data should be formatted like this: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion, with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion; with one single word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return just the emotion label with no lowercase letters: ",
          "lower_case": "Specify the speaker's emotion, with one single word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "**Emotion_Result**",
              "inst": "Specify the speaker's emotion, with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"**Emotion_Result**\" at the very top: "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Specify the speaker's emotion. With one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**voice_emotion**\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the speaker's emotion. With one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"<BOS>\" and \"<EOS>\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. with one single word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". produce the output adhering to json format; link the key \"sentiment\" directly to the SER data. A valid format example: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion, written in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "State the speaker's emotion, written in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "State the speaker's emotion. written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Recognized sentiment label: \" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "State the speaker's emotion. written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"**affect**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's emotion and written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". mark the result using \"***\" before and \"***\" after. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, written in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax. The key \"predicted_emotion\" maps to the result of SER, the expected structure looks like this: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "mention in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. Mention in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker, mention in one word. the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase ",
          "lower_case": "Specify the emotion of the speaker, mention in one word. the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the detected emotional state in all lowercase letters ",
          "prefix": [
            {
              "prefix": "{AFFECT}",
              "inst": "Specify the emotion of the speaker. mention in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"{AFFECT}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_output}",
              "inst": "Specify the emotion of the speaker, mention in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure \"{emotion_output}\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the emotion of the speaker, mention in one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepend \"<BOS>\" and append \"<EOS>\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and mention in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and the key \"SER\" maps to the result of SER, a demonstration of the expected format: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and rendered in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form: ",
          "lower_case": "Tell the speaker's emotion, rendered in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "**mood**",
              "inst": "Tell the speaker's emotion, rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**mood**\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_state>",
              "inst": "Tell the speaker's emotion, rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"<emotional_state>\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's emotion; rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, rendered in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style and SER should appear under the json key \"SER\"; output a json string such as: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling, with one single word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result. ",
          "lower_case": "Tell the speaker's feeling, with one single word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "**affect**",
              "inst": "Tell the speaker's feeling, with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"**affect**\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Voice_Emotion*",
              "inst": "Tell the speaker's feeling and with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"*Voice_Emotion*\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Tell the speaker's feeling; with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert \"<\" before the result and \">\" after it "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, with one single word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout; represent the result of SER using the key \"speaker_emotion\" and the json result must follow this form: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling and mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling. mention in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Respond with the recognized emotion written in uppercase only ",
          "lower_case": "Identify the speaker's feeling. Mention in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Identify the speaker's feeling; mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Final emotion classification: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Identify the speaker's feeling; mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"{Emotion_Output}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Identify the speaker's feeling and mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"<\" and \">\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and mention in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules, represent the result of SER using the key \"predicted_emotion\" and the correct json format includes: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro02/Ses05M_impro02_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. Expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion; expressed in one word, select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Point out the speaker's emotion. Expressed in one word, select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Point out the speaker's emotion, expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"Predicted emotional tone: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Point out the speaker's emotion, expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"[Affect]\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's emotion, expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". contain the result within the symbols \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. expressed in one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure and write the SER result with \"SER\" as its property name and the data should be formatted like this: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling. defined in one word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only ",
          "lower_case": "Tell the speaker's feeling. defined in one word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Tell the speaker's feeling. Defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"Predicted affect category: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Tell the speaker's feeling, defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"[sentiment]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's feeling; defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; defined in one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make the output conform to json formatting; the result corresponding to SER should be mapped to \"emotion_tag\"; you can format it as follows: {\"emotion_tag\": \"(affect)\"} ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker and articulated in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion ",
          "lower_case": "State the emotion of the speaker, articulated in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "<SENTIMENT>",
              "inst": "State the emotion of the speaker and articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"<SENTIMENT>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_state**",
              "inst": "State the emotion of the speaker; articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**emotional_state**\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the emotion of the speaker; articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"(\" at the beginning and \")\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. Articulated in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation. The SER result must be identified using the key \"emotion\"; the formatting guide is: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood and mention in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Describe the speaker's mood; mention in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "[speaker_emotion]",
              "inst": "Describe the speaker's mood and mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[speaker_emotion]\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "Describe the speaker's mood and mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and apply \"<feeling>\" to the output's end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood. mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<start>\" and \"<end>\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, mention in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting. encode the SER content using \"speaker_emotion\" as its identifier and your final output should take the form: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and summarize in one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only. ",
          "lower_case": "Describe the speaker's mood. Summarize in one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "<predicted_emotion>",
              "inst": "Describe the speaker's mood and summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"<predicted_emotion>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Result]",
              "inst": "Describe the speaker's mood, summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"[Emotion_Result]\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's mood, summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"$\" as the left boundary and \"$\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, summarize in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json, the designated key for SER should remain \"SER\"; format your response exactly as: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and in just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. In just one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make the emotion recognition result all uppercase. ",
          "lower_case": "Point out the speaker's feeling, in just one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "{PREDICTED_EMOTION}",
              "inst": "Point out the speaker's feeling, in just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"{PREDICTED_EMOTION}\" leading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "Point out the speaker's feeling. In just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"[MOOD]\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's feeling; in just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"<start>\" and suffix it with \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, in just one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax; the SER value should be indexed by \"emotion\". A proper example would be: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "with a single word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, with a single word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood and with a single word. The response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters: ",
          "lower_case": "Summarize the speaker's mood. With a single word. The response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's mood. With a single word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with the top marked by \"<EMOTIONAL_TONE>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_Tone**",
              "inst": "Summarize the speaker's mood; with a single word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finalize it by adding \"**Emotional_Tone**\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's mood; with a single word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"\"\" and \"\"\" markers "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and with a single word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards. Place the result of SER beneath the key \"emotion_tag\", an illustration of the format would be: {\"emotion_tag\": \"(perceived emotion)\"}. ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood; just one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase characters in the emotion label ",
          "lower_case": "Identify the speaker's mood; just one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Identify the speaker's mood; just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", start it with \"Predicted emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{mood}",
              "inst": "Identify the speaker's mood. just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And write \"{mood}\" after the result body. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's mood, just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax. Label the output of SER using the key \"emotion_label\"; one possible output form: {\"emotion_label\": \"(mood)\"}: ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker; concluded with one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result. ",
          "lower_case": "Summarize the emotion of the speaker, concluded with one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Summarize the emotion of the speaker, concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Final predicted emotion: \" as the heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Summarize the emotion of the speaker; concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"**voice_emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the emotion of the speaker and concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"#\" and append \"#\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. Concluded with one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container. Place the result of SER beneath the key \"emotion\"; for example: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "defined in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, defined in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood, defined in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text: ",
          "lower_case": "State the speaker's mood, defined in one word. the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "State the speaker's mood, defined in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; kicking off with \"Emotion result from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "State the speaker's mood and defined in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"[Emotion_Tag]\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's mood, defined in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<start>\" before and \"<end>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; defined in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax; represent the result of SER using the key \"emotion_tag\" and the correct json format includes: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker, in a single word and the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format. ",
          "lower_case": "Summarize the emotion of the speaker. In a single word and the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "<Speaker_Emotion>",
              "inst": "Summarize the emotion of the speaker; in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Having \"<Speaker_Emotion>\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "<AFFECT>",
              "inst": "Summarize the emotion of the speaker, in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and suffix the output with \"<AFFECT>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the emotion of the speaker, in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and in a single word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting. SER must be stored in the json under the key \"predicted_emotion\", format your response exactly as: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "expressed in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. expressed in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion. Expressed in one word. select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the output emotion label contains only uppercase letters. ",
          "lower_case": "Summarize the speaker's emotion. Expressed in one word. Select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Summarize the speaker's emotion. Expressed in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Predicted mood label: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Summarize the speaker's emotion. Expressed in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"[Mood]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's emotion; expressed in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion and expressed in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary and encode the SER content using \"emotional_state\" as its identifier; a demonstration of the expected format: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. Say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker. Say it in exactly one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER output as uppercase text only: ",
          "lower_case": "Specify the emotion of the speaker and say it in exactly one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Specify the emotion of the speaker. Say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"Speech tone analysis result: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "Specify the emotion of the speaker; say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"[MOOD]\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the emotion of the speaker and say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"<BOS>\" at the start and \"<EOS>\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. say it in exactly one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format. when structuring the result, use \"emotion_label\" for the SER section. A proper example would be: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "just one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; just one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood. just one word. The emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion result only in uppercase characters: ",
          "lower_case": "Explain the speaker's mood, just one word. The emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "Explain the speaker's mood; just one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<EMOTIONAL_TONE>\" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Predicted_Emotion}",
              "inst": "Explain the speaker's mood. Just one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"{Predicted_Emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the speaker's mood; just one word. the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; just one word. The emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting and the json representation of SER must be keyed as \"emotion_result\". A valid format example: {\"emotion_result\": \"(emotional tone)\"}. ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling, in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling. in only one word and select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase ",
          "lower_case": "Tell the speaker's feeling; in only one word and select one of \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "**speaker_emotion**",
              "inst": "Tell the speaker's feeling; in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with an opening of \"**speaker_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Voice_Emotion}",
              "inst": "Tell the speaker's feeling and in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"{Voice_Emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's feeling; in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"_\" to the beginning and \"_\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, in only one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format; the SER information must be placed under \"emotion_tag\", the expected structure looks like this: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling, summarize in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase characters in the emotion label ",
          "lower_case": "Express the speaker's feeling, summarize in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_TONE]",
              "inst": "Express the speaker's feeling; summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[EMOTIONAL_TONE]\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Voice_Emotion}",
              "inst": "Express the speaker's feeling. summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{Voice_Emotion}\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's feeling; summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; summarize in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ensure the result is formatted as valid json. The output variable for SER is expected to be labeled \"emotion_result\"; format your response exactly as: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "clarified in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, clarified in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling, clarified in one word. Choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text. ",
          "lower_case": "Summarize the speaker's feeling, clarified in one word. Choose between \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "[affect]",
              "inst": "Summarize the speaker's feeling and clarified in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", launching with \"[affect]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Summarize the speaker's feeling, clarified in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{PERCEIVED_EMOTION}\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's feeling. clarified in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; clarified in one word. choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format; format the SER data using \"emotion\" as its key name and an illustration of the format would be: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "declared in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. Declared in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling. declared in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion. ",
          "lower_case": "Explain the speaker's feeling and declared in one word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Explain the speaker's feeling; declared in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Front-loaded with \"{emotion_result}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_result>",
              "inst": "Explain the speaker's feeling, declared in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"<emotion_result>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's feeling. declared in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"_\" and \"_\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; declared in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation; the SER value should be indexed by \"emotion_result\". For example: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. Reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling. Reply in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Point out the speaker's feeling. Reply in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "Point out the speaker's feeling; reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With the top marked by \"[emotion_tag]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Point out the speaker's feeling, reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"*SPEAKER_EMOTION*\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling, reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result between the symbols \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and reply in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; print the result using json object formatting, ensure that SER is stored under the key \"emotion_output\", use the following format in your response: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "clarified in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; clarified in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood, clarified in one word. the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase ",
          "lower_case": "Express the speaker's mood, clarified in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "*Mood*",
              "inst": "Express the speaker's mood, clarified in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*Mood*\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Express the speaker's mood, clarified in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish everything with a \"<PERCEIVED_EMOTION>\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's mood and clarified in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, clarified in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation; the output variable for SER is expected to be labeled \"speaker_emotion\", follow this example to structure the data: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker. Concluded with one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words ",
          "lower_case": "Tell the emotion of the speaker; concluded with one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\". make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "<Predicted_Emotion>",
              "inst": "Tell the emotion of the speaker. concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"<Predicted_Emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Tell the emotion of the speaker. Concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"**Speaker_Emotion**\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the emotion of the speaker. concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"<text>\" in the front and \"</text>\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and concluded with one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure your response as a valid json string; label the output of SER using the key \"speaker_emotion\" and output a json string such as: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; in one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and in one single word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase emotion output ",
          "lower_case": "Describe the speaker's mood, in one single word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Describe the speaker's mood. In one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"Recognized sentiment label: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "Describe the speaker's mood; in one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"**Emotional_State**\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's mood and in one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<wrap>\" and \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, in one single word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is formatted as valid json. The key for SER should be \"detected_emotion\" respectively. For reference, your output might look like: {\"detected_emotion\": \"(emotional tone)\"}: ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Simply in one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Express the speaker's feeling; simply in one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Express the speaker's feeling and simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepended with \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Express the speaker's feeling and simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And write \"<SENTIMENT>\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's feeling and simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"'\" and \"'\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Simply in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation, format the SER data using \"emotion_tag\" as its key name; consider this sample format: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings. Defined in one word. Choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present only the uppercase detected emotion as the result: ",
          "lower_case": "Describe the speaker's feelings, defined in one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "**MOOD**",
              "inst": "Describe the speaker's feelings and defined in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**MOOD**\" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Describe the speaker's feelings; defined in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and apply \"{Mood}\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's feelings and defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"[\" and closing \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; defined in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; format the SER data using \"SER\" as its key name, please follow the template: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker and in only one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion label in uppercase text only. ",
          "lower_case": "Specify the emotion of the speaker, in only one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "Specify the emotion of the speaker, in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Speaker_Emotion}\" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Specify the emotion of the speaker, in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end by \"{Feeling}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Specify the emotion of the speaker and in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and in only one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json, use \"emotion_result\" as the designated key for SER. A correct formatting instance is: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling. Answer in one word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "State the speaker's feeling. Answer in one word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "State the speaker's feeling. answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"Emotion recognized from speech: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "State the speaker's feeling, answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make sure it ends with \"**PREDICTED_EMOTION**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's feeling and answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"<start>\" and suffix it with \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and answer in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules. The SER result must be identified using the key \"sentiment\" and the correct json format includes: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "kept to one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion, kept to one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion. kept to one word. output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER label as uppercase text ",
          "lower_case": "Specify the speaker's emotion. Kept to one word. Output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "Specify the speaker's emotion. Kept to one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Speaker_Emotion}\" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Label**",
              "inst": "Specify the speaker's emotion; kept to one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"**Emotion_Label**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the speaker's emotion and kept to one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; kept to one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string. use \"sentiment\" as the json label for SER, the appropriate response template: {\"sentiment\": \"(feeling)\"}. ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_F031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "in a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; in a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling. In a single word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase. ",
          "lower_case": "State the speaker's feeling, in a single word. provide one of \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "{Predicted_Emotion}",
              "inst": "State the speaker's feeling. in a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Predicted_Emotion}\" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "State the speaker's feeling. In a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"**Perceived_Emotion**\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's feeling, in a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the output between \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; in a single word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result and the designated key for SER should remain \"sentiment\"; use the following format in your response: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "elaborated in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. Elaborated in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and elaborated in one word. pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Identify the speaker's feeling, elaborated in one word. Pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "Identify the speaker's feeling, elaborated in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[emotion_tag]\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "Identify the speaker's feeling and elaborated in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"**Voice_Emotion**\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the speaker's feeling; elaborated in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<start>\" at the beginning and \"<end>\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and elaborated in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure and write the SER result with \"sentiment\" as its property name. use the following format in your response: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion, concluded with one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase. ",
          "lower_case": "Identify the speaker's emotion, concluded with one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_TONE**",
              "inst": "Identify the speaker's emotion. Concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"**EMOTIONAL_TONE**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{voice_emotion}",
              "inst": "Identify the speaker's emotion and concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{voice_emotion}\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Identify the speaker's emotion and concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert the result inside the brackets \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, concluded with one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result in a standard json structure, the field related to SER must be labeled with \"emotional_state\", consider this sample format: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker; summed in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters: ",
          "lower_case": "Express the emotion of the speaker; summed in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "Express the emotion of the speaker. Summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"*affect*\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Express the emotion of the speaker; summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"{MOOD}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the emotion of the speaker. Summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result with the symbol \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Summed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format. Write the SER result with \"emotion_result\" as its property name, your result should mirror this: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "in precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion; in precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion and in precisely one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output. ",
          "lower_case": "Specify the speaker's emotion; in precisely one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "<Predicted_Emotion>",
              "inst": "Specify the speaker's emotion and in precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Kicking off with \"<Predicted_Emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Specify the speaker's emotion and in precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*SPEAKER_EMOTION*\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's emotion. In precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"<\" at the start and \">\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; in precisely one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions and make sure the SER output is labeled \"emotion_label\", please use a format similar to: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion, say it in exactly one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the emotion label in uppercase form ",
          "lower_case": "Express the speaker's emotion. Say it in exactly one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Express the speaker's emotion; say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"Speech emotion detected as: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Express the speaker's emotion and say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and have the result trail off with \"**Speaker_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's emotion; say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"$\" and \"$\" to surround the result entirely "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the result into json-structured data; when structuring the result, use \"emotion_label\" for the SER section. The correct json format includes: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion. Just use one word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Point out the speaker's emotion, just use one word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Point out the speaker's emotion, just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*emotional_tone*\" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Point out the speaker's emotion, just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"*EMOTION_OUTPUT*\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Point out the speaker's emotion; just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<s>\" and \"</s>\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; just use one word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary; the json attribute for SER is \"emotion\". Format your response exactly as: {\"emotion\": \"(perceived emotion)\"}. ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. Addressed in one word and the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format ",
          "lower_case": "Explain the speaker's feeling. Addressed in one word and the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "*emotional_state*",
              "inst": "Explain the speaker's feeling, addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*emotional_state*\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "<Predicted_Emotion>",
              "inst": "Explain the speaker's feeling; addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure the final part is \"<Predicted_Emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's feeling, addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and addressed in one word and the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Express the final output in proper json; represent SER in the json with the key \"SER\"; output a json string such as: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker, just use one word and only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters ",
          "lower_case": "Summarize the emotion of the speaker. just use one word and only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Summarize the emotion of the speaker. just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Final predicted emotion: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*MOOD*",
              "inst": "Summarize the emotion of the speaker; just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*MOOD*\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Summarize the emotion of the speaker and just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. Just use one word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object, use \"predicted_emotion\" as the designated key for SER and the json representation should be like: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "chosen in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. chosen in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker; chosen in one word. return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". reply with uppercase-only predicted emotion text: ",
          "lower_case": "Tell the emotion of the speaker and chosen in one word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Tell the emotion of the speaker; chosen in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"The classified sentiment is: \" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Tell the emotion of the speaker and chosen in one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and terminate the result using \"*Emotion_Result*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the emotion of the speaker. chosen in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"**\" before and \"**\" after. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and chosen in one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax, allocate the key \"predicted_emotion\" for the data derived from SER and use the following format in your response: {\"predicted_emotion\": \"(emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "in just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; in just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling and in just one word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters ",
          "lower_case": "Tell the speaker's feeling and in just one word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "*Emotion*",
              "inst": "Tell the speaker's feeling. In just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"*Emotion*\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Tell the speaker's feeling and in just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"{PERCEIVED_EMOTION}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's feeling; in just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and in just one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize the result in a json-style dictionary. Place the result of SER beneath the key \"emotion_label\", maintain the structure like so: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. Defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, defined in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the uppercase emotion result. ",
          "lower_case": "Identify the speaker's mood and defined in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters: ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Identify the speaker's mood. Defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"[EMOTION_RESULT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Identify the speaker's mood and defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"**Perceived_Emotion**\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's mood and defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"**\" to the beginning and \"**\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and defined in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object. Assign \"emotion_tag\" as the property key for SER related content, consider this sample format: {\"emotion_tag\": \"(emotional tone)\"}. ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling and explained in one word, the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure all emotion labels are uppercase. ",
          "lower_case": "State the speaker's feeling and explained in one word, the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "**Emotional_State**",
              "inst": "State the speaker's feeling; explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and initiated by \"**Emotional_State**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Voice_Emotion>",
              "inst": "State the speaker's feeling, explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have \"<Voice_Emotion>\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's feeling; explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"$\" and \"$\" to bracket the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and explained in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object. Ensure that SER is stored under the key \"emotion_output\" and keep your output consistent with: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker. Written in one word. select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text: ",
          "lower_case": "Express the emotion of the speaker, written in one word. Select only one: \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Express the emotion of the speaker. Written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefixed with \"[Voice_Emotion]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Express the emotion of the speaker, written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"**EMOTIONAL_STATE**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the emotion of the speaker, written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"$\" as the left boundary and \"$\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Written in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; for the SER entry, use \"emotion_output\" as its key, the output must match this structure: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and in only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood; in only one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters ",
          "lower_case": "Describe the speaker's mood. In only one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "Describe the speaker's mood. In only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"The mood derived from voice: \" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "<Voice_Emotion>",
              "inst": "Describe the speaker's mood and in only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and include \"<Voice_Emotion>\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the speaker's mood, in only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Frame the result with a leading \"<s>\" and trailing \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and in only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure the final output as a json object and assign the string \"emotion\" as the field name for SER; here's how a typical entry should look: {\"emotion\": \"(mood)\"} ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "summarize in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; summarize in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood. Summarize in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase ",
          "lower_case": "Explain the speaker's mood and summarize in one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Explain the speaker's mood. Summarize in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Determined mood from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Affect>",
              "inst": "Explain the speaker's mood, summarize in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"<Affect>\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the speaker's mood, summarize in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"(\" and \")\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and summarize in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format and link the key \"emotional_state\" directly to the SER data, use the following format in your response: {\"emotional_state\": \"(mood)\"}. ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling and say it in exactly one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters. ",
          "lower_case": "Summarize the speaker's feeling; say it in exactly one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "**Emotion_Tag**",
              "inst": "Summarize the speaker's feeling. say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Open it with \"**Emotion_Tag**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Summarize the speaker's feeling; say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and apply \"**emotional_tone**\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's feeling; say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result between the symbols \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. Say it in exactly one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce a response that adheres to json syntax. represent the result of SER using the key \"emotion_tag\". This is an appropriate format: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. Just use one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase. ",
          "lower_case": "Explain the speaker's feeling and just use one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "<Predicted_Emotion>",
              "inst": "Explain the speaker's feeling and just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with the top marked by \"<Predicted_Emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Explain the speaker's feeling; just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make sure it ends with \"*Emotional_Tone*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's feeling, just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"<start>\" before the result and \"<end>\" after it: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; just use one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the result into json-structured data, when structuring the result, use \"emotion_label\" for the SER section; the output should resemble: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling. Kept to one word, provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters: ",
          "lower_case": "Tell the speaker's feeling. Kept to one word, provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Tell the speaker's feeling. kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"Recognized sentiment label: \" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "[perceived_emotion]",
              "inst": "Tell the speaker's feeling; kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"[perceived_emotion]\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's feeling and kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; kept to one word, provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format and attach \"sentiment\" to the result of SER in the final output; the output must match this structure: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker and write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker and write in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters: ",
          "lower_case": "Identify the emotion of the speaker. Write in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "**PREDICTED_EMOTION**",
              "inst": "Identify the emotion of the speaker; write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"**PREDICTED_EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Identify the emotion of the speaker, write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"*EMOTIONAL_TONE*\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the emotion of the speaker, write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", embed the result between \"_\" and \"_\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, write in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards, use \"sentiment\" as the json label for SER and use the following format in your response: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker, just use one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase: ",
          "lower_case": "Explain the emotion of the speaker, just use one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Explain the emotion of the speaker; just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<emotion>\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Explain the emotion of the speaker. just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"*Feeling*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the emotion of the speaker; just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result inside the bounds of \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; just use one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting, use \"sentiment\" as the designated key for SER; for reference, your output might look like: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, captured in one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label ",
          "lower_case": "State the speaker's mood. captured in one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "State the speaker's mood; captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Predicted sentiment state: \" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "**MOOD**",
              "inst": "State the speaker's mood; captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And have \"**MOOD**\" conclude the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the speaker's mood. Captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"<BOS>\" and \"<EOS>\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and captured in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax, represent SER in the json with the key \"speaker_emotion\". When in doubt, refer to: {\"speaker_emotion\": \"(affect)\"}: ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling. Put in one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Explain the speaker's feeling; put in one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the speaker's feeling, put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"The speaker's emotion is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Explain the speaker's feeling. Put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"{SENTIMENT}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the speaker's feeling and put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"<wrap>\" and \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling; put in one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result. For the SER entry, use \"detected_emotion\" as its key and the correct json format includes: {\"detected_emotion\": \"(affect)\"}: ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker; simply in one word, pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce the emotion label with all letters in uppercase. ",
          "lower_case": "Express the emotion of the speaker. Simply in one word, pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Express the emotion of the speaker, simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix with \"Speech-derived emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Express the emotion of the speaker. simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*EMOTIONAL_TONE*\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the emotion of the speaker; simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"#\" before the result and \"#\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; simply in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object; make sure the SER output is labeled \"SER\"; the formatting guide is: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Say it in exactly one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase: ",
          "lower_case": "Specify the speaker's mood. say it in exactly one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "*emotion_tag*",
              "inst": "Specify the speaker's mood, say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepended with \"*emotion_tag*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_tone>",
              "inst": "Specify the speaker's mood and say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"<emotional_tone>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the speaker's mood. Say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, say it in exactly one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; structure your response as a valid json string, ensure that SER is stored under the key \"emotional_state\", format your response exactly as: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion, presented in one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase: ",
          "lower_case": "State the speaker's emotion and presented in one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "*Mood*",
              "inst": "State the speaker's emotion and presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"*Mood*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "State the speaker's emotion, presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"[MOOD]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's emotion and presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"\"\" and \"\"\" tags. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; presented in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format. ensure that SER is stored under the key \"sentiment\". the json representation should be like: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion. declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion; declared in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only: ",
          "lower_case": "Tell the speaker's emotion, declared in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters. ",
          "prefix": [
            {
              "prefix": "<emotion_label>",
              "inst": "Tell the speaker's emotion, declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"<emotion_label>\" leading: "
            }
          ],
          "suffix": [
            {
              "suffix": "*MOOD*",
              "inst": "Tell the speaker's emotion and declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*MOOD*\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's emotion and declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"#\" and \"#\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. declared in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards. For the SER entry, use \"speaker_emotion\" as its key. The result should be rendered in this format: {\"speaker_emotion\": \"(affect)\"}: ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion, summarize in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only: ",
          "lower_case": "State the speaker's emotion, summarize in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "*Emotion_Result*",
              "inst": "State the speaker's emotion. Summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Emotion_Result*\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "State the speaker's emotion. Summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"<Perceived_Emotion>\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's emotion, summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"<wrap>\" and \"</wrap>\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and summarize in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax. the SER result must be identified using the key \"emotional_state\"; format your response exactly as: {\"emotional_state\": \"(mood)\"}: ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling, concluded with one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER output as uppercase text only. ",
          "lower_case": "State the speaker's feeling and concluded with one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "State the speaker's feeling. Concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Emotion recognized from speech: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**Feeling**",
              "inst": "State the speaker's feeling; concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"**Feeling**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's feeling, concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"\"\" in the front and \"\"\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. Concluded with one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format. Format the SER data using \"SER\" as its key name and a correct formatting instance is: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion, articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion. Articulated in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion: ",
          "lower_case": "Describe the speaker's emotion; articulated in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Describe the speaker's emotion and articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Recognized emotional category: \" heading things up: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Describe the speaker's emotion. articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"<Perceived_Emotion>\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the speaker's emotion, articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"(\" and \")\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; articulated in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object. the SER value should be indexed by \"emotion_result\". The appropriate response template: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker and captured in one word; provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters. ",
          "lower_case": "Identify the emotion of the speaker, captured in one word; provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "**EMOTION_TAG**",
              "inst": "Identify the emotion of the speaker, captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"**EMOTION_TAG**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<MOOD>",
              "inst": "Identify the emotion of the speaker and captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"<MOOD>\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the emotion of the speaker and captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"'\" and \"'\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. Captured in one word; provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure; format the SER data using \"SER\" as its key name. consider this sample format: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro03/Ses05M_impro03_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "state it in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, state it in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood and state it in one word. output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters ",
          "lower_case": "Identify the speaker's mood; state it in one word. Output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "{affect}",
              "inst": "Identify the speaker's mood, state it in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"{affect}\" at the very top. "
            }
          ],
          "suffix": [
            {
              "suffix": "*feeling*",
              "inst": "Identify the speaker's mood. State it in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"*feeling*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's mood, state it in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"$\" on the left and \"$\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. State it in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object and ensure \"SER\" is used as the access key for SER; the correct json format includes: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "summarize in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and summarize in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion, summarize in one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase ",
          "lower_case": "Describe the speaker's emotion and summarize in one word. the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Describe the speaker's emotion. Summarize in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open it with \"Predicted emotional output: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Describe the speaker's emotion and summarize in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". suffixed with \"[AFFECT]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the speaker's emotion and summarize in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"{\" and trailing \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. summarize in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object, record SER using \"emotional_state\" as the key in the json structure. Please follow the template: {\"emotional_state\": \"(perceived emotion)\"}: ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; presented in one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters. ",
          "lower_case": "Express the speaker's emotion, presented in one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Express the speaker's emotion and presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"Predicted emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_State>",
              "inst": "Express the speaker's emotion; presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"<Emotional_State>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's emotion, presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"[\" at the beginning and \"]\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, presented in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Show the result using key-value pairs in json; use \"emotion\" as the designated key for SER. this is an appropriate format: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "chosen in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; chosen in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion; chosen in one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the detected result contains only uppercase characters. ",
          "lower_case": "Express the speaker's emotion. Chosen in one word. Chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase characters in the emotion result: ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Express the speaker's emotion, chosen in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepend \"[SPEAKER_EMOTION]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_TAG**",
              "inst": "Express the speaker's emotion and chosen in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"**EMOTION_TAG**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the speaker's emotion. Chosen in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; chosen in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions, attach \"predicted_emotion\" to the result of SER in the final output and please follow the template: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker and describe in one word, provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text. ",
          "lower_case": "Specify the emotion of the speaker and describe in one word, provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Specify the emotion of the speaker and describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Perceived emotional tone: \" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Specify the emotion of the speaker; describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"{Emotion_Result}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the emotion of the speaker, describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, describe in one word, provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object. When formatting, associate SER with \"emotion\"; output a json string such as: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. Only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion; only use one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". deliver the SER output entirely uppercase. ",
          "lower_case": "Explain the speaker's emotion and only use one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Explain the speaker's emotion and only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"Speech-derived emotion: \" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Explain the speaker's emotion; only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"{feeling}\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Explain the speaker's emotion; only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"*\" and \"*\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure the final output as a json object, the json representation of SER must be keyed as \"emotion\"; for reference, your output might look like: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker. Summed in one word and choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only ",
          "lower_case": "Describe the emotion of the speaker; summed in one word and choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "**PREDICTED_EMOTION**",
              "inst": "Describe the emotion of the speaker, summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**PREDICTED_EMOTION**\" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Describe the emotion of the speaker; summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"**Emotion_Output**\" to finish the sequence: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the emotion of the speaker and summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"<\" as the left boundary and \">\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, summed in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object; the label \"emotion_tag\" must correspond to the SER section and the output should resemble: {\"emotion_tag\": \"(perceived emotion)\"}. ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood and mention in one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", only output the emotion in uppercase format ",
          "lower_case": "Tell the speaker's mood, mention in one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "[emotional_tone]",
              "inst": "Tell the speaker's mood, mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; by preceding all with \"[emotional_tone]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Tell the speaker's mood. Mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"[emotion_result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's mood and mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"\"\" and \"\"\" to surround the result entirely "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; mention in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards, link the key \"predicted_emotion\" directly to the SER data; use the following format in your response: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "in a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. In a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and in a single word, the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase: ",
          "lower_case": "State the speaker's emotion, in a single word, the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\". reply with the emotion using lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "State the speaker's emotion and in a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"Emotion recognized from speech: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "State the speaker's emotion; in a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"**Sentiment**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's emotion and in a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, in a single word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure, structure your json so that SER is labeled as \"emotion\" and the output must match this structure: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling and written in one word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters ",
          "lower_case": "Express the speaker's feeling and written in one word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Express the speaker's feeling and written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Speech emotion detected as: \" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Express the speaker's feeling; written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"<predicted_emotion>\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's feeling, written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"<\" and \">\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and written in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the output in a structured json layout; link the key \"emotion_output\" directly to the SER data, maintain the structure like so: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling; summarize in one word; choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only: ",
          "lower_case": "Tell the speaker's feeling; summarize in one word; choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "[EMOTION]",
              "inst": "Tell the speaker's feeling. summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[EMOTION]\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Tell the speaker's feeling, summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"{Mood}\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Tell the speaker's feeling. Summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Tag the result with opening \"[\" and closing \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; summarize in one word; choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object. allocate the key \"sentiment\" for the data derived from SER and the expected structure looks like this: {\"sentiment\": \"(feeling)\"}. ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion. In only one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result: ",
          "lower_case": "Specify the speaker's emotion; in only one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "Specify the speaker's emotion; in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", START WITH \"[sentiment]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Specify the speaker's emotion, in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"[VOICE_EMOTION]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's emotion; in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion and in only one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object, ensure that SER is stored under the key \"detected_emotion\"; please follow the template: {\"detected_emotion\": \"(feeling)\"}. ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling. Concluded with one word and answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only. ",
          "lower_case": "Point out the speaker's feeling and concluded with one word and answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Point out the speaker's feeling, concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open by adding \"{feeling}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "Point out the speaker's feeling. Concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"*speaker_emotion*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's feeling. Concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"**\" and \"**\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, concluded with one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object. ensure \"emotion\" is used as the access key for SER and keep your output consistent with: {\"emotion\": \"(perceived emotion)\"}. ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. in precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, in precisely one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Describe the speaker's mood. In precisely one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Describe the speaker's mood; in precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Predicted affect category: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_output>",
              "inst": "Describe the speaker's mood; in precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<emotion_output>\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's mood; in precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. In precisely one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation and use \"predicted_emotion\" as the json label for SER, consider this sample format: {\"predicted_emotion\": \"(feeling)\"}. ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "presented in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, presented in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling; presented in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the detected result contains only uppercase characters ",
          "lower_case": "Point out the speaker's feeling; presented in one word. pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Point out the speaker's feeling and presented in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Predicted affect category: \" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "*FEELING*",
              "inst": "Point out the speaker's feeling; presented in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish everything with a \"*FEELING*\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling. Presented in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result between the symbols \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; presented in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format. Ensure that SER is stored under the key \"speaker_emotion\"; follow this example to structure the data: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling and summed in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only: ",
          "lower_case": "Summarize the speaker's feeling. Summed in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Summarize the speaker's feeling, summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion result from audio: \" at the very beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "Summarize the speaker's feeling and summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"<perceived_emotion>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's feeling. Summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<BOS>\" at the beginning and \"<EOS>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling and summed in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". structure your response as a valid json string, SER should appear under the json key \"emotion_output\", keep your output consistent with: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "respond in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; respond in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion. Respond in one word. Output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result. ",
          "lower_case": "Identify the speaker's emotion; respond in one word. Output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Identify the speaker's emotion and respond in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"[EMOTION_RESULT]\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Identify the speaker's emotion and respond in one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"<predicted_emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's emotion; respond in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"<wrap>\" as prefix and \"</wrap>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; respond in one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object, the key \"emotional_state\" maps to the result of SER; this is an appropriate format: {\"emotional_state\": \"(mood)\"}. ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood and call it in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters. ",
          "lower_case": "Identify the speaker's mood. Call it in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "Identify the speaker's mood; call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[emotion_label]\" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_state**",
              "inst": "Identify the speaker's mood; call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"**emotional_state**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's mood and call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, call it in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting. for the SER entry, use \"emotion_output\" as its key; a compliant example would appear like: {\"emotion_output\": \"(mood)\"}: ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling and simply in one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text ",
          "lower_case": "Tell the speaker's feeling; simply in one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Tell the speaker's feeling and simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"Predicted sentiment state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*feeling*",
              "inst": "Tell the speaker's feeling; simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"*feeling*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Tell the speaker's feeling, simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"<\" and trailing \">\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, simply in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the response using json syntax; assign the string \"emotion\" as the field name for SER and please follow the template: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker; conveyed in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase. ",
          "lower_case": "Explain the emotion of the speaker, conveyed in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Only output the emotion label in lowercase format: ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the emotion of the speaker, conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"The speaker's emotion is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[mood]",
              "inst": "Explain the emotion of the speaker. Conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"[mood]\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the emotion of the speaker. conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"{\" and append \"}\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result into json style; record SER using \"emotion_tag\" as the key in the json structure; the result should be rendered in this format: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker, reply in one word and choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only: ",
          "lower_case": "Express the emotion of the speaker and reply in one word and choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "[Affect]",
              "inst": "Express the emotion of the speaker and reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[Affect]\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "<Perceived_Emotion>",
              "inst": "Express the emotion of the speaker; reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"<Perceived_Emotion>\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the emotion of the speaker. Reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". keep the result enclosed within \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; reply in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", express the final output in proper json. Label the output of SER using the key \"SER\" and an illustration of the format would be: {\"SER\": \"(mood)\"}. ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion, concluded with one word, pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the emotion label in uppercase form. ",
          "lower_case": "Tell the speaker's emotion and concluded with one word, pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Tell the speaker's emotion; concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"Speech tone analysis result: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Tell the speaker's emotion, concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and terminate the result using \"**emotional_tone**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's emotion and concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"<text>\" and append \"</text>\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and concluded with one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format; assign the string \"emotion_result\" as the field name for SER, for reference, your output might look like: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Describe in one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return uppercase-only emotion recognition output: ",
          "lower_case": "Specify the speaker's mood; describe in one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "**EMOTION_RESULT**",
              "inst": "Specify the speaker's mood, describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"**EMOTION_RESULT**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Specify the speaker's mood. Describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"[SENTIMENT]\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's mood and describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"***\" and closing \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; describe in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting, SER must be stored in the json under the key \"SER\". for example: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "explained in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and explained in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood, explained in one word. only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion result only in uppercase characters. ",
          "lower_case": "Tell the speaker's mood. Explained in one word. Only choose among \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Tell the speaker's mood, explained in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"Identified emotion category: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Tell the speaker's mood. Explained in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"{Feeling}\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's mood and explained in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"<text>\" as prefix and \"</text>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; explained in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation. Assign the string \"sentiment\" as the field name for SER, your final output should take the form: {\"sentiment\": \"(feeling)\"}. ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "state in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; state in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, state in one word; select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return just the emotion label with no lowercase letters. ",
          "lower_case": "Explain the emotion of the speaker, state in one word; select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Explain the emotion of the speaker, state in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed with \"**Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Explain the emotion of the speaker; state in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and attach \"{affect}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the emotion of the speaker, state in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"<s>\" on the left and \"</s>\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. State in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the response using json syntax, the json attribute for SER is \"emotion_output\"; an illustration of the format would be: {\"emotion_output\": \"(affect)\"} ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion; addressed in one word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only. ",
          "lower_case": "Identify the speaker's emotion. Addressed in one word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Identify the speaker's emotion and addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[SPEAKER_EMOTION]\" leading: "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Identify the speaker's emotion; addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and put \"**predicted_emotion**\" at the closing point "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Identify the speaker's emotion. addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bind the result using \"[\" and \"]\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and addressed in one word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert the result into a json-compatible structure, format the SER data using \"emotion_result\" as its key name, you are expected to return: {\"emotion_result\": \"(feeling)\"}: ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "concluded with one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and concluded with one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood; concluded with one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Format the emotion label so that all text is uppercase. ",
          "lower_case": "Identify the speaker's mood; concluded with one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "Identify the speaker's mood; concluded with one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix with \"[sentiment]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "Identify the speaker's mood. Concluded with one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and apply \"<SENTIMENT>\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's mood. concluded with one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, concluded with one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format; format the SER data using \"detected_emotion\" as its key name. the output must match this structure: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F028.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling. Summed in one word. the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and format the emotion label so that all text is uppercase ",
          "lower_case": "Identify the speaker's feeling, summed in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Identify the speaker's feeling and summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"Perceived speaker mood: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**perceived_emotion**",
              "inst": "Identify the speaker's feeling, summed in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**perceived_emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the speaker's feeling and summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"<start>\" and \"<end>\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, summed in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format; record SER using \"emotion_output\" as the key in the json structure and consider this sample format: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F029.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling and kept to one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text. ",
          "lower_case": "Summarize the speaker's feeling and kept to one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Summarize the speaker's feeling. kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin the output using \"The emotional tone detected: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Summarize the speaker's feeling and kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"{MOOD}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's feeling. Kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"#\" and \"#\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling. Kept to one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; give the result back in proper json notation, the SER value should be indexed by \"emotion_tag\", you can format it as follows: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "summed up in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and summed up in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion, summed up in one word. The response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters: ",
          "lower_case": "Identify the speaker's emotion. summed up in one word. The response must be \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Identify the speaker's emotion. summed up in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The classified emotion label: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Mood*",
              "inst": "Identify the speaker's emotion, summed up in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"*Mood*\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion. summed up in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"_\" as prefix and \"_\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and summed up in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Give the result back in proper json notation and label the output of SER using the key \"emotional_state\" and the expected structure looks like this: {\"emotional_state\": \"(perceived emotion)\"}: ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F031.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker and mention in one word, only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Summarize the emotion of the speaker and mention in one word, only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Summarize the emotion of the speaker; mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The emotional tone detected: \" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "{AFFECT}",
              "inst": "Summarize the emotion of the speaker, mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and ensure the final part is \"{AFFECT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the emotion of the speaker, mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"<\" and \">\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and mention in one word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the answer using json code structure; make sure the SER output is labeled \"emotional_state\"; output a json string such as: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F032.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings, with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings, with one single word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Describe the speaker's feelings and with one single word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". Give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "*Voice_Emotion*",
              "inst": "Describe the speaker's feelings, with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"*Voice_Emotion*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "Describe the speaker's feelings; with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"**SENTIMENT**\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's feelings. with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and with one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the data inside a properly formed json; record SER using \"emotion_output\" as the key in the json structure, for example: {\"emotion_output\": \"(mood)\"}: ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F034.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "summarized in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; summarized in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood. Summarized in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase emotion output: ",
          "lower_case": "Describe the speaker's mood, summarized in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Describe the speaker's mood; summarized in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Open it with \"Identified emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Describe the speaker's mood. Summarized in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"<Speaker_Emotion>\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's mood and summarized in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the output between \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, summarized in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object; SER should appear under the json key \"emotion_result\", when in doubt, refer to: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F035.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion and written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion; written in one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". respond with the recognized emotion written in uppercase only ",
          "lower_case": "Describe the speaker's emotion. Written in one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "Describe the speaker's emotion. Written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"*emotion_result*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Describe the speaker's emotion; written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"*EMOTION_OUTPUT*\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's emotion, written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the result between \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. Written in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure the final output as a json object, the json representation of SER must be keyed as \"speaker_emotion\" and to illustrate, use: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F036.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "defined in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; defined in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood. Defined in one word. pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion ",
          "lower_case": "Point out the speaker's mood; defined in one word. Pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "<EMOTION_TAG>",
              "inst": "Point out the speaker's mood, defined in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"<EMOTION_TAG>\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "Point out the speaker's mood. Defined in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"{emotion_result}\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Point out the speaker's mood; defined in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; defined in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert the result into a json-compatible structure; use \"emotion_output\" as the json label for SER; use the following format in your response: {\"emotion_output\": \"(mood)\"}: ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_F037.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "rendered in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood, rendered in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, rendered in one word. Select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters ",
          "lower_case": "Explain the speaker's mood. Rendered in one word. Select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Explain the speaker's mood and rendered in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"Predicted emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Explain the speaker's mood; rendered in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*emotion_label*\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the speaker's mood; rendered in one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Rendered in one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object and the label \"emotional_state\" must correspond to the SER section; the desired structure is as shown: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion, written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion. Written in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Describe the speaker's emotion and written in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Describe the speaker's emotion; written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". beginning with \"Speech tone analysis result: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Describe the speaker's emotion; written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"<predicted_emotion>\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's emotion. written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"[\" before and \"]\" after "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. Written in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format; the json attribute for SER is \"emotion_output\". The expected structure looks like this: {\"emotion_output\": \"(emotional tone)\"}. ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "in just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, in just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker. In just one word and return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion result only in uppercase characters ",
          "lower_case": "State the emotion of the speaker, in just one word and return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "State the emotion of the speaker, in just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "State the emotion of the speaker; in just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"[MOOD]\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the emotion of the speaker. In just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". frame the result with a leading \"<wrap>\" and trailing \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, in just one word and return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output using a clean and valid json layout. When structuring the result, use \"sentiment\" for the SER section, here's how a typical entry should look: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "in only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; in only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood, in only one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase: ",
          "lower_case": "Tell the speaker's mood; in only one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Tell the speaker's mood and in only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Classification result (emotion): \" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_State]",
              "inst": "Tell the speaker's mood, in only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"[Emotional_State]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's mood; in only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"<wrap>\" and \"</wrap>\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. In only one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json; structure your json so that SER is labeled as \"SER\" and a correctly structured entry is: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M019.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and restricted to one word and select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and respond with the recognized emotion written in uppercase only. ",
          "lower_case": "Express the speaker's mood, restricted to one word and select one of \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "[Speaker_Emotion]",
              "inst": "Express the speaker's mood. restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with a lead-in of \"[Speaker_Emotion]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION>",
              "inst": "Express the speaker's mood and restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"<EMOTION>\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's mood, restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"~\" in front and \"~\" behind. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, restricted to one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure. SER must be stored in the json under the key \"emotion_output\", your result should mirror this: {\"emotion_output\": \"(emotion)\"}. ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood. put in one word and choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters ",
          "lower_case": "Summarize the speaker's mood; put in one word and choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "[emotion_output]",
              "inst": "Summarize the speaker's mood; put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"[emotion_output]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Summarize the speaker's mood. Put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"<emotion_tag>\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's mood and put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". use \"[\" and \"]\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; put in one word and choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your answer following json standards. Place the result of SER beneath the key \"detected_emotion\". a compliant example would appear like: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. Kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood; kept to one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only: ",
          "lower_case": "Express the speaker's mood. Kept to one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\". deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Express the speaker's mood. Kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". By preceding all with \"Speaker's affective state: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Express the speaker's mood, kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"*EMOTIONAL_STATE*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's mood and kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"<s>\" in the front and \"</s>\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; kept to one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the structured data as a json-formatted string and format the SER data using \"speaker_emotion\" as its key name; keep your output consistent with: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro04/Ses05M_impro04_M041.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. Summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion and summed in one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the detected emotion entirely in uppercase ",
          "lower_case": "Describe the speaker's emotion, summed in one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "{PREDICTED_EMOTION}",
              "inst": "Describe the speaker's emotion; summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin it with \"{PREDICTED_EMOTION}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "Describe the speaker's emotion; summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**Affect**\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's emotion. Summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"\"\" and \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. summed in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output using a clean and valid json layout, the SER result must be identified using the key \"sentiment\", the desired structure is as shown: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling. Put in one word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the SER output entirely uppercase ",
          "lower_case": "State the speaker's feeling and put in one word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "**Emotional_State**",
              "inst": "State the speaker's feeling; put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"**Emotional_State**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_RESULT]",
              "inst": "State the speaker's feeling; put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"[EMOTION_RESULT]\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's feeling; put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"(\" before the result and \")\" after it "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, put in one word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style. Label the output of SER using the key \"emotion_label\" and here's how a typical entry should look: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood; limited to one word and output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters ",
          "lower_case": "Explain the speaker's mood and limited to one word and output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "[Perceived_Emotion]",
              "inst": "Explain the speaker's mood and limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[Perceived_Emotion]\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Explain the speaker's mood and limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"**emotional_tone**\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's mood, limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put \"_\" and \"_\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Limited to one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert the result into a json-compatible structure, when formatting, associate SER with \"sentiment\". To illustrate, use: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling. call it in one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Express the speaker's feeling. Call it in one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Express the speaker's feeling and call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"**Emotion**\" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Express the speaker's feeling and call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and keep \"[Emotion]\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling and call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"#\" and \"#\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and call it in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object and the SER value should be indexed by \"speaker_emotion\", one possible output form: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood; respond in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Point out the speaker's mood and respond in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Point out the speaker's mood, respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"Identified emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Voice_Emotion*",
              "inst": "Point out the speaker's mood, respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"*Voice_Emotion*\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Point out the speaker's mood; respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<\" at the beginning and \">\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; respond in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return it structured as a json object, for the SER entry, use \"speaker_emotion\" as its key. Output a json string such as: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling; summed up in one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the recognized emotion into uppercase text ",
          "lower_case": "Identify the speaker's feeling. summed up in one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "<Emotional_State>",
              "inst": "Identify the speaker's feeling, summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and introduced by \"<Emotional_State>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_OUTPUT>",
              "inst": "Identify the speaker's feeling and summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And suffix the output with \"<EMOTION_OUTPUT>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's feeling, summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, summed up in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your answer following json standards and use \"SER\" as the json label for SER; keep your output consistent with: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, concluded with one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters: ",
          "lower_case": "State the speaker's mood, concluded with one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "{Emotion_Label}",
              "inst": "State the speaker's mood. Concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Fronted by \"{Emotion_Label}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Mood>",
              "inst": "State the speaker's mood; concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"<Mood>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's mood; concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"$\" as prefix and \"$\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; concluded with one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data and label the output of SER using the key \"sentiment\"; to illustrate, use: {\"sentiment\": \"(emotion)\"}. ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "summed in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; summed in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood, summed in one word. Choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce the emotion label with all letters in uppercase: ",
          "lower_case": "Specify the speaker's mood and summed in one word. Choose between \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "**SPEAKER_EMOTION**",
              "inst": "Specify the speaker's mood; summed in one word. choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"**SPEAKER_EMOTION**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Specify the speaker's mood. Summed in one word. choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finalize it by adding \"[Feeling]\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the speaker's mood; summed in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"'\" to the beginning and \"'\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. Summed in one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure and assign \"emotion_tag\" as the property key for SER related content and follow this example to structure the data: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and only use one word and the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give only the predicted emotion using uppercase letters: ",
          "lower_case": "Describe the emotion of the speaker; only use one word and the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\"; return the detected emotional state in all lowercase letters ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Describe the emotion of the speaker, only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Speech-derived emotion: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "[PERCEIVED_EMOTION]",
              "inst": "Describe the emotion of the speaker; only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end of the result with \"[PERCEIVED_EMOTION]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the emotion of the speaker, only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<wrap>\" before and \"</wrap>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and only use one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string, the label \"predicted_emotion\" must correspond to the SER section. For example: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling, written in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure all emotion labels are uppercase. ",
          "lower_case": "Point out the speaker's feeling; written in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Point out the speaker's feeling. Written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"{emotion_tag}\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "{PREDICTED_EMOTION}",
              "inst": "Point out the speaker's feeling and written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{PREDICTED_EMOTION}\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Point out the speaker's feeling and written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"#\" and \"#\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; written in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your result exactly as a json object; attach \"predicted_emotion\" to the result of SER in the final output; keep your output consistent with: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "revealed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; revealed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood and revealed in one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase emotion output: ",
          "lower_case": "State the speaker's mood, revealed in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "[SENTIMENT]",
              "inst": "State the speaker's mood, revealed in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"[SENTIMENT]\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Predicted_Emotion}",
              "inst": "State the speaker's mood; revealed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and write \"{Predicted_Emotion}\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's mood and revealed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. revealed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style; the designated key for SER should remain \"emotion_result\", consider this sample format: {\"emotion_result\": \"(affect)\"} ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "answer in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker and answer in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the emotion of the speaker and answer in one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion result only in uppercase characters. ",
          "lower_case": "Specify the emotion of the speaker, answer in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the emotion label is all lowercase characters. ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Specify the emotion of the speaker, answer in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Speech emotion detected as: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_state>",
              "inst": "Specify the emotion of the speaker, answer in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and use \"<emotional_state>\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the emotion of the speaker, answer in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Answer in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format, make sure the SER output is labeled \"emotion_tag\", to illustrate, use: {\"emotion_tag\": \"(perceived emotion)\"}. ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling. presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling and presented in one word and choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format ",
          "lower_case": "Explain the speaker's feeling and presented in one word and choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "[Perceived_Emotion]",
              "inst": "Explain the speaker's feeling; presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"[Perceived_Emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "Explain the speaker's feeling and presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"[Sentiment]\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's feeling. Presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"{\" before and \"}\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, presented in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure. Format the SER data using \"emotion_output\" as its key name; format your response exactly as: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood. Simply in one word, chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Describe the speaker's mood. Simply in one word, chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Describe the speaker's mood; simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"Emotion result from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Describe the speaker's mood. Simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"*Emotional_Tone*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the speaker's mood, simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"~\" and \"~\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; simply in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting, please tag the SER information with the key \"emotion_output\", format your response exactly as: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "state it in one word. must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker and state it in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker, state it in one word. must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase ",
          "lower_case": "Express the emotion of the speaker. state it in one word. Must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "**Speaker_Emotion**",
              "inst": "Express the emotion of the speaker; state it in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". preceded by \"**Speaker_Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Express the emotion of the speaker and state it in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"*emotion_label*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the emotion of the speaker. State it in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; state it in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize your output cleanly in json format, the SER information must be placed under \"emotion_output\" and the json result must follow this form: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "in one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and in one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; in one single word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce only uppercase text from the SER result ",
          "lower_case": "State the speaker's mood; in one single word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "State the speaker's mood. in one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"Identified emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*SENTIMENT*",
              "inst": "State the speaker's mood. In one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"*SENTIMENT*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's mood. In one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the output between \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and in one single word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style and place the result of SER beneath the key \"SER\", the output should resemble: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in one single word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, in one single word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood and in one single word. return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result: ",
          "lower_case": "Point out the speaker's mood, in one single word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text: ",
          "prefix": [
            {
              "prefix": "**emotional_tone**",
              "inst": "Point out the speaker's mood and in one single word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"**emotional_tone**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION*",
              "inst": "Point out the speaker's mood, in one single word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"*EMOTION*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's mood and in one single word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". insert the result inside the brackets \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, in one single word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json; SER must be stored in the json under the key \"emotion_result\" and use the following format in your response: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "only use one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, only use one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion. Only use one word. the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output ",
          "lower_case": "State the speaker's emotion, only use one word. the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "State the speaker's emotion and only use one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"*Emotion_Tag*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "State the speaker's emotion; only use one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"{Emotional_State}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "State the speaker's emotion, only use one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. only use one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation, ensure \"detected_emotion\" is used as the access key for SER; you are expected to return: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion; concluded with one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result ",
          "lower_case": "Identify the speaker's emotion and concluded with one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Identify the speaker's emotion. concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"Detected emotion output: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_Tone]",
              "inst": "Identify the speaker's emotion; concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"[Emotional_Tone]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Identify the speaker's emotion; concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"~\" and \"~\" tags "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object. ensure \"emotion_label\" is used as the access key for SER. You can format it as follows: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. Chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood, chosen in one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show the detected emotion fully in uppercase characters. ",
          "lower_case": "Express the speaker's mood; chosen in one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_STATE**",
              "inst": "Express the speaker's mood; chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**EMOTIONAL_STATE**\" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "{VOICE_EMOTION}",
              "inst": "Express the speaker's mood. Chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"{VOICE_EMOTION}\" after the result body. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's mood and chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". bracket the result inside \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, chosen in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result, the designated key for SER should remain \"predicted_emotion\"; the appropriate response template: {\"predicted_emotion\": \"(affect)\"} ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, written in one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters: ",
          "lower_case": "Identify the speaker's mood. Written in one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Identify the speaker's mood. Written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"Emotion result from audio: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Identify the speaker's mood, written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"*emotional_tone*\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's mood. written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". set \"**\" and \"**\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. Written in one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object and structure your json so that SER is labeled as \"sentiment\" and the expected structure looks like this: {\"sentiment\": \"(perceived emotion)\"}: ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. Declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and declared in one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase: ",
          "lower_case": "Point out the speaker's feeling, declared in one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "*speaker_emotion*",
              "inst": "Point out the speaker's feeling; declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*speaker_emotion*\" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Point out the speaker's feeling. declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"<Emotional_Tone>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Point out the speaker's feeling and declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Declared in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container and label the output of SER using the key \"SER\"; your final output should take the form: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_F021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "chosen in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Chosen in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood and chosen in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase. ",
          "lower_case": "Explain the speaker's mood; chosen in one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Explain the speaker's mood, chosen in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Determined mood from audio: \" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Explain the speaker's mood. chosen in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"[emotion_output]\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the speaker's mood and chosen in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<start>\" and append \"<end>\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. chosen in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object, bind the task SER to the key \"sentiment\" and output a json string such as: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. Summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood; summarize in one word; pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result. ",
          "lower_case": "Summarize the speaker's mood; summarize in one word; pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "**sentiment**",
              "inst": "Summarize the speaker's mood, summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**sentiment**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Summarize the speaker's mood, summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"{Speaker_Emotion}\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Summarize the speaker's mood. summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"'\" and \"'\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, summarize in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string. The json attribute for SER is \"detected_emotion\". this is an appropriate format: {\"detected_emotion\": \"(mood)\"} ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "in only one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; in only one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion and in only one word. Select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER output as uppercase text only: ",
          "lower_case": "Summarize the speaker's emotion and in only one word. Select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "*Emotion*",
              "inst": "Summarize the speaker's emotion; in only one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Emotion*\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Summarize the speaker's emotion. In only one word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"*Emotional_Tone*\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the speaker's emotion. In only one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. In only one word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json. the json attribute for SER is \"emotion_label\", follow this example to structure the data: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "conveyed in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and conveyed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling; conveyed in one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words. ",
          "lower_case": "Express the speaker's feeling; conveyed in one word. output must be \"happy\", \"sad\", \"angry\" or \"neutral\". Return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "{Feeling}",
              "inst": "Express the speaker's feeling and conveyed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefixed with \"{Feeling}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "Express the speaker's feeling; conveyed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**Sentiment**\" is the last string "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's feeling. Conveyed in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. conveyed in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object and the designated key for SER should remain \"sentiment\", the output must match this structure: {\"sentiment\": \"(affect)\"}: ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood. revealed in one word and return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Specify the speaker's mood, revealed in one word and return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Specify the speaker's mood. revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Classification result (emotion): \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Specify the speaker's mood and revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"*EMOTION_OUTPUT*\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood, revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"{\" as prefix and \"}\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. revealed in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; format the SER data using \"sentiment\" as its key name; a compliant example would appear like: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker; elaborated in one word; restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase: ",
          "lower_case": "Tell the emotion of the speaker; elaborated in one word; restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Tell the emotion of the speaker; elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"Recognized emotional category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Tell the emotion of the speaker, elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"**emotional_tone**\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the emotion of the speaker, elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, elaborated in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make the output conform to json formatting. Use \"sentiment\" as the designated key for SER; your final output should take the form: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings, captured in one word and choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and present the SER label in uppercase letters only: ",
          "lower_case": "Describe the speaker's feelings and captured in one word and choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Describe the speaker's feelings. Captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin the output using \"<emotion>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Speaker_Emotion]",
              "inst": "Describe the speaker's feelings and captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"[Speaker_Emotion]\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the speaker's feelings; captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". tag the result with opening \"<wrap>\" and closing \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. Captured in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json. Allocate the key \"SER\" for the data derived from SER. A demonstration of the expected format: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and state in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion, state in one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Specify the speaker's emotion. state in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "<Sentiment>",
              "inst": "Specify the speaker's emotion; state in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and commence with \"<Sentiment>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_Tone}",
              "inst": "Specify the speaker's emotion. State in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"{Emotional_Tone}\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the speaker's emotion, state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". guard the result with \"_\" on the left and \"_\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion and state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax; link the key \"emotion_label\" directly to the SER data; your result should mirror this: {\"emotion_label\": \"(mood)\"}: ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling and expressed in one word; the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase: ",
          "lower_case": "Specify the speaker's feeling, expressed in one word; the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "{SPEAKER_EMOTION}",
              "inst": "Specify the speaker's feeling. Expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{SPEAKER_EMOTION}\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Specify the speaker's feeling. Expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"[Affect]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the speaker's feeling and expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"<text>\" and \"</text>\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. expressed in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format, the json attribute for SER is \"speaker_emotion\" and output a json string such as: {\"speaker_emotion\": \"(perceived emotion)\"} ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker; state in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present the SER label in uppercase letters only. ",
          "lower_case": "Explain the emotion of the speaker; state in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Explain the emotion of the speaker and state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*Speaker_Emotion*\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "Explain the emotion of the speaker and state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"**EMOTION_RESULT**\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the emotion of the speaker; state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"\"\" before the result and \"\"\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, state in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions and \"emotion_tag\" should be the identifier for the SER content. for example: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, using only one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present the SER label in uppercase letters only. ",
          "lower_case": "State the speaker's mood and using only one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "State the speaker's mood. Using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"Emotion category identified: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "State the speaker's mood, using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow the content with \"**emotion_tag**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's mood. Using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, using only one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object; bind the task SER to the key \"emotional_state\" and for example: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro05/Ses05M_impro05_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling, describe in one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters. ",
          "lower_case": "Identify the speaker's feeling. Describe in one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "<emotional_state>",
              "inst": "Identify the speaker's feeling; describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<emotional_state>\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Identify the speaker's feeling; describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And keep \"*SPEAKER_EMOTION*\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's feeling; describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"\"\" and \"\"\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; describe in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting. SER should appear under the json key \"emotion_label\"; follow this example to structure the data: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "elaborated in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Elaborated in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; elaborated in one word. choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make the emotion recognition result all uppercase. ",
          "lower_case": "Specify the speaker's mood; elaborated in one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "*voice_emotion*",
              "inst": "Specify the speaker's mood. Elaborated in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and at the start, put \"*voice_emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{mood}",
              "inst": "Specify the speaker's mood, elaborated in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"{mood}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the speaker's mood. elaborated in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<text>\" before and \"</text>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; elaborated in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax; the key \"emotion_label\" maps to the result of SER and the appropriate response template: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and in exactly one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". output the emotion label fully uppercase: ",
          "lower_case": "Express the speaker's mood, in exactly one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "*MOOD*",
              "inst": "Express the speaker's mood; in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"*MOOD*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*PERCEIVED_EMOTION*",
              "inst": "Express the speaker's mood and in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"*PERCEIVED_EMOTION*\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's mood. In exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"~\" before and \"~\" after: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. in exactly one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and attach \"emotion_label\" to the result of SER in the final output. For reference, your output might look like: {\"emotion_label\": \"(affect)\"}: ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker. Defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker; defined in one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only ",
          "lower_case": "Explain the emotion of the speaker, defined in one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\". return the SER output as lowercase text only: ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Explain the emotion of the speaker and defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin with \"Predicted affect category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Explain the emotion of the speaker and defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"*Feeling*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the emotion of the speaker; defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and defined in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json, please assign the key \"emotion_tag\" to the SER field and a correctly structured entry is: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion and state in one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase. ",
          "lower_case": "State the speaker's emotion and state in one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "<Mood>",
              "inst": "State the speaker's emotion and state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin with \"<Mood>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "State the speaker's emotion; state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"**Emotional_State**\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's emotion, state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result so it is enclosed in \"<s>\" and \"</s>\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and state in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container; record SER using \"emotional_state\" as the key in the json structure and here is a sample representation: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling. Clarified in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters ",
          "lower_case": "Express the speaker's feeling; clarified in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "{emotion}",
              "inst": "Express the speaker's feeling; clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{emotion}\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Express the speaker's feeling. clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{emotion_label}\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the speaker's feeling; clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. clarified in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result. SER must be stored in the json under the key \"predicted_emotion\", for reference, your output might look like: {\"predicted_emotion\": \"(perceived emotion)\"} ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "answer in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; answer in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood; answer in one word. output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters: ",
          "lower_case": "Explain the speaker's mood. Answer in one word. Output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Explain the speaker's mood and answer in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"Emotion category identified: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Explain the speaker's mood; answer in one word. output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"{Mood}\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the speaker's mood and answer in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"{\" at the beginning and \"}\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Answer in one word. Output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", generate a json-formatted version of the result and the output variable for SER is expected to be labeled \"emotional_state\"; when in doubt, refer to: {\"emotional_state\": \"(mood)\"}. ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker. Summed in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Identify the emotion of the speaker. summed in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\". deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "*Voice_Emotion*",
              "inst": "Identify the emotion of the speaker. Summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". kicking off with \"*Voice_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[SENTIMENT]",
              "inst": "Identify the emotion of the speaker and summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"[SENTIMENT]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the emotion of the speaker, summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"**\" in front and \"**\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. summed in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format and ensure that SER is stored under the key \"sentiment\" and the correct json format includes: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker. in just one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Specify the emotion of the speaker, in just one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text: ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Specify the emotion of the speaker and in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", fronted by \"Recognized voice emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**SPEAKER_EMOTION**",
              "inst": "Specify the emotion of the speaker and in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"**SPEAKER_EMOTION**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the emotion of the speaker and in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, in just one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string; use \"emotion_result\" as the designated key for SER. please follow the template: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_F010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker; summed in one word; the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with uppercase-only predicted emotion text. ",
          "lower_case": "Describe the emotion of the speaker and summed in one word; the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Describe the emotion of the speaker and summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Detected speech feeling: \" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Describe the emotion of the speaker and summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"*emotion_label*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the emotion of the speaker, summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. summed in one word; the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; serialize the result into json form and represent the result of SER using the key \"emotion_output\"; keep your output consistent with: {\"emotion_output\": \"(feeling)\"}. ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "with a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, with a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker, with a single word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and detect the emotion and format all letters as uppercase ",
          "lower_case": "Tell the emotion of the speaker and with a single word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Tell the emotion of the speaker. with a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Predicted speaker emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "Tell the emotion of the speaker, with a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"**emotion_tag**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the emotion of the speaker; with a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"*\" and \"*\" as the enclosing symbols. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. With a single word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules and the SER value should be indexed by \"emotion_label\", the json representation should be like: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion, articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion. articulated in one word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER output as uppercase text only ",
          "lower_case": "Point out the speaker's emotion; articulated in one word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\" and respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "[mood]",
              "inst": "Point out the speaker's emotion, articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[mood]\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Point out the speaker's emotion and articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"<emotion_tag>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's emotion; articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"**\" before and \"**\" after: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. Articulated in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is formatted as valid json. Include the SER output under the key \"emotion_output\", the formatting guide is: {\"emotion_output\": \"(affect)\"} ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion, only use one word; return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase ",
          "lower_case": "Tell the speaker's emotion; only use one word; return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "*mood*",
              "inst": "Tell the speaker's emotion and only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*mood*\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "*Voice_Emotion*",
              "inst": "Tell the speaker's emotion and only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"*Voice_Emotion*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the speaker's emotion and only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bracket the result inside \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, only use one word; return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards, ensure that SER is stored under the key \"emotion_tag\"; this is an appropriate format: {\"emotion_tag\": \"(feeling)\"}: ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling and in precisely one word; only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion: ",
          "lower_case": "State the speaker's feeling. In precisely one word; only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "State the speaker's feeling. In precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"The emotional tone detected: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_RESULT**",
              "inst": "State the speaker's feeling, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**EMOTION_RESULT**\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the speaker's feeling. In precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is encapsulated in json, link the key \"speaker_emotion\" directly to the SER data and refer to this sample output: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood; in only one word and pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce uppercase-only emotion text ",
          "lower_case": "Point out the speaker's mood. in only one word and pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Point out the speaker's mood; in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix with \"<Perceived_Emotion>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_label>",
              "inst": "Point out the speaker's mood, in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and terminate the result using \"<emotion_label>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Point out the speaker's mood, in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; in only one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style and place the result of SER beneath the key \"sentiment\", follow this example to structure the data: {\"sentiment\": \"(emotional tone)\"}. ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "kept to one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Kept to one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and kept to one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure all emotion labels are uppercase: ",
          "lower_case": "Describe the speaker's mood and kept to one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Describe the speaker's mood. Kept to one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived speaker mood: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[perceived_emotion]",
              "inst": "Describe the speaker's mood; kept to one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[perceived_emotion]\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the speaker's mood and kept to one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the output between \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and kept to one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json, bind the task SER to the key \"detected_emotion\"; refer to this sample output: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M006.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; defined in one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text ",
          "lower_case": "Describe the speaker's feelings; defined in one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "*MOOD*",
              "inst": "Describe the speaker's feelings and defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*MOOD*\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Perceived_Emotion}",
              "inst": "Describe the speaker's feelings. Defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"{Perceived_Emotion}\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's feelings. Defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"*\" and \"*\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, defined in one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format. SER should appear under the json key \"emotion_tag\"; the appropriate response template: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M007.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood. Using only one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters: ",
          "lower_case": "Point out the speaker's mood; using only one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Return lowercase-only SER output: ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Point out the speaker's mood and using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Recognized feeling is: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Point out the speaker's mood. Using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"*perceived_emotion*\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's mood; using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place the result between the symbols \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, using only one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax. \"emotion_tag\" should be the identifier for the SER content. When in doubt, refer to: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M008.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "articulated in one word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Articulated in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker; articulated in one word. Restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase ",
          "lower_case": "Describe the emotion of the speaker; articulated in one word. Restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". Detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "**EMOTION**",
              "inst": "Describe the emotion of the speaker and articulated in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"**EMOTION**\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Describe the emotion of the speaker; articulated in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"[Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the emotion of the speaker and articulated in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<wrap>\" before and \"</wrap>\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, articulated in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", shape the output using standard json conventions, the SER information must be placed under \"speaker_emotion\". A correctly structured entry is: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M009.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling, using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling; using only one word and select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Identify the speaker's feeling. Using only one word and select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "[emotion_tag]",
              "inst": "Identify the speaker's feeling; using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"[emotion_tag]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Voice_Emotion*",
              "inst": "Identify the speaker's feeling. Using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"*Voice_Emotion*\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's feeling and using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"$\" and \"$\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; using only one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is formatted as valid json, write the SER result with \"emotion_label\" as its property name; you can format it as follows: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion; answer in one word, provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters. ",
          "lower_case": "State the speaker's emotion, answer in one word, provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". Return the SER output as lowercase text only ",
          "prefix": [
            {
              "prefix": "[perceived_emotion]",
              "inst": "State the speaker's emotion, answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", headed by \"[perceived_emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_state>",
              "inst": "State the speaker's emotion; answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"<emotional_state>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's emotion. answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"**\" and suffix it with \"**\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, answer in one word, provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container. The json attribute for SER is \"emotion_label\" and the output should resemble: {\"emotion_label\": \"(perceived emotion)\"}: ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M011.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion; limited to one word; only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only ",
          "lower_case": "State the speaker's emotion, limited to one word; only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "State the speaker's emotion; limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; headed by \"The mood derived from voice: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Feeling**",
              "inst": "State the speaker's emotion. Limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"**Feeling**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's emotion. Limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"<s>\" and \"</s>\" tags "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, limited to one word; only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure; allocate the key \"speaker_emotion\" for the data derived from SER, refer to this sample output: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M012.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "articulated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. articulated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker; articulated in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result ",
          "lower_case": "Describe the emotion of the speaker, articulated in one word. pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Describe the emotion of the speaker. Articulated in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"Identified emotion category: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**mood**",
              "inst": "Describe the emotion of the speaker and articulated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and suffix the output with \"**mood**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Describe the emotion of the speaker and articulated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"'\" before and \"'\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. Articulated in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure the final output as a json object, represent SER in the json with the key \"sentiment\"; your final output should take the form: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood, call it in one word, chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Tell the speaker's mood, call it in one word, chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "{VOICE_EMOTION}",
              "inst": "Tell the speaker's mood, call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". At the start, put \"{VOICE_EMOTION}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Tell the speaker's mood, call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<PERCEIVED_EMOTION>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Tell the speaker's mood. Call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"'\" and \"'\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and call it in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and make sure the SER output is labeled \"sentiment\"; maintain the structure like so: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M014.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "written in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling; written in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling, written in one word. Return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase characters in the emotion label. ",
          "lower_case": "Explain the speaker's feeling; written in one word. Return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "*feeling*",
              "inst": "Explain the speaker's feeling and written in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and initiated by \"*feeling*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Label]",
              "inst": "Explain the speaker's feeling; written in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"[Emotion_Label]\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Explain the speaker's feeling and written in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"*\" to the beginning and \"*\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, written in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format; the SER value should be indexed by \"emotion_output\", the appropriate response template: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M017.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling; mention in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Express the speaker's feeling; mention in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Express the speaker's feeling, mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepend \"Predicted affect category: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "Express the speaker's feeling; mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"**Speaker_Emotion**\" is the last string "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the speaker's feeling. Mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format, format the SER data using \"emotion_label\" as its key name, maintain the structure like so: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M018.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "with a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion, with a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. With a single word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text. ",
          "lower_case": "Tell the speaker's emotion, with a single word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_TONE]",
              "inst": "Tell the speaker's emotion; with a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[EMOTIONAL_TONE]\" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Tell the speaker's emotion, with a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"{affect}\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's emotion; with a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"\"\" and \"\"\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. With a single word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format. The result corresponding to SER should be mapped to \"emotion_label\", please use a format similar to: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "state it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; state it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood. state it in one word and output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase ",
          "lower_case": "Explain the speaker's mood, state it in one word and output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "*SPEAKER_EMOTION*",
              "inst": "Explain the speaker's mood and state it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"*SPEAKER_EMOTION*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Tag>",
              "inst": "Explain the speaker's mood and state it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"<Emotion_Tag>\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the speaker's mood. State it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"#\" and \"#\" markers "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and state it in one word and output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is formatted as valid json and when structuring the result, use \"emotional_state\" for the SER section, the output must match this structure: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro06/Ses05M_impro06_M020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; articulated in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion and articulated in one word. output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result. ",
          "lower_case": "Summarize the speaker's emotion; articulated in one word. Output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Summarize the speaker's emotion; articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"**emotion_tag**\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "[SPEAKER_EMOTION]",
              "inst": "Summarize the speaker's emotion, articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"[SPEAKER_EMOTION]\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's emotion. Articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Attach \"<BOS>\" to the beginning and \"<EOS>\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. Articulated in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format; structure your json so that SER is labeled as \"emotion_label\". your final output should take the form: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "with a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; with a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker, with a single word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion ",
          "lower_case": "Specify the emotion of the speaker; with a single word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_TONE**",
              "inst": "Specify the emotion of the speaker, with a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**EMOTIONAL_TONE**\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "{sentiment}",
              "inst": "Specify the emotion of the speaker. With a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"{sentiment}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Specify the emotion of the speaker, with a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result between the symbols \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; with a single word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format; the json attribute for SER is \"emotional_state\", for example: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker. Summed in one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "Specify the emotion of the speaker. summed in one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Specify the emotion of the speaker. Summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Recognized emotional category: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Specify the emotion of the speaker, summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"<EMOTION_RESULT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the emotion of the speaker and summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; use \"~\" and \"~\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, summed in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the result into a json-compatible structure; the SER information must be placed under \"emotion_label\"; the correct json format includes: {\"emotion_label\": \"(perceived emotion)\"}. ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. In one single word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the SER output entirely uppercase. ",
          "lower_case": "Summarize the speaker's mood and in one single word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\"; format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "<Feeling>",
              "inst": "Summarize the speaker's mood, in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<Feeling>\" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Result]",
              "inst": "Summarize the speaker's mood, in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"[Emotion_Result]\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's mood, in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood. in one single word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax and use \"predicted_emotion\" as the json label for SER, maintain the structure like so: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "captured in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, captured in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker, captured in one word. The output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Identify the emotion of the speaker; captured in one word. The output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "<FEELING>",
              "inst": "Identify the emotion of the speaker. captured in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"<FEELING>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Result**",
              "inst": "Identify the emotion of the speaker, captured in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"**Emotion_Result**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the emotion of the speaker. captured in one word. the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"{\" and \"}\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; captured in one word. The output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation; when formatting, associate SER with \"SER\"; when in doubt, refer to: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; only use one word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the uppercase emotion result. ",
          "lower_case": "Express the speaker's emotion, only use one word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Express the speaker's emotion and only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"Detected speech feeling: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "Express the speaker's emotion, only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"{emotion_result}\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's emotion; only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"*\" before and \"*\" after: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; only use one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". serialize the result into json form and the json attribute for SER is \"emotion\", the desired structure is as shown: {\"emotion\": \"(affect)\"}. ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "named in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's emotion. Named in one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Tell the speaker's emotion and named in one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; present only the lowercase emotion label as the result ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_TONE**",
              "inst": "Tell the speaker's emotion and named in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**EMOTIONAL_TONE**\" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Feeling**",
              "inst": "Tell the speaker's emotion and named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have the result trail off with \"**Feeling**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the speaker's emotion. Named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"<start>\" before the result and \"<end>\" after it: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert your output into a json-compatible format and the key \"SER\" maps to the result of SER and the json result must follow this form: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker; reply in one word; answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Describe the emotion of the speaker and reply in one word; answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Describe the emotion of the speaker. Reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The emotional tone detected: \" as the first line: "
            }
          ],
          "suffix": [
            {
              "suffix": "[feeling]",
              "inst": "Describe the emotion of the speaker; reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"[feeling]\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the emotion of the speaker, reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and reply in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", express the final output in proper json; please assign the key \"predicted_emotion\" to the SER field. one possible output form: {\"predicted_emotion\": \"(feeling)\"}. ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood. Call it in one word, the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase text for the predicted emotion: ",
          "lower_case": "Tell the speaker's mood; call it in one word, the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "*EMOTION_OUTPUT*",
              "inst": "Tell the speaker's mood. call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starting with \"*EMOTION_OUTPUT*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Tell the speaker's mood, call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"**emotion_result**\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Tell the speaker's mood, call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"<s>\" and \"</s>\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and call it in one word, the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the structured data as a json-formatted string and attach \"emotional_state\" to the result of SER in the final output, for reference, your output might look like: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Limited to one word and chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase ",
          "lower_case": "Specify the speaker's mood, limited to one word and chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Specify the speaker's mood, limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Predicted mood label: \" opening the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_state]",
              "inst": "Specify the speaker's mood and limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"[emotional_state]\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Specify the speaker's mood; limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"<BOS>\" as prefix and \"<EOS>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, limited to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json; represent the result of SER using the key \"emotion\". This is an appropriate format: {\"emotion\": \"(affect)\"}. ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker. In only one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the recognized emotion in all uppercase letters. ",
          "lower_case": "Tell the emotion of the speaker, in only one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Tell the emotion of the speaker and in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The analyzed emotion state: \" coming first. "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Tell the emotion of the speaker; in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"*perceived_emotion*\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the emotion of the speaker and in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"$\" and append \"$\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, in only one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax and represent SER in the json with the key \"emotion\" and a valid format example: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker; mention in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase. ",
          "lower_case": "Tell the emotion of the speaker. mention in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Tell the emotion of the speaker, mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Detected affective state: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION}",
              "inst": "Tell the emotion of the speaker and mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"{EMOTION}\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the emotion of the speaker and mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix the result with \"$\" and suffix it with \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and mention in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format. When formatting, associate SER with \"SER\"; an illustration of the format would be: {\"SER\": \"(perceived emotion)\"}. ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion. defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and defined in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give only the predicted emotion using uppercase letters. ",
          "lower_case": "Tell the speaker's emotion. Defined in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase: ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Tell the speaker's emotion; defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; front-loaded with \"Speech emotion detected as: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion}",
              "inst": "Tell the speaker's emotion and defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish everything with a \"{Emotion}\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's emotion, defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; defined in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure your response as a valid json string; label the output of SER using the key \"emotion_result\", here's how a typical entry should look: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling, revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling; revealed in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give the predicted emotion entirely in uppercase ",
          "lower_case": "Tell the speaker's feeling, revealed in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Tell the speaker's feeling. Revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and START WITH \"**Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Tell the speaker's feeling; revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"*Feeling*\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's feeling and revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". surround the result with the markers \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and revealed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure, assign \"emotion_result\" as the property key for SER related content, you are expected to return: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood; addressed in one word and allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only: ",
          "lower_case": "Describe the speaker's mood. addressed in one word and allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Describe the speaker's mood; addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Describe the speaker's mood; addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"<predicted_emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's mood and addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"#\" and \"#\" to bracket the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; addressed in one word and allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format and bind the task SER to the key \"SER\"; a correctly structured entry is: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and only in one word; only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion. ",
          "lower_case": "Describe the emotion of the speaker; only in one word; only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Describe the emotion of the speaker and only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Perceived speaker mood: \" at the very beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "[Affect]",
              "inst": "Describe the emotion of the speaker and only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"[Affect]\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Describe the emotion of the speaker, only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"_\" and \"_\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, only in one word; only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Shape the output using standard json conventions, the output variable for SER is expected to be labeled \"predicted_emotion\", the json result must follow this form: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "in exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and in exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; in exactly one word and choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and format the emotion label so that all text is uppercase. ",
          "lower_case": "Specify the speaker's mood, in exactly one word and choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Specify the speaker's mood. In exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Detected speech feeling: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Specify the speaker's mood and in exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"<Feeling>\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's mood and in exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and use \"{\" and \"}\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; in exactly one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". produce a response that adheres to json syntax. use \"speaker_emotion\" as the designated key for SER. An illustration of the format would be: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "mention in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion and mention in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion, mention in one word. The answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters ",
          "lower_case": "Identify the speaker's emotion; mention in one word. The answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Identify the speaker's emotion, mention in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; front-loaded with \"Recognized emotional category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Identify the speaker's emotion. mention in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and put \"<PERCEIVED_EMOTION>\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion, mention in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, mention in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". transform the response into json format; bind the task SER to the key \"emotion\"; you are expected to return: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion, reply in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only ",
          "lower_case": "Identify the speaker's emotion and reply in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Identify the speaker's emotion, reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with the top marked by \"The classified sentiment is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_label}",
              "inst": "Identify the speaker's emotion. reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"{emotion_label}\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Identify the speaker's emotion; reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"#\" at the beginning and \"#\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion and reply in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce a response that adheres to json syntax, for the SER entry, use \"predicted_emotion\" as its key, the expected structure looks like this: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling; using only one word; pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide just the uppercase version of the emotion: ",
          "lower_case": "Tell the speaker's feeling, using only one word; pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Tell the speaker's feeling; using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Emotion category identified: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Tag>",
              "inst": "Tell the speaker's feeling. using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And concatenate \"<Emotion_Tag>\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's feeling; using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"$\" and closing \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and using only one word; pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure and the key \"predicted_emotion\" maps to the result of SER and the output should resemble: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "limited to one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; limited to one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings and limited to one word. Output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Format the emotion label so that all text is uppercase: ",
          "lower_case": "Describe the speaker's feelings. Limited to one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "Describe the speaker's feelings and limited to one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". By preceding all with \"{feeling}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_Tone}",
              "inst": "Describe the speaker's feelings; limited to one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"{Emotional_Tone}\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's feelings. Limited to one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"<\" and trailing \">\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and limited to one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure and make sure the SER output is labeled \"sentiment\". format your response exactly as: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood and describe in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase. ",
          "lower_case": "Tell the speaker's mood, describe in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Tell the speaker's mood. Describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Identified emotion label: \" set as the introduction: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotional_State]",
              "inst": "Tell the speaker's mood, describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finish the output with \"[Emotional_State]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's mood, describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"\"\" as the left boundary and \"\"\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; describe in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string and the result corresponding to SER should be mapped to \"emotion_tag\". This is an appropriate format: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's feeling; just use one word, output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters. ",
          "lower_case": "Point out the speaker's feeling. Just use one word, output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Point out the speaker's feeling and just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion result from audio: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Point out the speaker's feeling, just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"*Feeling*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Point out the speaker's feeling. Just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"<start>\" and append \"<end>\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, just use one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards; the key \"sentiment\" maps to the result of SER, the correct json format includes: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings. just use one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion. ",
          "lower_case": "Describe the speaker's feelings and just use one word. The selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "<Voice_Emotion>",
              "inst": "Describe the speaker's feelings. Just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"<Voice_Emotion>\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Describe the speaker's feelings; just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"{affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's feelings and just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"**\" in the front and \"**\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. Just use one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure, format the SER data using \"emotion\" as its key name. you are expected to return: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood; limited to one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide only uppercase text for the predicted emotion. ",
          "lower_case": "Summarize the speaker's mood; limited to one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion written entirely in lowercase letters ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Summarize the speaker's mood; limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Final emotion classification: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Summarize the speaker's mood; limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"[sentiment]\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Summarize the speaker's mood; limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result so it is enclosed in \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; limited to one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout and SER should appear under the json key \"emotion_label\" and here is a sample representation: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Only in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text ",
          "lower_case": "Specify the speaker's mood, only in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Specify the speaker's mood; only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix it with \"[VOICE_EMOTION]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**sentiment**",
              "inst": "Specify the speaker's mood and only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"**sentiment**\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's mood and only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, only in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object and assign \"sentiment\" as the property key for SER related content. Format your response exactly as: {\"sentiment\": \"(emotional tone)\"} ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F028.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood and only use one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make sure the entire predicted emotion is in uppercase. ",
          "lower_case": "Identify the speaker's mood; only use one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "*MOOD*",
              "inst": "Identify the speaker's mood. only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"*MOOD*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<PREDICTED_EMOTION>",
              "inst": "Identify the speaker's mood and only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"<PREDICTED_EMOTION>\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the speaker's mood; only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"{\" at the beginning and \"}\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; only use one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure; when structuring the result, use \"emotion_result\" for the SER section; here is a sample representation: {\"emotion_result\": \"(emotion)\"} ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F029.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion; say it in exactly one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the emotion label in uppercase form ",
          "lower_case": "Summarize the speaker's emotion; say it in exactly one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Summarize the speaker's emotion. Say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"Predicted emotional output: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Summarize the speaker's emotion; say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"**VOICE_EMOTION**\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Summarize the speaker's emotion and say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"$\" in front and \"$\" behind. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. say it in exactly one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax, format the SER data using \"emotion_output\" as its key name. Keep your output consistent with: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F030.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood, limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood; limited to one word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER result in uppercase format only. ",
          "lower_case": "Describe the speaker's mood, limited to one word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "{EMOTION_LABEL}",
              "inst": "Describe the speaker's mood. limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make \"{EMOTION_LABEL}\" the first thing in the output "
            }
          ],
          "suffix": [
            {
              "suffix": "*Perceived_Emotion*",
              "inst": "Describe the speaker's mood and limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"*Perceived_Emotion*\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood; limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"<start>\" and \"<end>\" tags "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; limited to one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting and bind the task SER to the key \"emotional_state\" and the expected structure looks like this: {\"emotional_state\": \"(emotional tone)\"}: ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker. Just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker. just use one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion result as uppercase letters only ",
          "lower_case": "Express the emotion of the speaker and just use one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Express the emotion of the speaker. just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"Predicted emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Express the emotion of the speaker; just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**Perceived_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the emotion of the speaker, just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Embed the result between \"<\" and \">\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, just use one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax. The field related to SER must be labeled with \"sentiment\" and this is an appropriate format: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F032.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling; kept to one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". generate the emotion result only in uppercase characters. ",
          "lower_case": "Point out the speaker's feeling and kept to one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Format the emotion label so that all text is lowercase: ",
          "prefix": [
            {
              "prefix": "[Feeling]",
              "inst": "Point out the speaker's feeling. Kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"[Feeling]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "Point out the speaker's feeling and kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"**emotion_tag**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling, kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, kept to one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions, the label \"emotion_label\" must correspond to the SER section and consider this sample format: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F033.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the emotion result using uppercase letters only ",
          "lower_case": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the emotion label is all lowercase characters: ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert \"Predicted emotional output: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"[Emotion_Output]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"<wrap>\" and \"</wrap>\" tags "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, summed in one word, select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json; format the SER data using \"emotion_output\" as its key name. The expected structure looks like this: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. In only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling and in only one word, output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". generate the emotion result only in uppercase characters. ",
          "lower_case": "Express the speaker's feeling and in only one word, output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Express the speaker's feeling; in only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"Recognized voice emotion: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Express the speaker's feeling and in only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"{Feeling}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling; in only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefix the result with \"#\" and suffix it with \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; in only one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object and write the SER result with \"sentiment\" as its property name, one possible output form: {\"sentiment\": \"(affect)\"}. ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker; say it in exactly one word, allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes ",
          "lower_case": "State the emotion of the speaker. Say it in exactly one word, allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "State the emotion of the speaker; say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Predicted emotional tone: \" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "State the emotion of the speaker; say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"<feeling>\" at the closing point: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the emotion of the speaker, say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"***\" in front and \"***\" behind: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker. say it in exactly one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object and encode the SER content using \"emotion_result\" as its identifier; your final output should take the form: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker and concluded with one word and return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Summarize the emotion of the speaker and concluded with one word and return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\". output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Summarize the emotion of the speaker, concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"Identified emotional tone: \" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Summarize the emotion of the speaker; concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"[Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the emotion of the speaker; concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<start>\" at the beginning and \"<end>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; concluded with one word and return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json. Include the SER output under the key \"detected_emotion\", refer to this sample output: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F038.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "state in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. state in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling and state in one word, choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters ",
          "lower_case": "State the speaker's feeling. State in one word, choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_STATE]",
              "inst": "State the speaker's feeling. State in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"[EMOTIONAL_STATE]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "State the speaker's feeling. State in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"[EMOTION_TAG]\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's feeling, state in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place the result inside a pair of \"***\" and \"***\" tags. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, state in one word, choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax, make sure the SER output is labeled \"predicted_emotion\". Keep your output consistent with: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling, simply in one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase. ",
          "lower_case": "Summarize the speaker's feeling and simply in one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only: ",
          "prefix": [
            {
              "prefix": "*emotion_output*",
              "inst": "Summarize the speaker's feeling; simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin the output using \"*emotion_output*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Summarize the speaker's feeling. Simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"<EMOTION_RESULT>\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's feeling. Simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; simply in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style. The SER result must be identified using the key \"SER\" and one possible output form: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F040.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "with one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; with one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; with one single word and output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Express the speaker's mood, with one single word and output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "<emotion_output>",
              "inst": "Express the speaker's mood. with one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"<emotion_output>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Express the speaker's mood, with one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"[Feeling]\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's mood, with one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"~\" before the result and \"~\" after it "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. With one single word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax. Ensure \"detected_emotion\" is used as the access key for SER and the formatting guide is: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling. Simply in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase: ",
          "lower_case": "Express the speaker's feeling and simply in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Express the speaker's feeling. Simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Classification result (emotion): \" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "Express the speaker's feeling, simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"[EMOTION_OUTPUT]\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the speaker's feeling. Simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and simply in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the data inside a properly formed json, the json attribute for SER is \"detected_emotion\". Please follow the template: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F042.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood. Kept to one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase ",
          "lower_case": "Describe the speaker's mood; kept to one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Describe the speaker's mood, kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Final emotion classification: \" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "Describe the speaker's mood and kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finalize it by adding \"*speaker_emotion*\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the speaker's mood; kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"<BOS>\" and \"<EOS>\" to contain the result as a whole: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and kept to one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make the output conform to json formatting, the SER result must be identified using the key \"emotional_state\"; a proper example would be: {\"emotional_state\": \"(mood)\"}: ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F044.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's emotion; say it in exactly one word; return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Specify the speaker's emotion. Say it in exactly one word; return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Specify the speaker's emotion; say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Detected speech feeling: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*Speaker_Emotion*",
              "inst": "Specify the speaker's emotion. say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow up by appending \"*Speaker_Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's emotion and say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<\" at the beginning and \">\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion; say it in exactly one word; return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". organize the result in a json-style dictionary; the SER result must be identified using the key \"SER\" and a demonstration of the expected format: {\"SER\": \"(mood)\"} ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_F045.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker and reply in one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion ",
          "lower_case": "Identify the emotion of the speaker, reply in one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "**Speaker_Emotion**",
              "inst": "Identify the emotion of the speaker and reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"**Speaker_Emotion**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Identify the emotion of the speaker. Reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"**PREDICTED_EMOTION**\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the emotion of the speaker and reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. Reply in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce the output adhering to json format, bind the task SER to the key \"emotion_result\"; the output must match this structure: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. Rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and rendered in one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the recognized emotion in all uppercase letters: ",
          "lower_case": "Identify the speaker's feeling; rendered in one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "[predicted_emotion]",
              "inst": "Identify the speaker's feeling and rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin it with \"[predicted_emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_TONE}",
              "inst": "Identify the speaker's feeling. Rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{EMOTIONAL_TONE}\" directly after the result: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's feeling, rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", box the result using \"<s>\" and \"</s>\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling; rendered in one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure. use \"SER\" as the json label for SER. when in doubt, refer to: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion; with a single word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase ",
          "lower_case": "Identify the speaker's emotion and with a single word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Identify the speaker's emotion and with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"Speech tone analysis result: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Identify the speaker's emotion. with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"{Emotion_Output}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion, with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"_\" and \"_\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; with a single word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the output directly into json. the SER value should be indexed by \"SER\". your result should mirror this: {\"SER\": \"(feeling)\"}. ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. Conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling and conveyed in one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text ",
          "lower_case": "Identify the speaker's feeling and conveyed in one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Identify the speaker's feeling, conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Predicted emotional tone: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_TONE]",
              "inst": "Identify the speaker's feeling and conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"[EMOTIONAL_TONE]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the speaker's feeling, conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"{\" and \"}\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and conveyed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation; assign \"emotion_result\" as the property key for SER related content and for reference, your output might look like: {\"emotion_result\": \"(feeling)\"}. ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood. Summed up in one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only. ",
          "lower_case": "Identify the speaker's mood; summed up in one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "[Emotion_Result]",
              "inst": "Identify the speaker's mood. summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[Emotion_Result]\" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_TAG*",
              "inst": "Identify the speaker's mood; summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"*EMOTION_TAG*\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Identify the speaker's mood, summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"<BOS>\" as prefix and \"<EOS>\" as suffix "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, summed up in one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; print the result using json object formatting; label the output of SER using the key \"emotion_label\" and a proper example would be: {\"emotion_label\": \"(affect)\"}: ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "chosen in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and chosen in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion, chosen in one word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase text for the predicted emotion: ",
          "lower_case": "Express the speaker's emotion and chosen in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Express the speaker's emotion; chosen in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". launching with \"Recognized emotional category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_OUTPUT**",
              "inst": "Express the speaker's emotion. Chosen in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"**EMOTION_OUTPUT**\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's emotion, chosen in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"**\" and closing \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Chosen in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation. Represent the result of SER using the key \"emotion_output\". An illustration of the format would be: {\"emotion_output\": \"(affect)\"}. ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood. declared in one word and choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Summarize the speaker's mood, declared in one word and choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Summarize the speaker's mood, declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefixed with \"Predicted emotional output: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's mood, declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"<EMOTIONAL_TONE>\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's mood and declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"(\" before the result and \")\" after it: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; declared in one word and choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string and assign \"emotion_label\" as the property key for SER related content; keep your output consistent with: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling. Summarized in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only ",
          "lower_case": "Express the speaker's feeling. Summarized in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "[Affect]",
              "inst": "Express the speaker's feeling; summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starting with \"[Affect]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Result**",
              "inst": "Express the speaker's feeling and summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"**Emotion_Result**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling. summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"$\" and trailing \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Summarized in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; the json representation of SER must be keyed as \"SER\". A correct formatting instance is: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. Restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker; restricted to one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase ",
          "lower_case": "Describe the emotion of the speaker; restricted to one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "**sentiment**",
              "inst": "Describe the emotion of the speaker; restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", kicking off with \"**sentiment**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Describe the emotion of the speaker. Restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"**emotional_tone**\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the emotion of the speaker. restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"<s>\" in front and \"</s>\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object, the output variable for SER is expected to be labeled \"emotion_result\". Refer to this sample output: {\"emotion_result\": \"(emotional tone)\"}. ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "respond in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; respond in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling, respond in one word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Point out the speaker's feeling, respond in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "*Feeling*",
              "inst": "Point out the speaker's feeling and respond in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", headed by \"*Feeling*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_LABEL**",
              "inst": "Point out the speaker's feeling; respond in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"**EMOTION_LABEL**\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Point out the speaker's feeling. Respond in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and respond in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Serialize the result into json form, represent SER in the json with the key \"detected_emotion\" and you are expected to return: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion; limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion. Limited to one word; output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the uppercase version of the detected emotion: ",
          "lower_case": "Point out the speaker's emotion; limited to one word; output must be \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Point out the speaker's emotion. Limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"Perceived speaker mood: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion}",
              "inst": "Point out the speaker's emotion, limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"{emotion}\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Point out the speaker's emotion. limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"\"\" on the left and \"\"\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion. Limited to one word; output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout and link the key \"SER\" directly to the SER data. The expected structure looks like this: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings. state it in one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return uppercase-only emotion recognition output: ",
          "lower_case": "Describe the speaker's feelings. State it in one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "{EMOTION_LABEL}",
              "inst": "Describe the speaker's feelings; state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{EMOTION_LABEL}\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "Describe the speaker's feelings and state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and end the result by inserting \"{EMOTION_TAG}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the speaker's feelings, state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". attach \"~\" to the beginning and \"~\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, state it in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object and please tag the SER information with the key \"detected_emotion\"; a correctly structured entry is: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "in a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and in a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and in a single word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text. ",
          "lower_case": "Tell the speaker's emotion and in a single word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_STATE]",
              "inst": "Tell the speaker's emotion and in a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"[EMOTIONAL_STATE]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Tell the speaker's emotion and in a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{Affect}\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's emotion. In a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and in a single word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string; the field related to SER must be labeled with \"speaker_emotion\"; keep your output consistent with: {\"speaker_emotion\": \"(affect)\"} ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood, state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood; state it in one word, only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result ",
          "lower_case": "Explain the speaker's mood; state it in one word, only choose among \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "*EMOTION_OUTPUT*",
              "inst": "Explain the speaker's mood. state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starts with \"*EMOTION_OUTPUT*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{speaker_emotion}",
              "inst": "Explain the speaker's mood and state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"{speaker_emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the speaker's mood. state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; state it in one word, only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format. Label the output of SER using the key \"emotion_result\"; when in doubt, refer to: {\"emotion_result\": \"(affect)\"} ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood. With a single word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase ",
          "lower_case": "Tell the speaker's mood. With a single word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\", give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Tell the speaker's mood. with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"Recognized affective category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Output>",
              "inst": "Tell the speaker's mood; with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"<Emotion_Output>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's mood; with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"$\" and trailing \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and with a single word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure; the key for SER should be \"SER\" respectively and format your response exactly as: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "answer in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, answer in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; answer in one word. Select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label. ",
          "lower_case": "Explain the speaker's emotion. Answer in one word. Select only one: \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "<emotion>",
              "inst": "Explain the speaker's emotion, answer in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"<emotion>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Explain the speaker's emotion, answer in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"*Emotion*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's emotion and answer in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make use of \"<s>\" and \"</s>\" to surround the result entirely "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. answer in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules, please assign the key \"predicted_emotion\" to the SER field; the expected structure looks like this: {\"predicted_emotion\": \"(emotional tone)\"}. ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood and in precisely one word. Selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Point out the speaker's mood, in precisely one word. Selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". Provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Point out the speaker's mood; in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"Recognized sentiment label: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Result**",
              "inst": "Point out the speaker's mood, in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"**Emotion_Result**\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Point out the speaker's mood and in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"[\" and \"]\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and in precisely one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object and the json attribute for SER is \"emotion_result\", you can format it as follows: {\"emotion_result\": \"(emotional tone)\"}. ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. call it in one word; return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase: ",
          "lower_case": "Point out the speaker's feeling, call it in one word; return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Point out the speaker's feeling. Call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", using \"Predicted sentiment state: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**Predicted_Emotion**",
              "inst": "Point out the speaker's feeling and call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"**Predicted_Emotion**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's feeling; call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result inside the bounds of \"{\" and \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, call it in one word; return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data; \"SER\" should be the identifier for the SER content; to illustrate, use: {\"SER\": \"(emotional tone)\"}. ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion; just one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters. ",
          "lower_case": "State the speaker's emotion; just one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "State the speaker's emotion; just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefixed with \"The analyzed emotion state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{predicted_emotion}",
              "inst": "State the speaker's emotion and just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"{predicted_emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's emotion and just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"<\" before and \">\" after. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, just one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style. when structuring the result, use \"sentiment\" for the SER section and the json result must follow this form: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "using only one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, using only one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker; using only one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the SER output entirely uppercase ",
          "lower_case": "Specify the emotion of the speaker. Using only one word. Chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "**EMOTION_LABEL**",
              "inst": "Specify the emotion of the speaker, using only one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**EMOTION_LABEL**\" as a prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Tag*",
              "inst": "Specify the emotion of the speaker and using only one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"*Emotion_Tag*\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Specify the emotion of the speaker and using only one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"(\" to the beginning and \")\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Using only one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure. the json representation of SER must be keyed as \"emotional_state\". When in doubt, refer to: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "articulated in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; articulated in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker and articulated in one word. The result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion result as uppercase letters only. ",
          "lower_case": "Tell the emotion of the speaker; articulated in one word. The result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output ",
          "prefix": [
            {
              "prefix": "<voice_emotion>",
              "inst": "Tell the emotion of the speaker. Articulated in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"<voice_emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_OUTPUT>",
              "inst": "Tell the emotion of the speaker; articulated in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"<EMOTION_OUTPUT>\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the emotion of the speaker. articulated in one word. The result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result between the symbols \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, articulated in one word. the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Display the result in json formatting style. Format the SER data using \"emotional_state\" as its key name and to illustrate, use: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood, mention in one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion ",
          "lower_case": "Explain the speaker's mood. Mention in one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "**Emotion_Label**",
              "inst": "Explain the speaker's mood. mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"**Emotion_Label**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*predicted_emotion*",
              "inst": "Explain the speaker's mood; mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"*predicted_emotion*\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the speaker's mood; mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"#\" as prefix and \"#\" as suffix "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. Mention in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions, the key for SER should be \"predicted_emotion\" respectively and for reference, your output might look like: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion. Limited to one word, provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase ",
          "lower_case": "State the speaker's emotion, limited to one word, provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "*EMOTION_RESULT*",
              "inst": "State the speaker's emotion, limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make \"*EMOTION_RESULT*\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "State the speaker's emotion, limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"{Speaker_Emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's emotion, limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". surround the result with the markers \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and limited to one word, provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". display the result in json formatting style; for the SER entry, use \"emotion_output\" as its key. Follow this example to structure the data: {\"emotion_output\": \"(perceived emotion)\"}. ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood and reply in one word, allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the uppercase emotion result ",
          "lower_case": "Identify the speaker's mood and reply in one word, allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\". output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "<voice_emotion>",
              "inst": "Identify the speaker's mood; reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<voice_emotion>\" heading things up "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "Identify the speaker's mood. Reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"**emotional_tone**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's mood. reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make use of \"<text>\" and \"</text>\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; reply in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format and allocate the key \"emotional_state\" for the data derived from SER. For example: {\"emotional_state\": \"(mood)\"}. ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood and answer in one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form. ",
          "lower_case": "Point out the speaker's mood; answer in one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "[MOOD]",
              "inst": "Point out the speaker's mood, answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"[MOOD]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Speaker_Emotion>",
              "inst": "Point out the speaker's mood; answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"<Speaker_Emotion>\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Point out the speaker's mood; answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"*\" and \"*\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood. answer in one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string and allocate the key \"SER\" for the data derived from SER, use the following format in your response: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling, write in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return just the emotion label with no lowercase letters. ",
          "lower_case": "Point out the speaker's feeling; write in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "[emotion_label]",
              "inst": "Point out the speaker's feeling, write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"[emotion_label]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Point out the speaker's feeling, write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"[AFFECT]\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's feeling, write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and write in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format, represent the result of SER using the key \"emotion_tag\" and here is a sample representation: {\"emotion_tag\": \"(emotional tone)\"}. ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in exactly one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and in exactly one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling and in exactly one word. provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters: ",
          "lower_case": "Express the speaker's feeling and in exactly one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Express the speaker's feeling. in exactly one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"Emotion recognized from speech: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Express the speaker's feeling, in exactly one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"**PREDICTED_EMOTION**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling; in exactly one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"#\" as the left boundary and \"#\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and in exactly one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style, attach \"emotion_label\" to the result of SER in the final output. The json representation should be like: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "summed up in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. Summed up in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion, summed up in one word. Select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase. ",
          "lower_case": "Explain the speaker's emotion, summed up in one word. Select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the speaker's emotion. summed up in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with a lead-in of \"The speaker's emotion is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<VOICE_EMOTION>",
              "inst": "Explain the speaker's emotion; summed up in one word. select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"<VOICE_EMOTION>\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's emotion; summed up in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"_\" and closing \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and summed up in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules and use \"detected_emotion\" as the designated key for SER, here's how a typical entry should look: {\"detected_emotion\": \"(affect)\"}: ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker and elaborated in one word, pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase ",
          "lower_case": "Describe the emotion of the speaker; elaborated in one word, pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Describe the emotion of the speaker, elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepend \"Perceived speaker mood: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Describe the emotion of the speaker and elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and complete the result using \"{MOOD}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Describe the emotion of the speaker, elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place \"~\" at the beginning and \"~\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, elaborated in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards; when structuring the result, use \"detected_emotion\" for the SER section, here's how a typical entry should look: {\"detected_emotion\": \"(emotional tone)\"}: ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "state it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. State it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion, state it in one word; restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase: ",
          "lower_case": "Express the speaker's emotion. state it in one word; restricted to \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "**PERCEIVED_EMOTION**",
              "inst": "Express the speaker's emotion. State it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; by preceding all with \"**PERCEIVED_EMOTION**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Express the speaker's emotion; state it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"[speaker_emotion]\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Express the speaker's emotion and state it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, state it in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format. encode the SER content using \"predicted_emotion\" as its identifier, use the following format in your response: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood, summarized in one word. the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Express the speaker's mood. Summarized in one word. The response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "<VOICE_EMOTION>",
              "inst": "Express the speaker's mood; summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"<VOICE_EMOTION>\" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Express the speaker's mood and summarized in one word. The response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And label the end of the result with \"[emotion_result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's mood; summarized in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"_\" and \"_\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; summarized in one word. the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Organize the result in a json-style dictionary. the SER information must be placed under \"sentiment\", the output must match this structure: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, summarized in one word and pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion: ",
          "lower_case": "Explain the emotion of the speaker and summarized in one word and pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Explain the emotion of the speaker; summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"The classified emotion label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Affect>",
              "inst": "Explain the emotion of the speaker. Summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<Affect>\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the emotion of the speaker and summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. Summarized in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the result into a json-compatible structure; bind the task SER to the key \"detected_emotion\"; please follow the template: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "say it in exactly one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, say it in exactly one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling, say it in exactly one word. choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters: ",
          "lower_case": "State the speaker's feeling, say it in exactly one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion written entirely in lowercase letters: ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "State the speaker's feeling and say it in exactly one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepended with \"Predicted speaker emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "State the speaker's feeling; say it in exactly one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and apply \"**Emotional_State**\" to the output's end. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's feeling and say it in exactly one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"**\" at the start and \"**\" at the end "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, say it in exactly one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and express the final output in proper json. Please assign the key \"predicted_emotion\" to the SER field, your final output should take the form: {\"predicted_emotion\": \"(emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling and using only one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return uppercase-only emotion recognition output: ",
          "lower_case": "Summarize the speaker's feeling and using only one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "**emotion_result**",
              "inst": "Summarize the speaker's feeling, using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"**emotion_result**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_TAG**",
              "inst": "Summarize the speaker's feeling, using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make sure it ends with \"**EMOTION_TAG**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's feeling, using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put \"<\" and \">\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, using only one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json; write the SER result with \"predicted_emotion\" as its property name and refer to this sample output: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M039.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. In only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood. In only one word; provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return uppercase-only emotion recognition output ",
          "lower_case": "Point out the speaker's mood. in only one word; provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". Output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "[EMOTION_TAG]",
              "inst": "Point out the speaker's mood. In only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"[EMOTION_TAG]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Point out the speaker's mood and in only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"{EMOTION_OUTPUT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's mood; in only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"~\" and \"~\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, in only one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object. SER must be stored in the json under the key \"emotion_tag\"; to illustrate, use: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood. Answer in one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters ",
          "lower_case": "State the speaker's mood, answer in one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "**predicted_emotion**",
              "inst": "State the speaker's mood, answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"**predicted_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_tone}",
              "inst": "State the speaker's mood and answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"{emotional_tone}\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood; answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"'\" and \"'\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Answer in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards. for the SER entry, use \"emotion_label\" as its key, the output should resemble: {\"emotion_label\": \"(mood)\"}: ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood and respond in one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase ",
          "lower_case": "Identify the speaker's mood; respond in one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "**Perceived_Emotion**",
              "inst": "Identify the speaker's mood and respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"**Perceived_Emotion**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Identify the speaker's mood and respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"[emotion_output]\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's mood. Respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and respond in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce a response that adheres to json syntax and represent SER in the json with the key \"emotion_label\". here is a sample representation: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M042.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling; revealed in one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result: ",
          "lower_case": "Point out the speaker's feeling. Revealed in one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "[MOOD]",
              "inst": "Point out the speaker's feeling, revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"[MOOD]\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Point out the speaker's feeling; revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"*EMOTIONAL_STATE*\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Point out the speaker's feeling, revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; revealed in one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result; the result corresponding to SER should be mapped to \"emotional_state\". Format your response exactly as: {\"emotional_state\": \"(emotion)\"}: ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M043.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker. say it in exactly one word; chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters: ",
          "lower_case": "Express the emotion of the speaker; say it in exactly one word; chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the emotion label is all lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Express the emotion of the speaker and say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"Predicted affect category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "Express the emotion of the speaker and say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And suffix the output with \"**predicted_emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the emotion of the speaker; say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result with the symbol \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, say it in exactly one word; chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and the SER value should be indexed by \"detected_emotion\"; the desired structure is as shown: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M044.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion and put in one word and the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text: ",
          "lower_case": "Express the speaker's emotion; put in one word and the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Express the speaker's emotion; put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"The emotion from the speech: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "Express the speaker's emotion, put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"<perceived_emotion>\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's emotion and put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". delimit the result using \"[\" in the front and \"]\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Put in one word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is encapsulated in json and SER should appear under the json key \"emotional_state\" and to illustrate, use: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M045.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "revealed in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, revealed in one word. must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling. revealed in one word. Must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Summarize the speaker's feeling. Revealed in one word. Must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Summarize the speaker's feeling, revealed in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Emotion recognized from speech: \" opening up the text. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion>",
              "inst": "Summarize the speaker's feeling, revealed in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"<Emotion>\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's feeling. revealed in one word. Must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<start>\" and \"<end>\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; revealed in one word. must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax. The label \"sentiment\" must correspond to the SER section; keep your output consistent with: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M046.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "using only one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; using only one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling; using only one word. choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the emotion result using uppercase letters only ",
          "lower_case": "Identify the speaker's feeling. using only one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Identify the speaker's feeling. Using only one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"Recognized affective category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Identify the speaker's feeling; using only one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"[emotion_result]\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's feeling, using only one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"<wrap>\" to the beginning and \"</wrap>\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling, using only one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the output in a structured json layout, the SER result must be identified using the key \"emotion_output\"; the desired structure is as shown: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro07/Ses05M_impro07_M047.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker; limited to one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result: ",
          "lower_case": "Express the emotion of the speaker and limited to one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the output emotion contains only lowercase letters ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Express the emotion of the speaker and limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Determined mood from audio: \" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Predicted_Emotion**",
              "inst": "Express the emotion of the speaker; limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"**Predicted_Emotion**\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the emotion of the speaker, limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<BOS>\" at the beginning and \"<EOS>\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, limited to one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert your output into a json-compatible format; the key \"SER\" maps to the result of SER. Here's how a typical entry should look: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. In a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood and in a single word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the detected emotion entirely in uppercase ",
          "lower_case": "Describe the speaker's mood. In a single word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "*EMOTION_OUTPUT*",
              "inst": "Describe the speaker's mood. in a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; headed by \"*EMOTION_OUTPUT*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Mood*",
              "inst": "Describe the speaker's mood; in a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Suffixed with \"*Mood*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's mood; in a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bind the result using \"<\" and \">\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, in a single word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format, SER must be stored in the json under the key \"emotion\", a compliant example would appear like: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood, describe in one word and must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Point out the speaker's mood. Describe in one word and must pick from \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Point out the speaker's mood; describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"The emotional tone detected: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**perceived_emotion**",
              "inst": "Point out the speaker's mood; describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and put \"**perceived_emotion**\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Point out the speaker's mood; describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and describe in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style, the designated key for SER should remain \"sentiment\"; a correct formatting instance is: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion, summarized in one word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form. ",
          "lower_case": "State the speaker's emotion, summarized in one word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "State the speaker's emotion and summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"Identified emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "State the speaker's emotion. summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"<Feeling>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the speaker's emotion. Summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"**\" and \"**\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion and summarized in one word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object; the key for SER should be \"sentiment\" respectively; to illustrate, use: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood; call it in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Describe the speaker's mood; call it in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Describe the speaker's mood. Call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Recognized emotional category: \" opening up the text: "
            }
          ],
          "suffix": [
            {
              "suffix": "{sentiment}",
              "inst": "Describe the speaker's mood, call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"{sentiment}\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the speaker's mood and call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"***\" in the front and \"***\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and call it in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure and the label \"detected_emotion\" must correspond to the SER section, the json representation should be like: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling; limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and limited to one word, restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER label as uppercase text: ",
          "lower_case": "Point out the speaker's feeling; limited to one word, restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Point out the speaker's feeling. limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"The emotional tone detected: \" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Point out the speaker's feeling and limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"{EMOTION_OUTPUT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's feeling. Limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"**\" to the beginning and \"**\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, limited to one word, restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation and write the SER result with \"speaker_emotion\" as its property name. A demonstration of the expected format: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings, chosen in one word; only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the emotion recognition result is all uppercase characters. ",
          "lower_case": "Describe the speaker's feelings, chosen in one word; only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Describe the speaker's feelings and chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"Determined mood from audio: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "Describe the speaker's feelings, chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". suffixed with \"**Voice_Emotion**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Describe the speaker's feelings and chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"***\" and \"***\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and chosen in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure. The output variable for SER is expected to be labeled \"emotion_output\", refer to this sample output: {\"emotion_output\": \"(feeling)\"}. ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker and in a single word, selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters ",
          "lower_case": "Explain the emotion of the speaker. In a single word, selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "**emotion**",
              "inst": "Explain the emotion of the speaker, in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Headed by \"**emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Explain the emotion of the speaker, in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"[AFFECT]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the emotion of the speaker and in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the result fully with \"{\" as the left boundary and \"}\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and in a single word, selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure, structure your json so that SER is labeled as \"emotion_label\" and a correct formatting instance is: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "summarize in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, summarize in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood and summarize in one word. only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format. ",
          "lower_case": "State the speaker's mood, summarize in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "<Emotional_Tone>",
              "inst": "State the speaker's mood and summarize in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". starts with \"<Emotional_Tone>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "State the speaker's mood and summarize in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and apply \"*EMOTIONAL_TONE*\" to the output's end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's mood and summarize in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and contain the result within the symbols \"<wrap>\" and \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and summarize in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result in a standard json structure, the key \"emotion_output\" maps to the result of SER and maintain the structure like so: {\"emotion_output\": \"(emotion)\"} ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. Revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood. Revealed in one word, limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Point out the speaker's mood; revealed in one word, limited to \"happy\", \"sad\", \"angry\" or \"neutral\". Provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "**Predicted_Emotion**",
              "inst": "Point out the speaker's mood, revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"**Predicted_Emotion**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Point out the speaker's mood; revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And append the suffix \"[sentiment]\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's mood; revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bind the result using \"$\" and \"$\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, revealed in one word, limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json. place the result of SER beneath the key \"speaker_emotion\". The json object should be in this pattern: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling, call it in one word and choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text: ",
          "lower_case": "Specify the speaker's feeling. Call it in one word and choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "[EMOTION]",
              "inst": "Specify the speaker's feeling and call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix it with \"[EMOTION]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{voice_emotion}",
              "inst": "Specify the speaker's feeling. Call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and concatenate \"{voice_emotion}\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's feeling. Call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and contain the result within the symbols \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. call it in one word and choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format; ensure that SER is stored under the key \"emotion\" and the json representation should be like: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion; using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion and using only one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase ",
          "lower_case": "Explain the speaker's emotion; using only one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase characters in the emotion result: ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Explain the speaker's emotion and using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", front-loaded with \"The speaker's emotion is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_result>",
              "inst": "Explain the speaker's emotion, using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and mark the end by \"<emotion_result>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Explain the speaker's emotion, using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result inside the bounds of \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; using only one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style and please tag the SER information with the key \"detected_emotion\" and here is a sample representation: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "in a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. In a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood; in a single word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters: ",
          "lower_case": "Point out the speaker's mood. In a single word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "**Emotional_State**",
              "inst": "Point out the speaker's mood. In a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**Emotional_State**\" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Point out the speaker's mood. In a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"[speaker_emotion]\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Point out the speaker's mood; in a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"<wrap>\" and closing \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, in a single word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format and the SER information must be placed under \"SER\". format your response exactly as: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. declared in one word, allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters: ",
          "lower_case": "Point out the speaker's feeling. declared in one word, allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Point out the speaker's feeling, declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed with \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<SPEAKER_EMOTION>",
              "inst": "Point out the speaker's feeling. Declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and end the result by inserting \"<SPEAKER_EMOTION>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's feeling. declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling; declared in one word, allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result; allocate the key \"emotion_label\" for the data derived from SER, the json representation should be like: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and delivered in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Describe the speaker's mood, delivered in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "{predicted_emotion}",
              "inst": "Describe the speaker's mood and delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", introduced by \"{predicted_emotion}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Voice_Emotion}",
              "inst": "Describe the speaker's mood and delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"{Voice_Emotion}\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the speaker's mood, delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and delivered in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object. \"predicted_emotion\" should be the identifier for the SER content, your result should mirror this: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, declared in one word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase. ",
          "lower_case": "Express the speaker's feeling; declared in one word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\". reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "{Emotion_Output}",
              "inst": "Express the speaker's feeling; declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starts with \"{Emotion_Output}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Express the speaker's feeling; declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"[speaker_emotion]\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling and declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. declared in one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the result within a json structure, the SER information must be placed under \"sentiment\"; for example: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; delivered in one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "State the speaker's feeling and delivered in one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "*EMOTIONAL_STATE*",
              "inst": "State the speaker's feeling and delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and at the start, put \"*EMOTIONAL_STATE*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<AFFECT>",
              "inst": "State the speaker's feeling; delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"<AFFECT>\" follows at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's feeling and delivered in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"<s>\" and \"</s>\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json; \"emotion\" should be the identifier for the SER content and your final output should take the form: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "captured in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; captured in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion and captured in one word. The answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form: ",
          "lower_case": "Describe the speaker's emotion and captured in one word. The answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "*Voice_Emotion*",
              "inst": "Describe the speaker's emotion and captured in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"*Voice_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_TONE]",
              "inst": "Describe the speaker's emotion, captured in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"[EMOTIONAL_TONE]\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's emotion; captured in one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"*\" and \"*\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, captured in one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format everything using strict json notation; SER must be stored in the json under the key \"emotion\" and consider this sample format: {\"emotion\": \"(mood)\"} ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker; delivered in one word, must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the detected result contains only uppercase characters: ",
          "lower_case": "State the emotion of the speaker, delivered in one word, must return \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "State the emotion of the speaker, delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Preceded by \"*affect*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "State the emotion of the speaker and delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and add \"[AFFECT]\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the emotion of the speaker. delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; delivered in one word, must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; label the output of SER using the key \"emotion\", the output should resemble: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_F028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood; in a single word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase text for the predicted emotion ",
          "lower_case": "Describe the speaker's mood. In a single word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion recognition output entirely lowercase: ",
          "prefix": [
            {
              "prefix": "*Predicted_Emotion*",
              "inst": "Describe the speaker's mood and in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and start it with \"*Predicted_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Describe the speaker's mood. In a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"**PREDICTED_EMOTION**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's mood. in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; in a single word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Structure your response as a valid json string, when structuring the result, use \"emotion_label\" for the SER section, the json object should be in this pattern: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "state in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion and state in one word. output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "Describe the speaker's emotion, state in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "[Sentiment]",
              "inst": "Describe the speaker's emotion and state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"[Sentiment]\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Describe the speaker's emotion and state in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"*affect*\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's emotion, state in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. State in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax; label the output of SER using the key \"speaker_emotion\" and an illustration of the format would be: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker; limited to one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER output as uppercase text only: ",
          "lower_case": "Explain the emotion of the speaker; limited to one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "{VOICE_EMOTION}",
              "inst": "Explain the emotion of the speaker. Limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"{VOICE_EMOTION}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Explain the emotion of the speaker; limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and mark the end of the result with \"*EMOTIONAL_TONE*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the emotion of the speaker, limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"<text>\" and \"</text>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. Limited to one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json, SER must be stored in the json under the key \"emotion_label\"; a demonstration of the expected format: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. Elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling and elaborated in one word. Select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase ",
          "lower_case": "Identify the speaker's feeling and elaborated in one word. select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Present only the lowercase emotion label as the result: ",
          "prefix": [
            {
              "prefix": "**Emotion_Label**",
              "inst": "Identify the speaker's feeling and elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"**Emotion_Label**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "Identify the speaker's feeling. elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow up by appending \"[MOOD]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Identify the speaker's feeling, elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". tag the result with opening \"<wrap>\" and closing \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and elaborated in one word. Select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object and write the SER result with \"predicted_emotion\" as its property name; follow this example to structure the data: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "in a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. In a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion, in a single word. Provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format: ",
          "lower_case": "Explain the speaker's emotion and in a single word. provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Explain the speaker's emotion; in a single word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", introduced by \"Emotion category identified: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion}",
              "inst": "Explain the speaker's emotion. In a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"{emotion}\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the speaker's emotion and in a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"(\" and \")\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; in a single word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string. assign the string \"speaker_emotion\" as the field name for SER. the expected structure looks like this: {\"speaker_emotion\": \"(feeling)\"} ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. Captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood, captured in one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Specify the speaker's mood. Captured in one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "<VOICE_EMOTION>",
              "inst": "Specify the speaker's mood; captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin the output using \"<VOICE_EMOTION>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[feeling]",
              "inst": "Specify the speaker's mood; captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"[feeling]\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's mood, captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"*\" before and \"*\" after "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, captured in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style and please tag the SER information with the key \"predicted_emotion\". the result should be rendered in this format: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood. Declared in one word and select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters. ",
          "lower_case": "Specify the speaker's mood and declared in one word and select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "<sentiment>",
              "inst": "Specify the speaker's mood, declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<sentiment>\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Specify the speaker's mood, declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And include \"[VOICE_EMOTION]\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's mood. declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"~\" at the beginning and \"~\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, declared in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style. When formatting, associate SER with \"SER\"; a valid format example: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "with one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and with one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion, with one single word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase. ",
          "lower_case": "Express the speaker's emotion and with one single word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "**Voice_Emotion**",
              "inst": "Express the speaker's emotion. with one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"**Voice_Emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Express the speaker's emotion and with one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"[VOICE_EMOTION]\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's emotion and with one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Attach \"**\" to the beginning and \"**\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. With one single word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", structure your response as a valid json string. When formatting, associate SER with \"emotion_tag\" and for example: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood, simply in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text: ",
          "lower_case": "Tell the speaker's mood, simply in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". Make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "Tell the speaker's mood; simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{Speaker_Emotion}\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "Tell the speaker's mood; simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make sure it ends with \"**Voice_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's mood and simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"***\" and \"***\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; simply in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards. Make sure the SER output is labeled \"SER\"; a valid format example: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M008.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "in precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, in precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker and in precisely one word; only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters: ",
          "lower_case": "Explain the emotion of the speaker. in precisely one word; only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "**Predicted_Emotion**",
              "inst": "Explain the emotion of the speaker. In precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"**Predicted_Emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Explain the emotion of the speaker. in precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"**feeling**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Explain the emotion of the speaker, in precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"(\" and \")\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, in precisely one word; only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax. make sure the SER output is labeled \"detected_emotion\". To illustrate, use: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker. Presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker, presented in one word, only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text. ",
          "lower_case": "Explain the emotion of the speaker; presented in one word, only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Explain the emotion of the speaker, presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Perceived speaker mood: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Voice_Emotion>",
              "inst": "Explain the emotion of the speaker and presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"<Voice_Emotion>\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Explain the emotion of the speaker and presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"#\" on the left and \"#\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; presented in one word, only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the output directly into json; the json representation of SER must be keyed as \"predicted_emotion\", a valid format example: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling. Respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and respond in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result: ",
          "lower_case": "Point out the speaker's feeling and respond in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Point out the speaker's feeling; respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<SPEAKER_EMOTION>\" heading things up. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Label>",
              "inst": "Point out the speaker's feeling; respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"<Emotion_Label>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Point out the speaker's feeling. Respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and respond in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax and represent the result of SER using the key \"emotion_label\" and when in doubt, refer to: {\"emotion_label\": \"(emotional tone)\"}: ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood, delivered in one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the recognized emotion into uppercase text: ",
          "lower_case": "State the speaker's mood; delivered in one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "The mood derived from voice: ",
              "inst": "State the speaker's mood. delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"The mood derived from voice: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "State the speaker's mood; delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"<SENTIMENT>\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the speaker's mood, delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". mark the result using \"*\" before and \"*\" after. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, delivered in one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the result into json-structured data, the json attribute for SER is \"emotional_state\" and here is a sample representation: {\"emotional_state\": \"(emotion)\"}. ",
              "key": "emotional_state",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's mood; in one single word; provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only ",
          "lower_case": "Describe the speaker's mood; in one single word; provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Describe the speaker's mood, in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"<Perceived_Emotion>\" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Mood**",
              "inst": "Describe the speaker's mood. in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And suffix the output with \"**Mood**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's mood; in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result between \"#\" and \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and in one single word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format, structure your json so that SER is labeled as \"emotional_state\"; the correct json format includes: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling, captured in one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text: ",
          "lower_case": "State the speaker's feeling, captured in one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "{EMOTION_LABEL}",
              "inst": "State the speaker's feeling. Captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and preceded by \"{EMOTION_LABEL}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_LABEL*",
              "inst": "State the speaker's feeling, captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"*EMOTION_LABEL*\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's feeling. captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"_\" at the beginning and \"_\" at the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, captured in one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure, the SER result must be identified using the key \"emotion_label\", the appropriate response template: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M014.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. Simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker; simply in one word and return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the emotion label in uppercase form: ",
          "lower_case": "Specify the emotion of the speaker, simply in one word and return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only. ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Specify the emotion of the speaker. simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"**emotion_tag**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Specify the emotion of the speaker, simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"[Predicted_Emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the emotion of the speaker, simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". enclose the result using \"<text>\" at the start and \"</text>\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, simply in one word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container and the SER result must be identified using the key \"emotion_result\", follow this example to structure the data: {\"emotion_result\": \"(emotion)\"}: ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, addressed in one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase ",
          "lower_case": "Identify the speaker's mood. addressed in one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "<EMOTION_TAG>",
              "inst": "Identify the speaker's mood, addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Open it with \"<EMOTION_TAG>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Voice_Emotion>",
              "inst": "Identify the speaker's mood; addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"<Voice_Emotion>\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's mood, addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and addressed in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style; the result corresponding to SER should be mapped to \"predicted_emotion\", maintain the structure like so: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and expressed in one word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase: ",
          "lower_case": "Describe the speaker's mood. Expressed in one word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "[Emotional_Tone]",
              "inst": "Describe the speaker's mood and expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[Emotional_Tone]\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Describe the speaker's mood, expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish everything with a \"*perceived_emotion*\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the speaker's mood. Expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; expressed in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json, attach \"emotion_tag\" to the result of SER in the final output; the json result must follow this form: {\"emotion_tag\": \"(emotional tone)\"} ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker, rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker and rendered in one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion. ",
          "lower_case": "Summarize the emotion of the speaker. rendered in one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Summarize the emotion of the speaker. Rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"Identified emotion category: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Summarize the emotion of the speaker; rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[speaker_emotion]\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the emotion of the speaker. rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"{\" and \"}\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and rendered in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Shape the output using standard json conventions, the SER value should be indexed by \"detected_emotion\", the desired structure is as shown: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M018.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion. just one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase: ",
          "lower_case": "Identify the speaker's emotion, just one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Identify the speaker's emotion. Just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"Perceived speaker mood: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "Identify the speaker's emotion; just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"*speaker_emotion*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the speaker's emotion and just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"'\" at the start and \"'\" at the end: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, just one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data. the SER information must be placed under \"emotion_label\", when in doubt, refer to: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M019.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood. Just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood. Just one word and select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", respond with the recognized emotion written in uppercase only ",
          "lower_case": "Explain the speaker's mood, just one word and select only one: \"happy\", \"sad\", \"angry\" or \"neutral\". Output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Explain the speaker's mood; just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The emotion from the speech: \" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Explain the speaker's mood and just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"{EMOTION_OUTPUT}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Explain the speaker's mood; just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ensure the result is wrapped using \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood and just one word and select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and structure your json so that SER is labeled as \"emotion_label\" and follow this example to structure the data: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood, just use one word, choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the returned emotion has only uppercase characters ",
          "lower_case": "Tell the speaker's mood; just use one word, choose between \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Tell the speaker's mood and just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"Recognized emotional category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_TAG>",
              "inst": "Tell the speaker's mood; just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And concatenate \"<EMOTION_TAG>\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the speaker's mood and just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"{\" in front and \"}\" behind. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; just use one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style, SER must be stored in the json under the key \"emotion\" and maintain the structure like so: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M021.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "in just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. In just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion and in just one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form: ",
          "lower_case": "Describe the speaker's emotion. In just one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "**AFFECT**",
              "inst": "Describe the speaker's emotion, in just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"**AFFECT**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "Describe the speaker's emotion, in just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"[emotional_tone]\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Describe the speaker's emotion. In just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"$\" and \"$\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion and in just one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encode the result as a json object and the SER information must be placed under \"predicted_emotion\" and use the following format in your response: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's mood and presented in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase: ",
          "lower_case": "Summarize the speaker's mood; presented in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". Give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "<Speaker_Emotion>",
              "inst": "Summarize the speaker's mood, presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Introduced by \"<Speaker_Emotion>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Summarize the speaker's mood; presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"*EMOTION_OUTPUT*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's mood; presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Surround the result with the markers \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; presented in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; for the SER entry, use \"emotion_tag\" as its key, the result should be rendered in this format: {\"emotion_tag\": \"(affect)\"}. ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "concluded with one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. Concluded with one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion. Concluded with one word. pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the uppercase emotion result. ",
          "lower_case": "Explain the speaker's emotion. Concluded with one word. Pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Explain the speaker's emotion. Concluded with one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with a lead-in of \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_TAG>",
              "inst": "Explain the speaker's emotion; concluded with one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finalize it by adding \"<EMOTION_TAG>\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Explain the speaker's emotion. Concluded with one word. pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"<\" and suffix it with \">\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion and concluded with one word. Pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure; the output variable for SER is expected to be labeled \"SER\" and follow this example to structure the data: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker; captured in one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters ",
          "lower_case": "Explain the emotion of the speaker and captured in one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the lowercase emotion recognition result: ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Explain the emotion of the speaker; captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"The emotion from the speech: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{SPEAKER_EMOTION}",
              "inst": "Explain the emotion of the speaker and captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{SPEAKER_EMOTION}\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the emotion of the speaker, captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"<start>\" and \"<end>\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and captured in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is formatted as valid json; the designated key for SER should remain \"detected_emotion\"; use the following format in your response: {\"detected_emotion\": \"(emotional tone)\"}. ",
              "key": "detected_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "reply in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Reply in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; reply in one word. choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "State the speaker's mood and reply in one word. choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "*Emotional_Tone*",
              "inst": "State the speaker's mood. Reply in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Introduced by \"*Emotional_Tone*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "State the speaker's mood. Reply in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"{Emotional_State}\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood; reply in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"'\" and suffix it with \"'\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, reply in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation; for the SER entry, use \"emotion_result\" as its key and a demonstration of the expected format: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion. describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion. describe in one word and the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the uppercase version of the detected emotion ",
          "lower_case": "Explain the speaker's emotion. describe in one word and the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "{affect}",
              "inst": "Explain the speaker's emotion; describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"{affect}\" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "Explain the speaker's emotion; describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"{EMOTION_TAG}\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Explain the speaker's emotion, describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; describe in one word and the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is encapsulated in json; record SER using \"emotional_state\" as the key in the json structure; for example: {\"emotional_state\": \"(feeling)\"} ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M027.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker. Restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker, restricted to one word and chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert and return the detected emotion fully uppercase: ",
          "lower_case": "Express the emotion of the speaker; restricted to one word and chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "<PREDICTED_EMOTION>",
              "inst": "Express the emotion of the speaker. Restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<PREDICTED_EMOTION>\" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Express the emotion of the speaker and restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"<EMOTION_RESULT>\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the emotion of the speaker and restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"\"\" before and \"\"\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, restricted to one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". organize the result in a json-style dictionary. use \"emotional_state\" as the designated key for SER; your final output should take the form: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_impro08/Ses05M_impro08_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. Just use one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text: ",
          "lower_case": "Explain the speaker's feeling and just use one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion recognition output entirely lowercase. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Explain the speaker's feeling; just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; headed by \"*sentiment*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*PREDICTED_EMOTION*",
              "inst": "Explain the speaker's feeling and just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And tag the result by adding \"*PREDICTED_EMOTION*\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's feeling and just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, just use one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result within a json structure, write the SER result with \"speaker_emotion\" as its property name, follow this example to structure the data: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling; summarize in one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result ",
          "lower_case": "Tell the speaker's feeling and summarize in one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with the lowercase version of the recognized emotion. ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Tell the speaker's feeling. Summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Recognized affective category: \" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "<PERCEIVED_EMOTION>",
              "inst": "Tell the speaker's feeling and summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"<PERCEIVED_EMOTION>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Tell the speaker's feeling. Summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result between the symbols \"**\" and \"**\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and summarize in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation and use \"emotion\" as the designated key for SER and the data should be formatted like this: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker; mention in one word; select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result ",
          "lower_case": "State the emotion of the speaker and mention in one word; select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "State the emotion of the speaker. Mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Beginning with \"Resulting emotion classification: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**Speaker_Emotion**",
              "inst": "State the emotion of the speaker. mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"**Speaker_Emotion**\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the emotion of the speaker and mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". keep the result enclosed within \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, mention in one word; select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and ensure \"sentiment\" is used as the access key for SER, for example: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood, summarized in one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase. ",
          "lower_case": "State the speaker's mood. Summarized in one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "State the speaker's mood. summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Identified emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Predicted_Emotion>",
              "inst": "State the speaker's mood and summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"<Predicted_Emotion>\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's mood, summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Guard the result with \"<s>\" on the left and \"</s>\" on the right "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, summarized in one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the outcome as a json-compliant object, ensure that SER is stored under the key \"predicted_emotion\". A valid format example: {\"predicted_emotion\": \"(perceived emotion)\"} ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker, reply in one word, output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show only the uppercase emotion output: ",
          "lower_case": "Express the emotion of the speaker, reply in one word, output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Express the emotion of the speaker, reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"The analyzed emotion state: \" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Express the emotion of the speaker and reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"*Predicted_Emotion*\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the emotion of the speaker, reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"$\" and \"$\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Reply in one word, output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string. The field related to SER must be labeled with \"predicted_emotion\" and the expected structure looks like this: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood; revealed in one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase. ",
          "lower_case": "Specify the speaker's mood. Revealed in one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". Return the emotion result as lowercase letters only ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Specify the speaker's mood; revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Recognized sentiment label: \" lead: "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Specify the speaker's mood and revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"**EMOTIONAL_STATE**\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood and revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"<s>\" and \"</s>\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; revealed in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards and \"detected_emotion\" should be the identifier for the SER content, the json representation should be like: {\"detected_emotion\": \"(perceived emotion)\"}: ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "state in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker and state in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker. State in one word; choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER label as uppercase text: ",
          "lower_case": "Tell the emotion of the speaker and state in one word; choose between \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "*Perceived_Emotion*",
              "inst": "Tell the emotion of the speaker. State in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"*Perceived_Emotion*\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Sentiment>",
              "inst": "Tell the emotion of the speaker, state in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"<Sentiment>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Tell the emotion of the speaker and state in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"<\" as the left boundary and \">\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; state in one word; choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string; for the SER entry, use \"speaker_emotion\" as its key and you are expected to return: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F031.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion; chosen in one word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return just the emotion label with no lowercase letters: ",
          "lower_case": "Express the speaker's emotion and chosen in one word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Express the speaker's emotion and chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with the top marked by \"Detected speech feeling: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{perceived_emotion}",
              "inst": "Express the speaker's emotion. chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"{perceived_emotion}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the speaker's emotion; chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"(\" and \")\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; chosen in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure, record SER using \"SER\" as the key in the json structure, keep your output consistent with: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "with a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood, with a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood; with a single word, only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text: ",
          "lower_case": "Point out the speaker's mood, with a single word, only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "<Speaker_Emotion>",
              "inst": "Point out the speaker's mood. With a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<Speaker_Emotion>\" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "**Feeling**",
              "inst": "Point out the speaker's mood, with a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**Feeling**\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's mood; with a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"{\" and \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; with a single word, only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. attach \"predicted_emotion\" to the result of SER in the final output and a demonstration of the expected format: {\"predicted_emotion\": \"(emotion)\"} ",
              "key": "predicted_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_F034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. Using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood, using only one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Point out the speaker's mood, using only one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Point out the speaker's mood; using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Recognized sentiment label: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "Point out the speaker's mood, using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"**SENTIMENT**\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Point out the speaker's mood. Using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"<wrap>\" and closing \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood. using only one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format everything using strict json notation and assign the string \"emotion_output\" as the field name for SER; a proper example would be: {\"emotion_output\": \"(mood)\"}. ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "addressed in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Addressed in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion and addressed in one word. Provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion. ",
          "lower_case": "Summarize the speaker's emotion; addressed in one word. Provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Summarize the speaker's emotion; addressed in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"The emotion from the speech: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Summarize the speaker's emotion; addressed in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow the content with \"*Emotional_Tone*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the speaker's emotion. addressed in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"~\" and \"~\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; addressed in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json; make sure the SER output is labeled \"emotion\"; the formatting guide is: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M002.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. Expressed in one word, only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters. ",
          "lower_case": "Tell the speaker's emotion and expressed in one word, only select from \"happy\", \"sad\", \"angry\" or \"neutral\". output the emotion text fully lowercase. ",
          "prefix": [
            {
              "prefix": "**SENTIMENT**",
              "inst": "Tell the speaker's emotion. expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and launching with \"**SENTIMENT**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**voice_emotion**",
              "inst": "Tell the speaker's emotion, expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finalize it by adding \"**voice_emotion**\" to the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Tell the speaker's emotion. Expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"<wrap>\" and \"</wrap>\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. expressed in one word, only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure, the designated key for SER should remain \"emotion_tag\"; use the following format in your response: {\"emotion_tag\": \"(mood)\"} ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M003.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling and delivered in one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result ",
          "lower_case": "Tell the speaker's feeling, delivered in one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Tell the speaker's feeling, delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"Predicted speaker emotion: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Tell the speaker's feeling; delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"*Emotion*\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's feeling. Delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". mark the result using \"***\" before and \"***\" after: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling, delivered in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert your output into a json-compatible format; make sure the SER output is labeled \"emotion_tag\" and the desired structure is as shown: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "put in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Put in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker, put in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the uppercase emotion result. ",
          "lower_case": "State the emotion of the speaker and put in one word. select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "**EMOTION**",
              "inst": "State the emotion of the speaker. Put in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". fronted by \"**EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "State the emotion of the speaker and put in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"{Emotion_Result}\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the emotion of the speaker, put in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"<wrap>\" and suffix it with \"</wrap>\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; put in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container, format the SER data using \"emotion_result\" as its key name and you can format it as follows: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "with a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; with a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling, with a single word and the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters ",
          "lower_case": "Specify the speaker's feeling, with a single word and the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Specify the speaker's feeling. with a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The classified emotion label: \" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Predicted_Emotion}",
              "inst": "Specify the speaker's feeling; with a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{Predicted_Emotion}\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling; with a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"***\" in the front and \"***\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. With a single word and the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and the result corresponding to SER should be mapped to \"emotion_output\" and a demonstration of the expected format: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M019.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker and captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker. Captured in one word and only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Describe the emotion of the speaker, captured in one word and only choose among \"happy\", \"sad\", \"angry\" or \"neutral\"; detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "<emotion_result>",
              "inst": "Describe the emotion of the speaker. Captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", initiated by \"<emotion_result>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Label}",
              "inst": "Describe the emotion of the speaker. captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and end the result by inserting \"{Emotion_Label}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Describe the emotion of the speaker and captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker. captured in one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax; assign the string \"emotion_result\" as the field name for SER; consider this sample format: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker. mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the emotion of the speaker. Mention in one word; only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the recognized emotion into uppercase text: ",
          "lower_case": "Describe the emotion of the speaker and mention in one word; only choose among \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the returned emotion has only lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Describe the emotion of the speaker. mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Predicted speaker emotion: \" as a heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "{perceived_emotion}",
              "inst": "Describe the emotion of the speaker and mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"{perceived_emotion}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the emotion of the speaker; mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and keep the result enclosed within \"#\" and \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, mention in one word; only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure; the field related to SER must be labeled with \"emotion_output\"; here's how a typical entry should look: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M022.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood; written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood, written in one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". reply with uppercase-only predicted emotion text: ",
          "lower_case": "Describe the speaker's mood; written in one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Describe the speaker's mood. Written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin with \"The emotional tone detected: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**MOOD**",
              "inst": "Describe the speaker's mood, written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"**MOOD**\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Describe the speaker's mood. written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood, written in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions. The key for SER should be \"SER\" respectively and the json result must follow this form: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M031.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker, restricted to one word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label. ",
          "lower_case": "Tell the emotion of the speaker. Restricted to one word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "**Emotion_Tag**",
              "inst": "Tell the emotion of the speaker. Restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". led by \"**Emotion_Tag**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{MOOD}",
              "inst": "Tell the emotion of the speaker. Restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and let \"{MOOD}\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the emotion of the speaker, restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". enclose the result using \"<text>\" at the start and \"</text>\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. restricted to one word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Present the output strictly in json format, the result corresponding to SER should be mapped to \"predicted_emotion\"; when in doubt, refer to: {\"predicted_emotion\": \"(emotional tone)\"} ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M032.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker. Only use one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion. ",
          "lower_case": "Summarize the emotion of the speaker, only use one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Summarize the emotion of the speaker, only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Identified emotion category: \" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Summarize the emotion of the speaker and only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"<emotion_tag>\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the emotion of the speaker, only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encapsulate the result between \"[\" and \"]\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; only use one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container, the key \"detected_emotion\" maps to the result of SER. You can format it as follows: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion. rendered in one word; pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Generate the emotion result only in uppercase characters: ",
          "lower_case": "Identify the speaker's emotion and rendered in one word; pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\". Output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Identify the speaker's emotion; rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<SPEAKER_EMOTION>\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Identify the speaker's emotion. Rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and include \"[VOICE_EMOTION]\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Identify the speaker's emotion and rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, rendered in one word; pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure, SER should appear under the json key \"speaker_emotion\" and one possible output form: {\"speaker_emotion\": \"(emotion)\"} ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker; write in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Identify the emotion of the speaker. Write in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "**sentiment**",
              "inst": "Identify the emotion of the speaker, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"**sentiment**\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "Identify the emotion of the speaker, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"{emotion_result}\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the emotion of the speaker, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"{\" and \"}\" tags "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker, write in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the response using json syntax and format the SER data using \"sentiment\" as its key name; please follow the template: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, defined in one word, the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", deliver the emotion recognition output as uppercase only. ",
          "lower_case": "State the speaker's mood. Defined in one word, the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "State the speaker's mood. defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Speech emotion detected as: \" at its forefront. "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "State the speaker's mood and defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"<predicted_emotion>\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's mood. Defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"<wrap>\" and \"</wrap>\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and defined in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and the field related to SER must be labeled with \"sentiment\", the output should resemble: {\"sentiment\": \"(feeling)\"}: ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood. Addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood; addressed in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; present only the uppercase detected emotion as the result. ",
          "lower_case": "Tell the speaker's mood. Addressed in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; return just the emotion label with no uppercase letters ",
          "prefix": [
            {
              "prefix": "{Emotion_Output}",
              "inst": "Tell the speaker's mood, addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"{Emotion_Output}\" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Tell the speaker's mood, addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"**EMOTIONAL_STATE**\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Tell the speaker's mood; addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<BOS>\" and append \"<EOS>\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; addressed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object, the result corresponding to SER should be mapped to \"SER\"; for reference, your output might look like: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1b/Ses05M_script01_1b_M041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion, written in one word, the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase ",
          "lower_case": "Describe the speaker's emotion. Written in one word, the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Describe the speaker's emotion, written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived emotional tone: \" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Describe the speaker's emotion. Written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"[emotion_result]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's emotion; written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result inside the bounds of \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion. Written in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert the result into a json-compatible structure and use \"detected_emotion\" as the json label for SER. The output should resemble: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker and write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker and write in one word, only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters. ",
          "lower_case": "Specify the emotion of the speaker. Write in one word, only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "<Voice_Emotion>",
              "inst": "Specify the emotion of the speaker. Write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and open by adding \"<Voice_Emotion>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_state*",
              "inst": "Specify the emotion of the speaker, write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and mark the end of the result with \"*emotional_state*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the emotion of the speaker. Write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and write in one word, only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container, attach \"detected_emotion\" to the result of SER in the final output, one possible output form: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F001.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling and declared in one word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase. ",
          "lower_case": "Tell the speaker's feeling; declared in one word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Tell the speaker's feeling. Declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"Detected emotion output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_State>",
              "inst": "Tell the speaker's feeling, declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"<Emotional_State>\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's feeling; declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; put the result within the boundaries of \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; declared in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result. Place the result of SER beneath the key \"emotion\"; the correct json format includes: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, addressed in one word; return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase: ",
          "lower_case": "Identify the speaker's feeling and addressed in one word; return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "<Emotion_Label>",
              "inst": "Identify the speaker's feeling and addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"<Emotion_Label>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Identify the speaker's feeling and addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"*affect*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Identify the speaker's feeling, addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and addressed in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string, for the SER entry, use \"speaker_emotion\" as its key, to illustrate, use: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F005.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's feeling and elaborated in one word and provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make the emotion recognition result all uppercase. ",
          "lower_case": "Identify the speaker's feeling, elaborated in one word and provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "<emotion_tag>",
              "inst": "Identify the speaker's feeling. elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"<emotion_tag>\" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Predicted_Emotion**",
              "inst": "Identify the speaker's feeling, elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure the final part is \"**Predicted_Emotion**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Identify the speaker's feeling; elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is wrapped using \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling. Elaborated in one word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax and format the SER data using \"sentiment\" as its key name, the expected structure looks like this: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F014.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood, rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's mood, rendered in one word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER result in uppercase format only ",
          "lower_case": "Summarize the speaker's mood. Rendered in one word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Summarize the speaker's mood, rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"Recognized feeling is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Summarize the speaker's mood; rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and finalize it by adding \"*VOICE_EMOTION*\" to the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's mood and rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"\"\" and \"\"\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; rendered in one word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". structure the final output as a json object; the result corresponding to SER should be mapped to \"emotion_result\"; a compliant example would appear like: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F018.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "with a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and with a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood, with a single word and provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce the emotion label with all letters in uppercase. ",
          "lower_case": "Specify the speaker's mood, with a single word and provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Specify the speaker's mood, with a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", at the start, put \"[SPEAKER_EMOTION]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "Specify the speaker's mood; with a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow the content with \"<feeling>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Specify the speaker's mood. With a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result with the symbol \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and with a single word and provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Shape the output using standard json conventions; attach \"detected_emotion\" to the result of SER in the final output, please use a format similar to: {\"detected_emotion\": \"(perceived emotion)\"}. ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F021.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "answer in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, answer in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker; answer in one word. Only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form ",
          "lower_case": "Express the emotion of the speaker, answer in one word. Only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Express the emotion of the speaker and answer in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived speaker mood: \" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_label>",
              "inst": "Express the emotion of the speaker and answer in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"<emotion_label>\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the emotion of the speaker and answer in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"<wrap>\" and \"</wrap>\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker, answer in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules; the key for SER should be \"emotion\" respectively. You can format it as follows: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F022.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion. concluded with one word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only: ",
          "lower_case": "State the speaker's emotion, concluded with one word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\"; present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "[emotion_output]",
              "inst": "State the speaker's emotion and concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make \"[emotion_output]\" the first thing in the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "State the speaker's emotion. Concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"{Speaker_Emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's emotion; concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"{\" and \"}\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion. Concluded with one word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object, represent SER in the json with the key \"emotion_label\"; please use a format similar to: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker, clarified in one word and output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure all emotion labels are uppercase: ",
          "lower_case": "Tell the emotion of the speaker and clarified in one word and output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Tell the emotion of the speaker and clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Final emotion classification: \" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "<PREDICTED_EMOTION>",
              "inst": "Tell the emotion of the speaker; clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"<PREDICTED_EMOTION>\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the emotion of the speaker and clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result with the symbol \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and clarified in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the outcome as a json-compliant object, SER should appear under the json key \"speaker_emotion\"; the formatting guide is: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling, rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling. rendered in one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Tell the speaker's feeling. Rendered in one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\". Detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Tell the speaker's feeling and rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<SPEAKER_EMOTION>\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_STATE>",
              "inst": "Tell the speaker's feeling. Rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"<EMOTIONAL_STATE>\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the speaker's feeling. Rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"{\" at the start and \"}\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and rendered in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure, write the SER result with \"emotional_state\" as its property name. Your result should mirror this: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F025.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "summarized in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and summarized in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker; summarized in one word. Only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion: ",
          "lower_case": "Summarize the emotion of the speaker; summarized in one word. Only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\"; give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Summarize the emotion of the speaker and summarized in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin the output using \"[VOICE_EMOTION]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Summarize the emotion of the speaker. Summarized in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"[emotion_result]\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the emotion of the speaker. summarized in one word. only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"<s>\" and closing \"</s>\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker. Summarized in one word. Only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format and SER should appear under the json key \"sentiment\"; output a json string such as: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's feeling; named in one word; answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output only the emotion label in uppercase form ",
          "lower_case": "Explain the speaker's feeling. Named in one word; answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters: ",
          "prefix": [
            {
              "prefix": "Perceived speaker mood: ",
              "inst": "Explain the speaker's feeling. Named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; START WITH \"Perceived speaker mood: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Tag]",
              "inst": "Explain the speaker's feeling. Named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"[Emotion_Tag]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's feeling and named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"$\" and suffix it with \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, named in one word; answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". present the output strictly in json format. For the SER entry, use \"speaker_emotion\" as its key, the desired structure is as shown: {\"speaker_emotion\": \"(emotional tone)\"}: ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F032.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling and just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's feeling; just use one word and return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters. ",
          "lower_case": "Explain the speaker's feeling. Just use one word and return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "<EMOTION_OUTPUT>",
              "inst": "Explain the speaker's feeling, just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"<EMOTION_OUTPUT>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**Mood**",
              "inst": "Explain the speaker's feeling, just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and put \"**Mood**\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's feeling. Just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling and just use one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax, the key \"emotion_result\" maps to the result of SER. The output must match this structure: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling. Concluded with one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase characters in the emotion label: ",
          "lower_case": "Summarize the speaker's feeling. Concluded with one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "**emotion_result**",
              "inst": "Summarize the speaker's feeling. concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"**emotion_result**\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Summarize the speaker's feeling, concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**emotion_result**\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the speaker's feeling; concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result inside a pair of \"#\" and \"#\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, concluded with one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format, ensure \"emotion\" is used as the access key for SER and an illustration of the format would be: {\"emotion\": \"(emotion)\"}. ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_F036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in one single word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and in one single word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling, in one single word. the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion ",
          "lower_case": "Express the speaker's feeling. In one single word. The selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "[emotion]",
              "inst": "Express the speaker's feeling, in one single word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and by preceding all with \"[emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_result*",
              "inst": "Express the speaker's feeling and in one single word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"*emotion_result*\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's feeling. in one single word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the result between \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. In one single word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object; when formatting, associate SER with \"speaker_emotion\", the output must match this structure: {\"speaker_emotion\": \"(emotional tone)\"} ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M004.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "in a single word. selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion. in a single word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion, in a single word. Selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER output as uppercase text only ",
          "lower_case": "Specify the speaker's emotion, in a single word. Selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "{MOOD}",
              "inst": "Specify the speaker's emotion. In a single word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"{MOOD}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Specify the speaker's emotion; in a single word. selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{Emotion_Result}\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's emotion; in a single word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"#\" before the result and \"#\" after it. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. In a single word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards. include the SER output under the key \"SER\". please use a format similar to: {\"SER\": \"(emotion)\"}. ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M011.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "defined in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Defined in one word. choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; defined in one word. choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER classification in uppercase letters ",
          "lower_case": "State the speaker's mood, defined in one word. Choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "State the speaker's mood. Defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", by preceding all with \"{Speaker_Emotion}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<AFFECT>",
              "inst": "State the speaker's mood. Defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"<AFFECT>\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's mood and defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"<wrap>\" before and \"</wrap>\" after. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Defined in one word. Choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions; the output variable for SER is expected to be labeled \"emotion_label\". The data should be formatted like this: {\"emotion_label\": \"(emotion)\"}. ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M013.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in only one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; in only one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; in only one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with the uppercase version of the detected emotion. ",
          "lower_case": "Express the speaker's mood. in only one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Express the speaker's mood, in only one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"The speaker's emotion is: \" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Express the speaker's mood; in only one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"<EMOTIONAL_TONE>\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's mood; in only one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"<start>\" and \"<end>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, in only one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style and the result corresponding to SER should be mapped to \"emotion\", the formatting guide is: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's mood and reply in one word and output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text ",
          "lower_case": "State the speaker's mood; reply in one word and output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "State the speaker's mood and reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"The classified emotion label: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<perceived_emotion>",
              "inst": "State the speaker's mood, reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"<perceived_emotion>\" to the tail. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's mood, reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"$\" before the result and \"$\" after it "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, reply in one word and output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format; the key \"emotion_label\" maps to the result of SER and output a json string such as: {\"emotion_label\": \"(affect)\"}: ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion, captured in one word; choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". show the detected emotion fully in uppercase characters ",
          "lower_case": "Specify the speaker's emotion. captured in one word; choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\" and make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "*emotion_label*",
              "inst": "Specify the speaker's emotion, captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"*emotion_label*\" at the very top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Mood*",
              "inst": "Specify the speaker's emotion, captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"*Mood*\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's emotion; captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"#\" and append \"#\" to the result "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion. Captured in one word; choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format everything using strict json notation, SER should appear under the json key \"emotion_result\" and the result should be rendered in this format: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "in only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and in only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion and in only one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase. ",
          "lower_case": "Summarize the speaker's emotion and in only one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "Summarize the speaker's emotion, in only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starts with \"<EMOTIONAL_TONE>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**mood**",
              "inst": "Summarize the speaker's emotion and in only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"**mood**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's emotion; in only one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"<\" and suffix it with \">\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. In only one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout. record SER using \"emotional_state\" as the key in the json structure; format your response exactly as: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M021.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling and in exactly one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form: ",
          "lower_case": "Specify the speaker's feeling. In exactly one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\"; return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Specify the speaker's feeling and in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"Predicted mood label: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[MOOD]",
              "inst": "Specify the speaker's feeling; in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"[MOOD]\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the speaker's feeling and in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling, in exactly one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style. use \"emotion_output\" as the json label for SER and format your response exactly as: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M022.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood, kept to one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase ",
          "lower_case": "Specify the speaker's mood. Kept to one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\". generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Specify the speaker's mood, kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"Recognized emotional category: \" at the front: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_output}",
              "inst": "Specify the speaker's mood, kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{emotion_output}\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's mood; kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"*\" on the left and \"*\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and kept to one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", express the final output in proper json and when structuring the result, use \"emotion_output\" for the SER section, a compliant example would appear like: {\"emotion_output\": \"(feeling)\"}: ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M023.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's feelings and write in one word, pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the emotion label in uppercase form ",
          "lower_case": "Describe the speaker's feelings; write in one word, pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "**predicted_emotion**",
              "inst": "Describe the speaker's feelings; write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; launching with \"**predicted_emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Describe the speaker's feelings and write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"*mood*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Describe the speaker's feelings. write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bind the result using \"<s>\" and \"</s>\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings; write in one word, pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encode the result as a json object and ensure \"speaker_emotion\" is used as the access key for SER; a proper example would be: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "state in one word. selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood. state in one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood; state in one word. Selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure all emotion labels are uppercase: ",
          "lower_case": "Specify the speaker's mood and state in one word. Selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Specify the speaker's mood; state in one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and at the start, put \"Classification result (emotion): \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "Specify the speaker's mood. State in one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and label the end of the result with \"[Mood]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Specify the speaker's mood, state in one word. selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix the result with \"_\" and suffix it with \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and state in one word. Selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output using a clean and valid json layout. assign \"sentiment\" as the property key for SER related content and you are expected to return: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M028.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "clarified in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. Clarified in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood. Clarified in one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the SER output entirely uppercase ",
          "lower_case": "Point out the speaker's mood, clarified in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "[EMOTION]",
              "inst": "Point out the speaker's mood and clarified in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Commence with \"[EMOTION]\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Point out the speaker's mood. clarified in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{Emotional_State}\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Point out the speaker's mood; clarified in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap it by placing \"{\" in front and \"}\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood. clarified in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". show the result using key-value pairs in json. Bind the task SER to the key \"emotion_output\"; the formatting guide is: {\"emotion_output\": \"(mood)\"} ",
              "key": "emotion_output",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M032.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker; explained in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". reply with uppercase-only predicted emotion text. ",
          "lower_case": "Identify the emotion of the speaker. Explained in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "**SPEAKER_EMOTION**",
              "inst": "Identify the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**SPEAKER_EMOTION**\" at the very beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**SENTIMENT**",
              "inst": "Identify the emotion of the speaker, explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"**SENTIMENT**\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"*\" to the beginning and \"*\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format, the json representation of SER must be keyed as \"emotion\" and this is an appropriate format: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion; delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion. delivered in one word, must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format ",
          "lower_case": "Identify the speaker's emotion, delivered in one word, must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "{emotional_state}",
              "inst": "Identify the speaker's emotion, delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{emotional_state}\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_OUTPUT**",
              "inst": "Identify the speaker's emotion, delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"**EMOTION_OUTPUT**\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion and delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"_\" and \"_\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, delivered in one word, must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style. the SER result must be identified using the key \"SER\". Keep your output consistent with: {\"SER\": \"(perceived emotion)\"}: ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "with one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker; with one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker. With one single word and output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER output as uppercase text only. ",
          "lower_case": "Explain the emotion of the speaker and with one single word and output must be \"happy\", \"sad\", \"angry\" or \"neutral\". convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Explain the emotion of the speaker. With one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; begin it with \"Final predicted emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Explain the emotion of the speaker, with one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and concatenate \"[Predicted_Emotion]\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the emotion of the speaker, with one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and with one single word and output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules, ensure that SER is stored under the key \"emotional_state\" and use the following format in your response: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker, explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker; explained in one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters: ",
          "lower_case": "State the emotion of the speaker and explained in one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "Speech emotion classification: ",
              "inst": "State the emotion of the speaker; explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Speech emotion classification: \" as the prefix "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "State the emotion of the speaker and explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"[emotion_result]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the emotion of the speaker and explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". use \"#\" and \"#\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; explained in one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules, encode the SER content using \"sentiment\" as its identifier and the desired structure is as shown: {\"sentiment\": \"(perceived emotion)\"}. ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and declared in one word and answer with one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters: ",
          "lower_case": "State the speaker's emotion, declared in one word and answer with one option from \"happy\", \"sad\", \"angry\" or \"neutral\", return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "State the speaker's emotion; declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Classification result (emotion): \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION**",
              "inst": "State the speaker's emotion; declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**EMOTION**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's emotion. Declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap it by placing \"<\" in front and \">\" behind: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, declared in one word and answer with one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is formatted as valid json. Allocate the key \"SER\" for the data derived from SER; please use a format similar to: {\"SER\": \"(emotional tone)\"}: ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_1/Ses05M_script01_1_M037.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "with one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and with one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker and with one single word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Summarize the emotion of the speaker, with one single word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "**Affect**",
              "inst": "Summarize the emotion of the speaker. With one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**Affect**\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_OUTPUT}",
              "inst": "Summarize the emotion of the speaker; with one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"{EMOTION_OUTPUT}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Summarize the emotion of the speaker and with one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"#\" and closing \"#\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker, with one single word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json, record SER using \"speaker_emotion\" as the key in the json structure; when in doubt, refer to: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion; revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion. Revealed in one word, return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output the SER label as uppercase text: ",
          "lower_case": "Tell the speaker's emotion and revealed in one word, return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\", make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "**PERCEIVED_EMOTION**",
              "inst": "Tell the speaker's emotion; revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starting with \"**PERCEIVED_EMOTION**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{AFFECT}",
              "inst": "Tell the speaker's emotion; revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"{AFFECT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's emotion and revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result inside a pair of \"\"\" and \"\"\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion; revealed in one word, return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert your output into a json-compatible format; encode the SER content using \"sentiment\" as its identifier; for reference, your output might look like: {\"sentiment\": \"(affect)\"} ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood, in precisely one word; only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". output the SER result in uppercase format only ",
          "lower_case": "Explain the speaker's mood; in precisely one word; only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Explain the speaker's mood, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Detected affective state: \" introduced first: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Perceived_Emotion*",
              "inst": "Explain the speaker's mood, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and concatenate \"*Perceived_Emotion*\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's mood and in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"<s>\" and \"</s>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, in precisely one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container, the designated key for SER should remain \"predicted_emotion\"; the correct json format includes: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_F005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood. Respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood, respond in one word and provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only ",
          "lower_case": "Tell the speaker's mood. Respond in one word and provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", generate the emotion output only in lowercase characters. ",
          "prefix": [
            {
              "prefix": "<Mood>",
              "inst": "Tell the speaker's mood. Respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"<Mood>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "Tell the speaker's mood. Respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And include \"**emotion_tag**\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the speaker's mood, respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. Respond in one word and provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format. ensure \"sentiment\" is used as the access key for SER. the formatting guide is: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_F015.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion; chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and chosen in one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase. ",
          "lower_case": "State the speaker's emotion. Chosen in one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "*emotional_state*",
              "inst": "State the speaker's emotion and chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*emotional_state*\" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Mood]",
              "inst": "State the speaker's emotion and chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"[Mood]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "State the speaker's emotion and chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; surround the result with the markers \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, chosen in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; generate a json-formatted version of the result and the SER value should be indexed by \"emotion\", use the following format in your response: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_F017.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "write in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, write in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood; write in one word. Only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only. ",
          "lower_case": "Tell the speaker's mood; write in one word. only choose among \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Tell the speaker's mood; write in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". At the start, put \"Recognized sentiment label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_RESULT*",
              "inst": "Tell the speaker's mood; write in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure the final part is \"*EMOTION_RESULT*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the speaker's mood; write in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Embed the result between \"{\" and \"}\" markers "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; write in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your result exactly as a json object. The json attribute for SER is \"emotion_tag\", the desired structure is as shown: {\"emotion_tag\": \"(mood)\"} ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_M000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "in precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. in precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling, in precisely one word; the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase ",
          "lower_case": "Identify the speaker's feeling; in precisely one word; the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\" and make the emotion recognition result all lowercase ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Identify the speaker's feeling; in precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Speech tone analysis result: \" as the heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_STATE}",
              "inst": "Identify the speaker's feeling; in precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{EMOTIONAL_STATE}\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's feeling; in precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling. In precisely one word; the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation. The key \"emotional_state\" maps to the result of SER. the output should resemble: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_M001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "in a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and in a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion; in a single word; the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters ",
          "lower_case": "Tell the speaker's emotion. In a single word; the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Tell the speaker's emotion and in a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"Predicted sentiment state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "Tell the speaker's emotion, in a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"<feeling>\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's emotion; in a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". guard the result with \"<text>\" on the left and \"</text>\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion. In a single word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout; the field related to SER must be labeled with \"emotional_state\"; to illustrate, use: {\"emotional_state\": \"(perceived emotion)\"}. ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; only use one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text. ",
          "lower_case": "Express the speaker's mood; only use one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Express the speaker's mood, only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Emotion recognized from speech: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Express the speaker's mood and only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"{SENTIMENT}\" as the last element. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's mood, only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"<text>\" and \"</text>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Organize your output cleanly in json format. SER should appear under the json key \"detected_emotion\". For reference, your output might look like: {\"detected_emotion\": \"(affect)\"} ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_M015.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood, rendered in one word; the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". show the detected emotion fully in uppercase characters: ",
          "lower_case": "Express the speaker's mood; rendered in one word; the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase ",
          "prefix": [
            {
              "prefix": "<EMOTION_RESULT>",
              "inst": "Express the speaker's mood; rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed by \"<EMOTION_RESULT>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{SPEAKER_EMOTION}",
              "inst": "Express the speaker's mood; rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And include \"{SPEAKER_EMOTION}\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's mood. rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"<text>\" and \"</text>\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. Rendered in one word; the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format; represent SER in the json with the key \"emotional_state\". an illustration of the format would be: {\"emotional_state\": \"(feeling)\"}. ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_2/Ses05M_script01_2_M016.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling; summarize in one word, must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", show the detected emotion fully in uppercase characters: ",
          "lower_case": "Explain the speaker's feeling, summarize in one word, must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_STATE**",
              "inst": "Explain the speaker's feeling; summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"**EMOTIONAL_STATE**\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Output*",
              "inst": "Explain the speaker's feeling; summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*Emotion_Output*\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's feeling and summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"<text>\" and \"</text>\" to bracket the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling, summarize in one word, must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json, use \"emotion_result\" as the json label for SER, output a json string such as: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. Chosen in one word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Specify the speaker's feeling and chosen in one word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "**perceived_emotion**",
              "inst": "Specify the speaker's feeling; chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**perceived_emotion**\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**mood**",
              "inst": "Specify the speaker's feeling; chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"**mood**\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's feeling; chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. Chosen in one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your answer following json standards; link the key \"detected_emotion\" directly to the SER data, the json object should be in this pattern: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "only in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker; only in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker. only in one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters ",
          "lower_case": "Identify the emotion of the speaker and only in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Identify the emotion of the speaker; only in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"The emotion from the speech: \" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_TAG]",
              "inst": "Identify the emotion of the speaker, only in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"[EMOTION_TAG]\" at the conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Identify the emotion of the speaker, only in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<BOS>\" at the beginning and \"<EOS>\" at the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and only in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary; ensure \"speaker_emotion\" is used as the access key for SER. for example: {\"speaker_emotion\": \"(perceived emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; articulated in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Summarize the speaker's feeling. Articulated in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\"; generate the emotion output only in lowercase characters: ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Summarize the speaker's feeling; articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Resulting emotion classification: \" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotional_State}",
              "inst": "Summarize the speaker's feeling and articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{Emotional_State}\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's feeling, articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"<text>\" as prefix and \"</text>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, articulated in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make the output conform to json formatting, ensure \"sentiment\" is used as the access key for SER, the result should be rendered in this format: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "respond in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood. Respond in one word. output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood and respond in one word. output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the uppercase version of the detected emotion. ",
          "lower_case": "Tell the speaker's mood; respond in one word. output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "Tell the speaker's mood, respond in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"*emotion_result*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Tell the speaker's mood, respond in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{feeling}\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Tell the speaker's mood, respond in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"<start>\" to the beginning and \"<end>\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and respond in one word. Output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules; the SER result must be identified using the key \"sentiment\" and keep your output consistent with: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F007.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "in precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling; in precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling and in precisely one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase text for the predicted emotion. ",
          "lower_case": "Summarize the speaker's feeling; in precisely one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "{Speaker_Emotion}",
              "inst": "Summarize the speaker's feeling. in precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"{Speaker_Emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Tag*",
              "inst": "Summarize the speaker's feeling. In precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"*Emotion_Tag*\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Summarize the speaker's feeling and in precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"<text>\" and \"</text>\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, in precisely one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encode the result as a json object and structure your json so that SER is labeled as \"emotion\", format your response exactly as: {\"emotion\": \"(affect)\"} ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling. Chosen in one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". present only the uppercase detected emotion as the result ",
          "lower_case": "State the speaker's feeling. chosen in one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "**Voice_Emotion**",
              "inst": "State the speaker's feeling. Chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"**Voice_Emotion**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "State the speaker's feeling and chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And complete the result using \"{emotion_result}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "State the speaker's feeling; chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"{\" and \"}\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; chosen in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and organize your output cleanly in json format; include the SER output under the key \"emotion_label\"; the json representation should be like: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F010.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling, summarize in one word, select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", only output the emotion in uppercase format. ",
          "lower_case": "State the speaker's feeling. summarize in one word, select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "State the speaker's feeling; summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Final predicted emotion: \" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "State the speaker's feeling; summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"{Speaker_Emotion}\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "State the speaker's feeling. Summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and tag the result with opening \"<wrap>\" and closing \"</wrap>\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. Summarize in one word, select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and present the output strictly in json format; for the SER entry, use \"SER\" as its key and to illustrate, use: {\"SER\": \"(emotional tone)\"} ",
              "key": "SER",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling, put in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters. ",
          "lower_case": "Summarize the speaker's feeling, put in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Summarize the speaker's feeling and put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and commence with \"Predicted speaker emotion: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**MOOD**",
              "inst": "Summarize the speaker's feeling. Put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**MOOD**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's feeling and put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; mark the result using \"<start>\" before and \"<end>\" after "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling; put in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Provide the answer inside a json container and represent SER in the json with the key \"emotional_state\"; the json result must follow this form: {\"emotional_state\": \"(perceived emotion)\"}: ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "state in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and state in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling. State in one word; only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Express the speaker's feeling, state in one word; only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\". Show the emotion label fully in lowercase characters. ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Express the speaker's feeling. State in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"Predicted emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_result**",
              "inst": "Express the speaker's feeling, state in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"**emotion_result**\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's feeling. state in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. state in one word; only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json; for the SER entry, use \"emotion_result\" as its key. Keep your output consistent with: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling. Written in one word, pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters ",
          "lower_case": "Identify the speaker's feeling. Written in one word, pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "*Perceived_Emotion*",
              "inst": "Identify the speaker's feeling and written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*Perceived_Emotion*\" as the prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**AFFECT**",
              "inst": "Identify the speaker's feeling and written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"**AFFECT**\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's feeling; written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result fully with \"<text>\" as the left boundary and \"</text>\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and written in one word, pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container. \"emotion\" should be the identifier for the SER content. One possible output form: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "in a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, in a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's emotion and in a single word; the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters ",
          "lower_case": "Identify the speaker's emotion, in a single word; the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "<speaker_emotion>",
              "inst": "Identify the speaker's emotion, in a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<speaker_emotion>\" coming first: "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "Identify the speaker's emotion and in a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*AFFECT*\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Identify the speaker's emotion. In a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"{\" and \"}\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion. In a single word; the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting and make sure the SER output is labeled \"predicted_emotion\". Output a json string such as: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "in a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. In a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood and in a single word; select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase ",
          "lower_case": "Summarize the speaker's mood, in a single word; select only one: \"happy\", \"sad\", \"angry\" or \"neutral\"; deliver the emotion output as lowercase only. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Summarize the speaker's mood. in a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Emotion recognized from speech: \" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Summarize the speaker's mood; in a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"{feeling}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's mood; in a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood, in a single word; select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style and assign \"predicted_emotion\" as the property key for SER related content and to illustrate, use: {\"predicted_emotion\": \"(feeling)\"}. ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "with a single word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. With a single word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood; with a single word. The answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert and return the detected emotion fully uppercase ",
          "lower_case": "Express the speaker's mood; with a single word. The answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "{VOICE_EMOTION}",
              "inst": "Express the speaker's mood. With a single word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"{VOICE_EMOTION}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*SENTIMENT*",
              "inst": "Express the speaker's mood, with a single word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"*SENTIMENT*\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the speaker's mood. With a single word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the content using \"(\" and \")\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and with a single word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure; format the SER data using \"emotion_label\" as its key name, the output should resemble: {\"emotion_label\": \"(mood)\"} ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. Chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion and chosen in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion. ",
          "lower_case": "Point out the speaker's emotion. Chosen in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the detected emotion entirely to lowercase ",
          "prefix": [
            {
              "prefix": "*Predicted_Emotion*",
              "inst": "Point out the speaker's emotion; chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", START WITH \"*Predicted_Emotion*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTIONAL_STATE}",
              "inst": "Point out the speaker's emotion; chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{EMOTIONAL_STATE}\" at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Point out the speaker's emotion, chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"~\" to the beginning and \"~\" to the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion, chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout, assign \"speaker_emotion\" as the property key for SER related content. Output a json string such as: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings and captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; captured in one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase characters in the emotion label ",
          "lower_case": "Describe the speaker's feelings and captured in one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\" and convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "Resulting emotion classification: ",
              "inst": "Describe the speaker's feelings and captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; starting with \"Resulting emotion classification: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_State>",
              "inst": "Describe the speaker's feelings; captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"<Emotional_State>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Describe the speaker's feelings. Captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the result between \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, captured in one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object, the SER result must be identified using the key \"emotion\", the formatting guide is: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion. state it in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Identify the speaker's emotion, state it in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Identify the speaker's emotion and state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"Predicted mood label: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Identify the speaker's emotion; state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And keep \"*mood*\" as the final annotation: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Identify the speaker's emotion, state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert the result inside the brackets \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; state it in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Serialize the result into json form and the result corresponding to SER should be mapped to \"emotion_result\" and the desired structure is as shown: {\"emotion_result\": \"(feeling)\"} ",
              "key": "emotion_result",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F024.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood; call it in one word and the selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion output in uppercase without punctuation changes ",
          "lower_case": "Tell the speaker's mood, call it in one word and the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "**mood**",
              "inst": "Tell the speaker's mood. call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**mood**\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "{PERCEIVED_EMOTION}",
              "inst": "Tell the speaker's mood; call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"{PERCEIVED_EMOTION}\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the speaker's mood and call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", attach \"\"\" to the beginning and \"\"\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; call it in one word and the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Render the result into json-structured data; link the key \"emotion\" directly to the SER data and refer to this sample output: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "state it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. State it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling and state it in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the output emotion label contains only uppercase letters: ",
          "lower_case": "Express the speaker's feeling and state it in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". generate the SER result in lowercase text only: ",
          "prefix": [
            {
              "prefix": "**emotion_tag**",
              "inst": "Express the speaker's feeling and state it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and led by \"**emotion_tag**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "**sentiment**",
              "inst": "Express the speaker's feeling. state it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and let \"**sentiment**\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Express the speaker's feeling, state it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", set \"[\" and \"]\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, state it in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure. The SER value should be indexed by \"emotion_label\". Here is a sample representation: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_F027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "simply in one word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and simply in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, simply in one word. Restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Specify the speaker's mood; simply in one word. Restricted to \"happy\", \"sad\", \"angry\" or \"neutral\"; give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Specify the speaker's mood; simply in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"Perceived emotional tone: \" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Specify the speaker's mood and simply in one word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"*VOICE_EMOTION*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's mood and simply in one word. restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". wrap the result fully with \"***\" as the left boundary and \"***\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, simply in one word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format and assign \"emotion_output\" as the property key for SER related content, the formatting guide is: {\"emotion_output\": \"(perceived emotion)\"}. ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "summed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, summed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling, summed in one word. return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the SER classification in uppercase letters: ",
          "lower_case": "Specify the speaker's feeling, summed in one word. return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure the returned emotion has only lowercase characters: ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Specify the speaker's feeling; summed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{emotion_tag}\" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Output}",
              "inst": "Specify the speaker's feeling, summed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and terminate the result using \"{Emotion_Output}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling, summed in one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and insert the result inside the brackets \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and summed in one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the output in a structured json layout. Use \"emotion_result\" as the designated key for SER and here's how a typical entry should look: {\"emotion_result\": \"(affect)\"}: ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood; restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; restricted to one word. Choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion output in uppercase without punctuation changes: ",
          "lower_case": "Specify the speaker's mood and restricted to one word. Choose between \"happy\", \"sad\", \"angry\" or \"neutral\" and return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "The analyzed emotion state: ",
              "inst": "Specify the speaker's mood and restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Having \"The analyzed emotion state: \" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "Specify the speaker's mood and restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"**affect**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Specify the speaker's mood. Restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. Restricted to one word. Choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string. The label \"emotion_tag\" must correspond to the SER section, a correct formatting instance is: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker, in exactly one word, the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase ",
          "lower_case": "Explain the emotion of the speaker and in exactly one word, the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "<Perceived_Emotion>",
              "inst": "Explain the emotion of the speaker; in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". using \"<Perceived_Emotion>\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Sentiment}",
              "inst": "Explain the emotion of the speaker, in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; suffixed with \"{Sentiment}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Explain the emotion of the speaker, in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<BOS>\" before and \"<EOS>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, in exactly one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style and \"emotion_result\" should be the identifier for the SER content; to illustrate, use: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "chosen in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker; chosen in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker; chosen in one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters ",
          "lower_case": "State the emotion of the speaker. Chosen in one word. the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "**EMOTION_LABEL**",
              "inst": "State the emotion of the speaker, chosen in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"**EMOTION_LABEL**\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "<SENTIMENT>",
              "inst": "State the emotion of the speaker, chosen in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish everything with a \"<SENTIMENT>\" tag: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "State the emotion of the speaker, chosen in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bracket the result inside \"**\" and \"**\" "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and chosen in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards, the field related to SER must be labeled with \"emotional_state\" and the data should be formatted like this: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling. defined in one word, choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the detected result contains only uppercase characters ",
          "lower_case": "Specify the speaker's feeling, defined in one word, choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_STATE>",
              "inst": "Specify the speaker's feeling; defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"<EMOTIONAL_STATE>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Perceived_Emotion}",
              "inst": "Specify the speaker's feeling, defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"{Perceived_Emotion}\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's feeling, defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is wrapped using \"~\" and \"~\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and defined in one word, choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize your output cleanly in json format. the label \"emotion\" must correspond to the SER section; output a json string such as: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's emotion and concluded with one word and select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present only the uppercase detected emotion as the result ",
          "lower_case": "Explain the speaker's emotion. concluded with one word and select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Make the emotion recognition result all lowercase: ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Explain the speaker's emotion, concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prepended with \"Detected affective state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Label**",
              "inst": "Explain the speaker's emotion; concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"**Emotion_Label**\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's emotion. Concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"<s>\" in the front and \"</s>\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Concluded with one word and select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style and the SER result must be identified using the key \"sentiment\" and here is a sample representation: {\"sentiment\": \"(feeling)\"} ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; defined in one word; output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". output only the emotion label in uppercase form. ",
          "lower_case": "Explain the speaker's emotion; defined in one word; output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\", return the SER output as lowercase text only. ",
          "prefix": [
            {
              "prefix": "Detected speech feeling: ",
              "inst": "Explain the speaker's emotion; defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"Detected speech feeling: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<SPEAKER_EMOTION>",
              "inst": "Explain the speaker's emotion and defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"<SPEAKER_EMOTION>\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the speaker's emotion. Defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Box the result using \"<text>\" and \"</text>\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion, defined in one word; output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". structure the final output as a json object, represent the result of SER using the key \"emotional_state\" and a correct formatting instance is: {\"emotional_state\": \"(emotional tone)\"}. ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M020.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "explained in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion and explained in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's emotion and explained in one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only: ",
          "lower_case": "Specify the speaker's emotion, explained in one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Specify the speaker's emotion and explained in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Speaker_Emotion*\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_tag**",
              "inst": "Specify the speaker's emotion; explained in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish everything with a \"**emotion_tag**\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's emotion, explained in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encapsulate the output between \"<\" and \">\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, explained in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and generate a json-formatted version of the result; attach \"emotion_result\" to the result of SER in the final output and here's how a typical entry should look: {\"emotion_result\": \"(perceived emotion)\"}. ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M021.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker. kept to one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the detected emotion entirely in uppercase ",
          "lower_case": "State the emotion of the speaker; kept to one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "State the emotion of the speaker. Kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"[VOICE_EMOTION]\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "State the emotion of the speaker and kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and terminate the result using \"{SENTIMENT}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the emotion of the speaker. Kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the entire result using \"***\" as prefix and \"***\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and kept to one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; serialize the result into json form. record SER using \"emotional_state\" as the key in the json structure and here's how a typical entry should look: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M022.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, delivered in one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide just the uppercase version of the emotion: ",
          "lower_case": "Identify the speaker's mood, delivered in one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Identify the speaker's mood, delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Speech emotion detected as: \" as the heading "
            }
          ],
          "suffix": [
            {
              "suffix": "*MOOD*",
              "inst": "Identify the speaker's mood and delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"*MOOD*\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's mood; delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; enclose the result using \"<text>\" at the start and \"</text>\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and delivered in one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure and the key \"emotion_tag\" maps to the result of SER. A compliant example would appear like: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "summarize in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Summarize in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker. summarize in one word. Only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Identify the emotion of the speaker; summarize in one word. Only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Identify the emotion of the speaker, summarize in one word. only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make \"Predicted emotional tone: \" the first thing in the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Identify the emotion of the speaker, summarize in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"<Feeling>\" as a suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Identify the emotion of the speaker. summarize in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Bracket the result inside \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker; summarize in one word. Only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return it structured as a json object; place the result of SER beneath the key \"predicted_emotion\"; consider this sample format: {\"predicted_emotion\": \"(mood)\"} ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M025.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "written in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker, written in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker, written in one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase: ",
          "lower_case": "Specify the emotion of the speaker and written in one word. Return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "Speaker's affective state: ",
              "inst": "Specify the emotion of the speaker. written in one word. return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Speaker's affective state: \" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Specify the emotion of the speaker, written in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"*EMOTION_OUTPUT*\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Specify the emotion of the speaker, written in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"'\" before and \"'\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker. Written in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, when structuring the result, use \"speaker_emotion\" for the SER section. Refer to this sample output: {\"speaker_emotion\": \"(feeling)\"}. ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "conveyed in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion and conveyed in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion, conveyed in one word. The emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion. ",
          "lower_case": "Explain the speaker's emotion. conveyed in one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Explain the speaker's emotion. Conveyed in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with the top marked by \"Emotion category identified: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Affect*",
              "inst": "Explain the speaker's emotion and conveyed in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"*Affect*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Explain the speaker's emotion; conveyed in one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion. Conveyed in one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert your output into a json-compatible format. Use \"SER\" as the designated key for SER. Please follow the template: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood, reply in one word, the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the recognized emotion in all uppercase letters. ",
          "lower_case": "Identify the speaker's mood, reply in one word, the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\" and produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "*Emotion_Output*",
              "inst": "Identify the speaker's mood and reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*Emotion_Output*\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Identify the speaker's mood. reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{affect}\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Identify the speaker's mood; reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"~\" to the beginning and \"~\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and reply in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. Use \"SER\" as the designated key for SER and the data should be formatted like this: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood. Describe in one word, output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters ",
          "lower_case": "Specify the speaker's mood, describe in one word, output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "{Voice_Emotion}",
              "inst": "Specify the speaker's mood. describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Voice_Emotion}\" set at the top. "
            }
          ],
          "suffix": [
            {
              "suffix": "**VOICE_EMOTION**",
              "inst": "Specify the speaker's mood; describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"**VOICE_EMOTION**\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood and describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood; describe in one word, output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output the information using json formatting rules; \"emotion_label\" should be the identifier for the SER content. An illustration of the format would be: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M030.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion, reply in one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Identify the speaker's emotion and reply in one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with lowercase-only emotion text. ",
          "prefix": [
            {
              "prefix": "Final predicted emotion: ",
              "inst": "Identify the speaker's emotion; reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with a lead-in of \"Final predicted emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_OUTPUT**",
              "inst": "Identify the speaker's emotion. Reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**EMOTION_OUTPUT**\" at the very end "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Identify the speaker's emotion; reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"<\" and \">\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; reply in one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data; the key \"detected_emotion\" maps to the result of SER, the appropriate response template: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M033.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker. Concluded with one word, choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Identify the emotion of the speaker. Concluded with one word, choose between \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "**emotion**",
              "inst": "Identify the emotion of the speaker; concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"**emotion**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "{SPEAKER_EMOTION}",
              "inst": "Identify the emotion of the speaker; concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"{SPEAKER_EMOTION}\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Identify the emotion of the speaker. Concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"<\" and \">\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and concluded with one word, choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation and format the SER data using \"emotion_tag\" as its key name and output a json string such as: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M036.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling. reply in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the SER label as uppercase text ",
          "lower_case": "State the speaker's feeling. Reply in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "State the speaker's feeling. reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<EMOTIONAL_TONE>\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "State the speaker's feeling. reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"*emotional_tone*\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's feeling. Reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format the result so it is enclosed in \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; reply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and shape the output using standard json conventions and the field related to SER must be labeled with \"emotion_label\" and the formatting guide is: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M039.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling, in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling; in one single word and return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with the emotion result using uppercase letters only. ",
          "lower_case": "Summarize the speaker's feeling; in one single word and return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\" and detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "**Affect**",
              "inst": "Summarize the speaker's feeling, in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepended with \"**Affect**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<sentiment>",
              "inst": "Summarize the speaker's feeling; in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish everything with a \"<sentiment>\" tag. "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Summarize the speaker's feeling. in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result so it is enclosed in \"\"\" and \"\"\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, in one single word and return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; express the final output in proper json; for the SER entry, use \"predicted_emotion\" as its key; for reference, your output might look like: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M040.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "only use one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. only use one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling; only use one word. output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Express the speaker's feeling, only use one word. Output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase text for the emotion result. ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Express the speaker's feeling; only use one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"Detected affective state: \" leading "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion*",
              "inst": "Express the speaker's feeling, only use one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and concatenate \"*Emotion*\" to the tail: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's feeling, only use one word. Output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"<BOS>\" and trailing \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Only use one word. output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the structured data as a json-formatted string. Use \"speaker_emotion\" as the json label for SER and the json result must follow this form: {\"speaker_emotion\": \"(affect)\"} ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M041.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling; write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's feeling, write in one word, return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present only the uppercase detected emotion as the result: ",
          "lower_case": "Tell the speaker's feeling. Write in one word, return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only. ",
          "prefix": [
            {
              "prefix": "**affect**",
              "inst": "Tell the speaker's feeling, write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"**affect**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<SPEAKER_EMOTION>",
              "inst": "Tell the speaker's feeling; write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and tag the result by adding \"<SPEAKER_EMOTION>\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's feeling; write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<text>\" at the beginning and \"</text>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling and write in one word, return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style and the field related to SER must be labeled with \"emotion_tag\". A correct formatting instance is: {\"emotion_tag\": \"(perceived emotion)\"}: ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script01_3/Ses05M_script01_3_M042.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling. Elaborated in one word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the detected result contains only uppercase characters ",
          "lower_case": "Summarize the speaker's feeling and elaborated in one word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "[emotional_tone]",
              "inst": "Summarize the speaker's feeling. elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and starting with \"[emotional_tone]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_State*",
              "inst": "Summarize the speaker's feeling, elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"*Emotional_State*\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Summarize the speaker's feeling, elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Attach \"<\" to the beginning and \">\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, elaborated in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the structured data as a json-formatted string. Write the SER result with \"emotion\" as its property name and the expected structure looks like this: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_F000.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. Rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling; rendered in one word; the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase: ",
          "lower_case": "Express the speaker's feeling, rendered in one word; the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\"; output the SER result in lowercase format only. ",
          "prefix": [
            {
              "prefix": "{EMOTION}",
              "inst": "Express the speaker's feeling. Rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". commence with \"{EMOTION}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "Express the speaker's feeling. rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and tag the result by adding \"[Predicted_Emotion]\" to its end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's feeling. Rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"<BOS>\" and \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Rendered in one word; the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object, place the result of SER beneath the key \"emotion\". Maintain the structure like so: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "with one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. With one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's feelings, with one single word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters: ",
          "lower_case": "Describe the speaker's feelings, with one single word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Describe the speaker's feelings; with one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; commence with \"Recognized feeling is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_label>",
              "inst": "Describe the speaker's feelings and with one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"<emotion_label>\" to it: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the speaker's feelings; with one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"(\" and \")\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings, with one single word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary. The field related to SER must be labeled with \"speaker_emotion\". To illustrate, use: {\"speaker_emotion\": \"(affect)\"}. ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling, say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; say it in exactly one word and only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text: ",
          "lower_case": "State the speaker's feeling and say it in exactly one word and only choose among \"happy\", \"sad\", \"angry\" or \"neutral\". convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "<Emotion_Output>",
              "inst": "State the speaker's feeling and say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"<Emotion_Output>\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "State the speaker's feeling. Say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have \"**Emotional_State**\" conclude the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's feeling and say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"***\" and suffix it with \"***\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and say it in exactly one word and only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout and represent the result of SER using the key \"emotion_label\". Here is a sample representation: {\"emotion_label\": \"(affect)\"} ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood; only in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion ",
          "lower_case": "Tell the speaker's mood and only in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "*emotion_result*",
              "inst": "Tell the speaker's mood and only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*emotion_result*\" at the beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**PREDICTED_EMOTION**",
              "inst": "Tell the speaker's mood, only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"**PREDICTED_EMOTION**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the speaker's mood; only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". tag the result with opening \"<text>\" and closing \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood, only in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", serialize the result into json form, attach \"emotion_label\" to the result of SER in the final output, use the following format in your response: {\"emotion_label\": \"(emotional tone)\"}: ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker and write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker. Write in one word and select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the emotion recognition output as uppercase only ",
          "lower_case": "Summarize the emotion of the speaker; write in one word and select one of \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words: ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Summarize the emotion of the speaker and write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"Perceived emotional tone: \" lead. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_Tone*",
              "inst": "Summarize the emotion of the speaker. Write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"*Emotional_Tone*\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Summarize the emotion of the speaker. write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and contain the result within the symbols \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; write in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format. Allocate the key \"SER\" for the data derived from SER, a proper example would be: {\"SER\": \"(affect)\"}. ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; summarized in one word and select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; only output the emotion in uppercase format. ",
          "lower_case": "Express the speaker's emotion and summarized in one word and select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase: ",
          "prefix": [
            {
              "prefix": "*Affect*",
              "inst": "Express the speaker's emotion. Summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*Affect*\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion>",
              "inst": "Express the speaker's emotion; summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"<emotion>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Express the speaker's emotion; summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"<\" on the left and \">\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; summarized in one word and select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Organize the result in a json-style dictionary and allocate the key \"emotional_state\" for the data derived from SER. A valid format example: {\"emotional_state\": \"(perceived emotion)\"} ",
              "key": "emotional_state",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion. Defined in one word; choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and show only the uppercase predicted emotion with no extra words: ",
          "lower_case": "Identify the speaker's emotion and defined in one word; choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\" and detect the emotion and format the result as lowercase: ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Identify the speaker's emotion. Defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"Predicted sentiment state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "Identify the speaker's emotion and defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"[EMOTION_OUTPUT]\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Identify the speaker's emotion; defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion; defined in one word; choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object; format the SER data using \"emotion_result\" as its key name. The data should be formatted like this: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood. chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood, chosen in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion. ",
          "lower_case": "Summarize the speaker's mood. Chosen in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Summarize the speaker's mood and chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived emotional tone: \" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Summarize the speaker's mood, chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"[Emotion_Output]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Summarize the speaker's mood and chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Surround the result with the markers \"<BOS>\" and \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood; chosen in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure. Assign the string \"speaker_emotion\" as the field name for SER. The correct json format includes: {\"speaker_emotion\": \"(perceived emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling and in exactly one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER label as uppercase text. ",
          "lower_case": "Express the speaker's feeling; in exactly one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Express the speaker's feeling; in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"Recognized sentiment label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Result]",
              "inst": "Express the speaker's feeling and in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"[Emotion_Result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Express the speaker's feeling, in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; bracket the result inside \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert your output into a json-compatible format; link the key \"emotion_output\" directly to the SER data. the result should be rendered in this format: {\"emotion_output\": \"(emotional tone)\"}: ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, with one single word and chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format: ",
          "lower_case": "Express the speaker's feeling, with one single word and chosen from \"happy\", \"sad\", \"angry\" or \"neutral\"; return just the emotion label with no uppercase letters. ",
          "prefix": [
            {
              "prefix": "*feeling*",
              "inst": "Express the speaker's feeling. with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; initiated by \"*feeling*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "<speaker_emotion>",
              "inst": "Express the speaker's feeling. With one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"<speaker_emotion>\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the speaker's feeling. With one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; with one single word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object and use \"emotion_tag\" as the designated key for SER and use the following format in your response: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling; addressed in one word, return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make the emotion recognition result all uppercase: ",
          "lower_case": "Tell the speaker's feeling; addressed in one word, return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Tell the speaker's feeling; addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; open by adding \"Classification result (emotion): \". "
            }
          ],
          "suffix": [
            {
              "suffix": "<Affect>",
              "inst": "Tell the speaker's feeling, addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"<Affect>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's feeling; addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result inside the bounds of \"***\" and \"***\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. addressed in one word, return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary, \"speaker_emotion\" should be the identifier for the SER content; the json representation should be like: {\"speaker_emotion\": \"(emotional tone)\"}. ",
              "key": "speaker_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "describe in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion. Describe in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion, describe in one word. choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show only the uppercase emotion output: ",
          "lower_case": "Summarize the speaker's emotion and describe in one word. choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "[EMOTION_TAG]",
              "inst": "Summarize the speaker's emotion; describe in one word. choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"[EMOTION_TAG]\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotional_Tone>",
              "inst": "Summarize the speaker's emotion. Describe in one word. choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and have the result trail off with \"<Emotional_Tone>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's emotion; describe in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and include the result within \"<start>\" and \"<end>\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, describe in one word. Choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation; ensure that SER is stored under the key \"emotion_output\" and the json representation should be like: {\"emotion_output\": \"(feeling)\"} ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. Named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker. named in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only: ",
          "lower_case": "State the emotion of the speaker. Named in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\", give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "State the emotion of the speaker; named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"Identified emotion label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<speaker_emotion>",
              "inst": "State the emotion of the speaker and named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and complete the result using \"<speaker_emotion>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the emotion of the speaker and named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"#\" before and \"#\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker and named in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Generate a json-formatted version of the result. structure your json so that SER is labeled as \"sentiment\" and consider this sample format: {\"sentiment\": \"(emotion)\"}. ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M017.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker and state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker, state in one word and return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the recognized emotion in all uppercase letters: ",
          "lower_case": "Specify the emotion of the speaker. State in one word and return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Specify the emotion of the speaker; state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Identified emotion category: \" at the very beginning. "
            }
          ],
          "suffix": [
            {
              "suffix": "**AFFECT**",
              "inst": "Specify the emotion of the speaker; state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"**AFFECT**\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the emotion of the speaker and state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Wrap the entire result using \"\"\" as prefix and \"\"\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, state in one word and return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout, label the output of SER using the key \"emotion_result\" and the data should be formatted like this: {\"emotion_result\": \"(emotion)\"}. ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "state in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; state in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker; state in one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show only the uppercase predicted emotion with no extra words. ",
          "lower_case": "Specify the emotion of the speaker. State in one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the emotion using lowercase letters only. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Specify the emotion of the speaker, state in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". introduced by \"*sentiment*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{AFFECT}",
              "inst": "Specify the emotion of the speaker. State in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"{AFFECT}\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the emotion of the speaker. State in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the output between \"{\" and \"}\". "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker; state in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the result into json-structured data, the designated key for SER should remain \"emotion_tag\", the output must match this structure: {\"emotion_tag\": \"(feeling)\"} ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M019.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. Delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker, delivered in one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce only uppercase text from the SER result ",
          "lower_case": "Tell the emotion of the speaker. Delivered in one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "**SENTIMENT**",
              "inst": "Tell the emotion of the speaker and delivered in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefix it with \"**SENTIMENT**\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<affect>",
              "inst": "Tell the emotion of the speaker. Delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and end the result by inserting \"<affect>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the emotion of the speaker and delivered in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and delivered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary; place the result of SER beneath the key \"detected_emotion\"; the expected structure looks like this: {\"detected_emotion\": \"(feeling)\"} ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "reply in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion; reply in one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's emotion, reply in one word. The emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting: ",
          "lower_case": "Summarize the speaker's emotion. Reply in one word. The emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "*Predicted_Emotion*",
              "inst": "Summarize the speaker's emotion; reply in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*Predicted_Emotion*\" introduced first: "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Summarize the speaker's emotion, reply in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"**speaker_emotion**\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Summarize the speaker's emotion; reply in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the content using \"'\" and \"'\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion; reply in one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data and place the result of SER beneath the key \"emotion_tag\". Keep your output consistent with: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the emotion of the speaker and presented in one word and must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return uppercase-only emotion recognition output: ",
          "lower_case": "State the emotion of the speaker; presented in one word and must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "{Emotion_Result}",
              "inst": "State the emotion of the speaker, presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; START WITH \"{Emotion_Result}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[feeling]",
              "inst": "State the emotion of the speaker. Presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end by \"[feeling]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the emotion of the speaker, presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"(\" and \")\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; presented in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax, the json attribute for SER is \"speaker_emotion\"; use the following format in your response: {\"speaker_emotion\": \"(perceived emotion)\"} ",
              "key": "speaker_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood; restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's mood and restricted to one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Only output the emotion in uppercase format. ",
          "lower_case": "Point out the speaker's mood. restricted to one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_STATE>",
              "inst": "Point out the speaker's mood; restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; start it with \"<EMOTIONAL_STATE>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Point out the speaker's mood, restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"[Voice_Emotion]\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's mood; restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, restricted to one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax and the json representation of SER must be keyed as \"emotion_tag\". the formatting guide is: {\"emotion_tag\": \"(emotional tone)\"}: ",
              "key": "emotion_tag",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling. Summarize in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the detected emotion entirely in uppercase: ",
          "lower_case": "State the speaker's feeling and summarize in one word. Pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the detected emotion entirely to lowercase. ",
          "prefix": [
            {
              "prefix": "{EMOTIONAL_TONE}",
              "inst": "State the speaker's feeling and summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and headed by \"{EMOTIONAL_TONE}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "State the speaker's feeling. Summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"[EMOTIONAL_STATE]\" to finish the sequence. "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "State the speaker's feeling; summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"[\" and \"]\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and summarize in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax; the field related to SER must be labeled with \"detected_emotion\" and the json object should be in this pattern: {\"detected_emotion\": \"(feeling)\"}: ",
              "key": "detected_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker, chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the emotion of the speaker. Chosen in one word and chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Describe the emotion of the speaker and chosen in one word and chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase characters in the emotion result. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Describe the emotion of the speaker, chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with an opening of \"Identified emotion category: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Describe the emotion of the speaker and chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and suffixed with \"{Affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the emotion of the speaker; chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepend \"{\" and append \"}\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and chosen in one word and chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce a response that adheres to json syntax. include the SER output under the key \"predicted_emotion\", a correct formatting instance is: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "rendered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood. Rendered in one word. only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood and rendered in one word. Only choose among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". give the predicted emotion entirely in uppercase ",
          "lower_case": "State the speaker's mood, rendered in one word. only choose among \"happy\", \"sad\", \"angry\" or \"neutral\" and give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "State the speaker's mood and rendered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefixed by \"The detected emotional state is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<MOOD>",
              "inst": "State the speaker's mood and rendered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"<MOOD>\" to finish the sequence: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the speaker's mood and rendered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood. Rendered in one word. Only choose among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the structured data as a json-formatted string, represent SER in the json with the key \"emotion\" and when in doubt, refer to: {\"emotion\": \"(affect)\"}: ",
              "key": "emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and conveyed in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide just the uppercase version of the emotion ",
          "lower_case": "Specify the speaker's feeling, conveyed in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\"; make sure the entire emotion result is in lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Specify the speaker's feeling and conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion recognized from speech: \" heading things up: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Specify the speaker's feeling. conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"{Feeling}\" follows at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling; conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"***\" as prefix and \"***\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; conveyed in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style and encode the SER content using \"emotion_result\" as its identifier, please follow the template: {\"emotion_result\": \"(emotion)\"}. ",
              "key": "emotion_result",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's mood, delivered in one word and must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase text for the predicted emotion ",
          "lower_case": "Tell the speaker's mood and delivered in one word and must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". show the emotion label fully in lowercase characters: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Tell the speaker's mood; delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefix with \"Identified emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[mood]",
              "inst": "Tell the speaker's mood and delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And terminate the result using \"[mood]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Tell the speaker's mood; delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". bind the result using \"$\" and \"$\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and delivered in one word and must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the data inside a properly formed json. The SER value should be indexed by \"emotion\" and here is a sample representation: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_1/Ses05M_script02_1_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's emotion and answer in one word; must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide only uppercase characters in the emotion label. ",
          "lower_case": "Summarize the speaker's emotion; answer in one word; must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "**EMOTION_OUTPUT**",
              "inst": "Summarize the speaker's emotion and answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Open it with \"**EMOTION_OUTPUT**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Summarize the speaker's emotion and answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and finish the output with \"[Feeling]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Summarize the speaker's emotion, answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format the result so it is enclosed in \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion, answer in one word; must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object and bind the task SER to the key \"emotion_result\", the result should be rendered in this format: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F000.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood; mention in one word and output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion label in uppercase text only: ",
          "lower_case": "Tell the speaker's mood, mention in one word and output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase: ",
          "prefix": [
            {
              "prefix": "<VOICE_EMOTION>",
              "inst": "Tell the speaker's mood. mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix it with \"<VOICE_EMOTION>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[AFFECT]",
              "inst": "Tell the speaker's mood. Mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow up by appending \"[AFFECT]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's mood and mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encase the result between \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood; mention in one word and output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Output using a clean and valid json layout, place the result of SER beneath the key \"emotion\" and the correct json format includes: {\"emotion\": \"(mood)\"}: ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood; in precisely one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Identify the speaker's mood and in precisely one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Identify the speaker's mood, in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; fronted by \"Identified emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Output]",
              "inst": "Identify the speaker's mood; in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure the final part is \"[Emotion_Output]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the speaker's mood and in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result so it is enclosed in \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. in precisely one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format your result exactly as a json object, encode the SER content using \"detected_emotion\" as its identifier; the expected structure looks like this: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F005.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "revealed in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; revealed in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's feeling, revealed in one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER label as uppercase text ",
          "lower_case": "Identify the speaker's feeling. revealed in one word. must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Reply with lowercase-only emotion text ",
          "prefix": [
            {
              "prefix": "**EMOTION_OUTPUT**",
              "inst": "Identify the speaker's feeling. Revealed in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Introduced by \"**EMOTION_OUTPUT**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Identify the speaker's feeling; revealed in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"[Voice_Emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Identify the speaker's feeling and revealed in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make use of \"***\" and \"***\" to surround the result entirely: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and revealed in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json and place the result of SER beneath the key \"SER\" and when in doubt, refer to: {\"SER\": \"(emotion)\"} ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F009.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's emotion and in precisely one word, return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output the SER result in uppercase format only: ",
          "lower_case": "Express the speaker's emotion, in precisely one word, return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form. ",
          "prefix": [
            {
              "prefix": "[EMOTION_RESULT]",
              "inst": "Express the speaker's emotion and in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[EMOTION_RESULT]\" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_LABEL**",
              "inst": "Express the speaker's emotion. In precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". suffixed with \"**EMOTION_LABEL**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's emotion. in precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"**\" and \"**\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. In precisely one word, return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Represent the result with json syntax. Link the key \"emotion_result\" directly to the SER data. The formatting guide is: {\"emotion_result\": \"(mood)\"} ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F010.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and limited to one word and provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Express the speaker's mood; limited to one word and provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Express the speaker's mood. limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"The classified emotion label: \" leading. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Speaker_Emotion}",
              "inst": "Express the speaker's mood, limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and concatenate \"{Speaker_Emotion}\" to the tail "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's mood. limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"$\" and \"$\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; limited to one word and provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". represent the result with json syntax and bind the task SER to the key \"detected_emotion\"; refer to this sample output: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F012.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "put in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and put in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion, put in one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Point out the speaker's emotion, put in one word. provide one of \"happy\", \"sad\", \"angry\" or \"neutral\". present only the lowercase emotion label as the result ",
          "prefix": [
            {
              "prefix": "{Emotional_Tone}",
              "inst": "Point out the speaker's emotion. put in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". At the start, put \"{Emotional_Tone}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**perceived_emotion**",
              "inst": "Point out the speaker's emotion and put in one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"**perceived_emotion**\" to it "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Point out the speaker's emotion, put in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". frame the result with a leading \"<BOS>\" and trailing \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion, put in one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style; attach \"emotion_output\" to the result of SER in the final output; the correct json format includes: {\"emotion_output\": \"(feeling)\"} ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F013.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker and defined in one word; must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide just the uppercase version of the emotion: ",
          "lower_case": "Explain the emotion of the speaker; defined in one word; must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters. ",
          "prefix": [
            {
              "prefix": "**EMOTION_TAG**",
              "inst": "Explain the emotion of the speaker; defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"**EMOTION_TAG**\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTIONAL_STATE]",
              "inst": "Explain the emotion of the speaker; defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"[EMOTIONAL_STATE]\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the emotion of the speaker. defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", guard the result with \"_\" on the left and \"_\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker and defined in one word; must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; shape the output using standard json conventions, use \"emotion_result\" as the json label for SER. Here's how a typical entry should look: {\"emotion_result\": \"(emotional tone)\"}. ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F014.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "defined in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and defined in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's mood; defined in one word. output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the recognized emotion written entirely in uppercase letters. ",
          "lower_case": "Tell the speaker's mood. Defined in one word. Output must be \"happy\", \"sad\", \"angry\" or \"neutral\" and convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Tell the speaker's mood and defined in one word. output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"The speaker's mood is: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Result]",
              "inst": "Tell the speaker's mood, defined in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And put \"[Emotion_Result]\" at the closing point. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Tell the speaker's mood and defined in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and box the result using \"***\" and \"***\" as the enclosing symbols: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood and defined in one word. Output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the result into json style; when formatting, associate SER with \"detected_emotion\". follow this example to structure the data: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F015.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood. Simply in one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the emotion recognition output as uppercase only: ",
          "lower_case": "Express the speaker's mood and simply in one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters: ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Express the speaker's mood; simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Prefixed by \"Determined mood from audio: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Express the speaker's mood; simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow up by appending \"{Affect}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's mood. simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". box the result using \"<start>\" and \"<end>\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood; simply in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", show the result using key-value pairs in json, the json representation of SER must be keyed as \"emotional_state\". Refer to this sample output: {\"emotional_state\": \"(affect)\"} ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F016.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. Addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion, addressed in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters ",
          "lower_case": "Describe the speaker's emotion. Addressed in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "[EMOTION_OUTPUT]",
              "inst": "Describe the speaker's emotion. Addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and beginning with \"[EMOTION_OUTPUT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_LABEL**",
              "inst": "Describe the speaker's emotion and addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"**EMOTION_LABEL**\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Describe the speaker's emotion. Addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"#\" and \"#\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; addressed in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". encode the result as a json object; the json representation of SER must be keyed as \"sentiment\"; output a json string such as: {\"sentiment\": \"(emotion)\"} ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F017.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. Summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood. Summed in one word; output must strictly be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase. ",
          "lower_case": "Identify the speaker's mood and summed in one word; output must strictly be one of \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Identify the speaker's mood; summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"<SPEAKER_EMOTION>\" at its forefront "
            }
          ],
          "suffix": [
            {
              "suffix": "*MOOD*",
              "inst": "Identify the speaker's mood, summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and attach \"*MOOD*\" at the conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Identify the speaker's mood, summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"'\" on the left and \"'\" on the right "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood. summed in one word; output must strictly be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the response using json syntax and the SER result must be identified using the key \"emotion_label\"; here's how a typical entry should look: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F018.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's mood and defined in one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the uppercase emotion result ",
          "lower_case": "Describe the speaker's mood. defined in one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the recognized emotion in lowercase form: ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Describe the speaker's mood. Defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"*emotional_tone*\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Speaker_Emotion*",
              "inst": "Describe the speaker's mood and defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"*Speaker_Emotion*\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood and defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert the result inside the brackets \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure. The label \"emotion_tag\" must correspond to the SER section, the json object should be in this pattern: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F019.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's mood",
        "base_constrain": "using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's mood; using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's mood and using only one word and only one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the detected result contains only uppercase characters. ",
          "lower_case": "Summarize the speaker's mood, using only one word and only one option from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "Predicted mood label: ",
              "inst": "Summarize the speaker's mood; using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Add \"Predicted mood label: \" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "Summarize the speaker's mood and using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and ensure \"**Sentiment**\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Summarize the speaker's mood. using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"{\" and \"}\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's mood and using only one word and only one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; present the output strictly in json format, the label \"predicted_emotion\" must correspond to the SER section. Please follow the template: {\"predicted_emotion\": \"(feeling)\"} ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F022.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "state in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and state in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's emotion. State in one word. Provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase. ",
          "lower_case": "State the speaker's emotion; state in one word. provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "State the speaker's emotion; state in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prepended with \"Identified emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Voice_Emotion**",
              "inst": "State the speaker's emotion; state in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish the output with \"**Voice_Emotion**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "State the speaker's emotion; state in one word. provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is framed by \"*\" and \"*\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, state in one word. Provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the answer inside a json container, record SER using \"detected_emotion\" as the key in the json structure. Use the following format in your response: {\"detected_emotion\": \"(perceived emotion)\"} ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F023.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion. Defined in one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert and return the detected emotion fully uppercase ",
          "lower_case": "Express the speaker's emotion and defined in one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion result as lowercase letters only. ",
          "prefix": [
            {
              "prefix": "[EMOTIONAL_TONE]",
              "inst": "Express the speaker's emotion. Defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin it with \"[EMOTIONAL_TONE]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "Express the speaker's emotion and defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"{Mood}\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion and defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"#\" and \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, defined in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and transform the response into json format. the label \"emotion_tag\" must correspond to the SER section and the desired structure is as shown: {\"emotion_tag\": \"(mood)\"}: ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F026.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's emotion; simply in one word; must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Produce only uppercase text from the SER result. ",
          "lower_case": "Explain the speaker's emotion, simply in one word; must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "<sentiment>",
              "inst": "Explain the speaker's emotion and simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and add \"<sentiment>\" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "{Predicted_Emotion}",
              "inst": "Explain the speaker's emotion, simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"{Predicted_Emotion}\" directly after the result "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Explain the speaker's emotion. simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". delimit the content using \"$\" and \"$\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion; simply in one word; must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; show the result using key-value pairs in json and allocate the key \"emotion_label\" for the data derived from SER. to illustrate, use: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F027.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "simply in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, simply in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion and simply in one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide only uppercase characters in the emotion label: ",
          "lower_case": "State the speaker's emotion, simply in one word. Select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". Output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "*Affect*",
              "inst": "State the speaker's emotion and simply in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"*Affect*\" at the very beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{Mood}",
              "inst": "State the speaker's emotion, simply in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and label the end of the result with \"{Mood}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "State the speaker's emotion. Simply in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; insert \"(\" before the result and \")\" after it. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, simply in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and give the result back in proper json notation, the SER value should be indexed by \"emotion_label\". the json object should be in this pattern: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F028.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion, simply in one word, choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters. ",
          "lower_case": "Identify the speaker's emotion and simply in one word, choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Identify the speaker's emotion. Simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", starting with \"**Emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "{affect}",
              "inst": "Identify the speaker's emotion; simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"{affect}\" to its end "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's emotion; simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"$\" at the start and \"$\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion. Simply in one word, choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object, the field related to SER must be labeled with \"SER\". When in doubt, refer to: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling and defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's feeling; defined in one word, output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure all emotion labels are uppercase ",
          "lower_case": "Tell the speaker's feeling. defined in one word, output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "<SENTIMENT>",
              "inst": "Tell the speaker's feeling. Defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"<SENTIMENT>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*FEELING*",
              "inst": "Tell the speaker's feeling. Defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"*FEELING*\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the speaker's feeling; defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"#\" as the left boundary and \"#\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling. defined in one word, output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; format the SER data using \"predicted_emotion\" as its key name, maintain the structure like so: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F030.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. Named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood, named in one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion ",
          "lower_case": "Describe the speaker's mood, named in one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Describe the speaker's mood; named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and at the start, put \"Speech emotion detected as: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION]",
              "inst": "Describe the speaker's mood and named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"[EMOTION]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the speaker's mood and named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap it by placing \"<text>\" in front and \"</text>\" behind: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and named in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax and the field related to SER must be labeled with \"detected_emotion\" and when in doubt, refer to: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "state in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; state in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, state in one word, chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the recognized emotion in all uppercase letters ",
          "lower_case": "State the speaker's mood, state in one word, chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "[sentiment]",
              "inst": "State the speaker's mood. State in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[sentiment]\" introduced first. "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Result]",
              "inst": "State the speaker's mood and state in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and have the result trail off with \"[Emotion_Result]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood, state in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"'\" before and \"'\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood, state in one word, chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure and assign the string \"predicted_emotion\" as the field name for SER. Your result should mirror this: {\"predicted_emotion\": \"(mood)\"} ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "in precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling; in precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. In precisely one word, output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters. ",
          "lower_case": "Specify the speaker's feeling and in precisely one word, output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; ensure all emotion labels are lowercase: ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Specify the speaker's feeling; in precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"The emotion from the speech: \" set at the top "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Result}",
              "inst": "Specify the speaker's feeling; in precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"{Emotion_Result}\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the speaker's feeling. In precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and frame the result with a leading \"\"\" and trailing \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and in precisely one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result with json syntax. When formatting, associate SER with \"emotion_label\". to illustrate, use: {\"emotion_label\": \"(feeling)\"} ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's emotion",
        "base_constrain": "using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's emotion. using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's emotion, using only one word, output must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", present the SER label in uppercase letters only. ",
          "lower_case": "Specify the speaker's emotion and using only one word, output must be \"happy\", \"sad\", \"angry\" or \"neutral\", produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "Specify the speaker's emotion. Using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"The classified emotion label: \" opening the output "
            }
          ],
          "suffix": [
            {
              "suffix": "*mood*",
              "inst": "Specify the speaker's emotion and using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"*mood*\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Specify the speaker's emotion, using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"~\" and \"~\" tags: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's emotion, using only one word, output must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return the structured data as a json-formatted string; use \"emotion_output\" as the json label for SER. Refer to this sample output: {\"emotion_output\": \"(perceived emotion)\"} ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood; kept to one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the predicted emotion entirely in uppercase: ",
          "lower_case": "Express the speaker's mood and kept to one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\", return the detected emotional state in all lowercase letters: ",
          "prefix": [
            {
              "prefix": "[MOOD]",
              "inst": "Express the speaker's mood and kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"[MOOD]\" at the very top. "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_TAG>",
              "inst": "Express the speaker's mood, kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and append the suffix \"<EMOTION_TAG>\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's mood and kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". put \"<BOS>\" and \"<EOS>\" around the result as delimiters: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, kept to one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure, use \"sentiment\" as the designated key for SER, the result should be rendered in this format: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_F038.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "in exactly one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood; in exactly one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the speaker's mood; in exactly one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase ",
          "lower_case": "Explain the speaker's mood. In exactly one word. Provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "{Predicted_Emotion}",
              "inst": "Explain the speaker's mood, in exactly one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"{Predicted_Emotion}\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_LABEL}",
              "inst": "Explain the speaker's mood, in exactly one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and follow the content with \"{EMOTION_LABEL}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Explain the speaker's mood, in exactly one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". make sure the result is framed by \"<\" and \">\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. In exactly one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; transform the response into json format and label the output of SER using the key \"detected_emotion\"; the desired structure is as shown: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M000.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's emotion and conveyed in one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce only uppercase text from the SER result ",
          "lower_case": "Tell the speaker's emotion; conveyed in one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase. ",
          "prefix": [
            {
              "prefix": "{FEELING}",
              "inst": "Tell the speaker's emotion. conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"{FEELING}\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*SPEAKER_EMOTION*",
              "inst": "Tell the speaker's emotion; conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"*SPEAKER_EMOTION*\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Tell the speaker's emotion; conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"<BOS>\" and \"<EOS>\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion, conveyed in one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax; assign \"emotion\" as the property key for SER related content; the output should resemble: {\"emotion\": \"(perceived emotion)\"}: ",
              "key": "emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker. articulated in one word, pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text ",
          "lower_case": "Summarize the emotion of the speaker, articulated in one word, pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and show only the lowercase emotion output: ",
          "prefix": [
            {
              "prefix": "Emotion recognized from speech: ",
              "inst": "Summarize the emotion of the speaker and articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Emotion recognized from speech: \" as the first line. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Output>",
              "inst": "Summarize the emotion of the speaker; articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"<Emotion_Output>\": "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the emotion of the speaker, articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"_\" and \"_\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and articulated in one word, pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Print the result using json object formatting. For the SER entry, use \"emotion_result\" as its key and one possible output form: {\"emotion_result\": \"(emotional tone)\"}: ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; call it in one word. Allowed values: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the SER classification in uppercase letters: ",
          "lower_case": "State the speaker's mood. Call it in one word. Allowed values: \"happy\", \"sad\", \"angry\" or \"neutral\", produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "**EMOTION**",
              "inst": "State the speaker's mood, call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and introduced by \"**EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Predicted_Emotion]",
              "inst": "State the speaker's mood; call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and include \"[Predicted_Emotion]\" as the last element: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "State the speaker's mood, call it in one word. Allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; keep the result enclosed within \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood and call it in one word. allowed values: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json; bind the task SER to the key \"emotion_tag\", refer to this sample output: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M016.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's feeling",
        "base_constrain": "summarized in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's feeling, summarized in one word. pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's feeling. Summarized in one word. Pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", respond with the recognized emotion written in uppercase only ",
          "lower_case": "Explain the speaker's feeling; summarized in one word. Pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the emotion output only in lowercase characters ",
          "prefix": [
            {
              "prefix": "*emotion_output*",
              "inst": "Explain the speaker's feeling, summarized in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*emotion_output*\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*voice_emotion*",
              "inst": "Explain the speaker's feeling. Summarized in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And finish everything with a \"*voice_emotion*\" tag "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the speaker's feeling; summarized in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encase the result between \"<wrap>\" and \"</wrap>\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's feeling. Summarized in one word. Pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert your output into a json-compatible format. Link the key \"SER\" directly to the SER data. This is an appropriate format: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M024.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling, answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's feeling and answer in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Express the speaker's feeling; answer in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Express the speaker's feeling; answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Identified emotional tone: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "{Feeling}",
              "inst": "Express the speaker's feeling; answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"{Feeling}\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's feeling; answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Attach \"<start>\" to the beginning and \"<end>\" to the end of the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling and answer in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json, structure your json so that SER is labeled as \"emotion_tag\"; you are expected to return: {\"emotion_tag\": \"(affect)\"}: ",
              "key": "emotion_tag",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's emotion",
        "base_constrain": "in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's emotion and in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's emotion, in a single word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; show the detected emotion fully in uppercase characters. ",
          "lower_case": "Summarize the speaker's emotion, in a single word. pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Summarize the speaker's emotion. In a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"Predicted sentiment state: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{feeling}",
              "inst": "Summarize the speaker's emotion; in a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and close the output by appending \"{feeling}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Summarize the speaker's emotion. In a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", surround the result with the markers \"***\" and \"***\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's emotion. In a single word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result with json syntax; encode the SER content using \"speaker_emotion\" as its identifier, here is a sample representation: {\"speaker_emotion\": \"(emotion)\"}: ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M026.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood, summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood. Summed up in one word; return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Tell the speaker's mood, summed up in one word; return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase ",
          "prefix": [
            {
              "prefix": "*Mood*",
              "inst": "Tell the speaker's mood and summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"*Mood*\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Tell the speaker's mood. Summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And close the output by appending \"*EMOTIONAL_TONE*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the speaker's mood and summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", keep the result enclosed within \"*\" and \"*\" "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood. Summed up in one word; return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure. Include the SER output under the key \"speaker_emotion\"; one possible output form: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M029.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "chosen in one word. must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, chosen in one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the emotion of the speaker and chosen in one word. Must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the emotion result using uppercase letters only: ",
          "lower_case": "Tell the emotion of the speaker, chosen in one word. Must pick from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Tell the emotion of the speaker; chosen in one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Emotion result from audio: \" as the heading. "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Label*",
              "inst": "Tell the emotion of the speaker. Chosen in one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"*Emotion_Label*\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the emotion of the speaker; chosen in one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<text>\" at the beginning and \"</text>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; chosen in one word. Must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards and the SER result must be identified using the key \"emotion\", the output should resemble: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M030.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood and only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood; only use one word; limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters ",
          "lower_case": "Tell the speaker's mood, only use one word; limited to \"happy\", \"sad\", \"angry\" or \"neutral\". Detect the emotion and format the result as lowercase. ",
          "prefix": [
            {
              "prefix": "[VOICE_EMOTION]",
              "inst": "Tell the speaker's mood and only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"[VOICE_EMOTION]\" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Tell the speaker's mood; only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and follow up by appending \"**emotion_output**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the speaker's mood. Only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"(\" and \")\" markers: "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood, only use one word; limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards and the SER value should be indexed by \"emotional_state\"; you are expected to return: {\"emotional_state\": \"(feeling)\"}: ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M031.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker and chosen in one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; generate the emotion result only in uppercase characters: ",
          "lower_case": "Explain the emotion of the speaker. Chosen in one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\", give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Explain the emotion of the speaker, chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", kicking off with \"Predicted sentiment state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_TAG*",
              "inst": "Explain the emotion of the speaker, chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"*EMOTION_TAG*\" the final token "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Explain the emotion of the speaker and chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<wrap>\" at the beginning and \"</wrap>\" at the end of the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, chosen in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the output in a structured json layout, for the SER entry, use \"emotion_result\" as its key. a compliant example would appear like: {\"emotion_result\": \"(perceived emotion)\"} ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M032.wav",
      "text": "Sad",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker. using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker; using only one word and limited to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase ",
          "lower_case": "Summarize the emotion of the speaker. Using only one word and limited to \"happy\", \"sad\", \"angry\" or \"neutral\", reply with lowercase-only emotion text: ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Summarize the emotion of the speaker, using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"Emotion result from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_output*",
              "inst": "Summarize the emotion of the speaker. using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And terminate the result using \"*emotion_output*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the emotion of the speaker. using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", put the result within the boundaries of \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and using only one word and limited to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format, label the output of SER using the key \"sentiment\", to illustrate, use: {\"sentiment\": \"(feeling)\"}. ",
              "key": "sentiment",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M034.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "chosen in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood; chosen in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's mood; chosen in one word. Return a valid selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with uppercase-only predicted emotion text: ",
          "lower_case": "State the speaker's mood and chosen in one word. Return a valid selection from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the emotion result in lowercase without extra formatting: ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "State the speaker's mood and chosen in one word. return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prefixed by \"Recognized feeling is: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "**predicted_emotion**",
              "inst": "State the speaker's mood. chosen in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"**predicted_emotion**\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood; chosen in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"'\" and \"'\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; chosen in one word. Return a valid selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format your answer following json standards. ensure that SER is stored under the key \"SER\" and refer to this sample output: {\"SER\": \"(mood)\"}. ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M035.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion and concluded with one word and the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters ",
          "lower_case": "Express the speaker's emotion. concluded with one word and the response must be \"happy\", \"sad\", \"angry\" or \"neutral\". Output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Express the speaker's emotion and concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"Identified emotion label: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Label}",
              "inst": "Express the speaker's emotion and concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"{Emotion_Label}\": "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's emotion. Concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"'\" and append \"'\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; concluded with one word and the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". render the answer using json code structure and the key \"emotion_tag\" maps to the result of SER and for example: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M036.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "in one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, in one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's mood; in one single word; select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and output only the uppercase emotion result: ",
          "lower_case": "Specify the speaker's mood. In one single word; select one of \"happy\", \"sad\", \"angry\" or \"neutral\" and output the SER result in lowercase format only: ",
          "prefix": [
            {
              "prefix": "[mood]",
              "inst": "Specify the speaker's mood. In one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[mood]\" coming first "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Specify the speaker's mood; in one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and suffix the output with \"[speaker_emotion]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's mood. in one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Keep the result enclosed within \"<s>\" and \"</s>\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood. in one single word; select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result with json syntax, use \"emotion\" as the designated key for SER, output a json string such as: {\"emotion\": \"(emotion)\"}: ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M037.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; answer in one word. Return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the returned emotion has only uppercase characters. ",
          "lower_case": "Express the speaker's emotion, answer in one word. return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Express the speaker's emotion; answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed with \"Speech-derived emotion: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_output*",
              "inst": "Express the speaker's emotion. Answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"*emotion_output*\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's emotion and answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"#\" and append \"#\" to the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion; answer in one word. Return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string and the SER information must be placed under \"detected_emotion\"; output a json string such as: {\"detected_emotion\": \"(affect)\"}. ",
              "key": "detected_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script02_2/Ses05M_script02_2_M040.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker; write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the emotion of the speaker. write in one word and the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters: ",
          "lower_case": "Identify the emotion of the speaker, write in one word and the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Identify the emotion of the speaker. Write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Final emotion classification: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotional_state>",
              "inst": "Identify the emotion of the speaker and write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"<emotional_state>\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Identify the emotion of the speaker, write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"<\" at the start and \">\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and write in one word and the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; encode the SER content using \"emotion\" as its identifier and you can format it as follows: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and simply in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; detect the emotion and format all letters as uppercase: ",
          "lower_case": "Express the speaker's mood and simply in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and present only the lowercase emotion label as the result. ",
          "prefix": [
            {
              "prefix": "*emotion_output*",
              "inst": "Express the speaker's mood; simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"*emotion_output*\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Express the speaker's mood and simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", suffixed with \"**Emotion_Output**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's mood. simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Put the result within the boundaries of \"<start>\" and \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and simply in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout; the field related to SER must be labeled with \"detected_emotion\", refer to this sample output: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F002.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. Expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood, expressed in one word and pick an option among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text ",
          "lower_case": "Identify the speaker's mood. expressed in one word and pick an option among \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion: ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Identify the speaker's mood, expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", insert \"The speaker's mood is: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{perceived_emotion}",
              "inst": "Identify the speaker's mood and expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow the content with \"{perceived_emotion}\". "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Identify the speaker's mood; expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; contain the result within the symbols \"(\" and \")\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood; expressed in one word and pick an option among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format the result into json style, encode the SER content using \"predicted_emotion\" as its identifier, the data should be formatted like this: {\"predicted_emotion\": \"(perceived emotion)\"}. ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F003.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling, say it in exactly one word, must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER classification in uppercase letters ",
          "lower_case": "Specify the speaker's feeling, say it in exactly one word, must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\". Deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "[emotional_tone]",
              "inst": "Specify the speaker's feeling; say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"[emotional_tone]\" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "[VOICE_EMOTION]",
              "inst": "Specify the speaker's feeling; say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[VOICE_EMOTION]\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's feeling, say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"<\" and \">\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; say it in exactly one word, must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style; represent SER in the json with the key \"predicted_emotion\", the formatting guide is: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling, write in one word, return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text. ",
          "lower_case": "Express the speaker's feeling, write in one word, return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "<PERCEIVED_EMOTION>",
              "inst": "Express the speaker's feeling; write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"<PERCEIVED_EMOTION>\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "[sentiment]",
              "inst": "Express the speaker's feeling. Write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow up by appending \"[sentiment]\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling, write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"$\" and \"$\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; write in one word, return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the outcome as a json-compliant object; assign \"SER\" as the property key for SER related content. you can format it as follows: {\"SER\": \"(mood)\"}: ",
              "key": "SER",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F005.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's feeling and revealed in one word and select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". convert and return the detected emotion fully uppercase. ",
          "lower_case": "Specify the speaker's feeling; revealed in one word and select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", output the detected emotion as lowercase text. ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Specify the speaker's feeling. Revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", open by adding \"Predicted sentiment state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_output}",
              "inst": "Specify the speaker's feeling, revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and make \"{emotion_output}\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Specify the speaker's feeling and revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<s>\" before and \"</s>\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling. revealed in one word and select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object; the json attribute for SER is \"emotion_result\", you are expected to return: {\"emotion_result\": \"(emotional tone)\"} ",
              "key": "emotion_result",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's mood",
        "base_constrain": "declared in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's mood; declared in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Tell the speaker's mood. declared in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase. ",
          "lower_case": "Tell the speaker's mood and declared in one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". provide the emotion result in lowercase without extra formatting ",
          "prefix": [
            {
              "prefix": "{Emotion_Output}",
              "inst": "Tell the speaker's mood and declared in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"{Emotion_Output}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion]",
              "inst": "Tell the speaker's mood. Declared in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"[Emotion]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Tell the speaker's mood. declared in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and ensure the result is wrapped using \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's mood, declared in one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules; SER should appear under the json key \"emotion_tag\" and here is a sample representation: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in precisely one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. In precisely one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood; in precisely one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", give the predicted emotion entirely in uppercase: ",
          "lower_case": "Express the speaker's mood and in precisely one word. the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\" and reply with the lowercase version of the recognized emotion: ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Express the speaker's mood. In precisely one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"{Mood}\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "*Perceived_Emotion*",
              "inst": "Express the speaker's mood and in precisely one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and mark the end by \"*Perceived_Emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's mood; in precisely one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encase the result between \"<BOS>\" and \"<EOS>\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. In precisely one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce the output adhering to json format and use \"predicted_emotion\" as the designated key for SER, the expected structure looks like this: {\"predicted_emotion\": \"(affect)\"}: ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F013.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker. Summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the emotion of the speaker, summarized in one word and restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output the emotion label fully uppercase ",
          "lower_case": "Summarize the emotion of the speaker. Summarized in one word and restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", only output the emotion label in lowercase format ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Summarize the emotion of the speaker. Summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"{Mood}\" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Affect}",
              "inst": "Summarize the emotion of the speaker. summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{Affect}\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the emotion of the speaker; summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", ensure the result is wrapped using \"<s>\" and \"</s>\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker and summarized in one word and restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; organize the result in a json-style dictionary. ensure that SER is stored under the key \"emotion\" and format your response exactly as: {\"emotion\": \"(emotional tone)\"} ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood. In one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood; in one single word and must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", output only the emotion label in uppercase form ",
          "lower_case": "Describe the speaker's mood and in one single word and must return \"happy\", \"sad\", \"angry\" or \"neutral\"; provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "Recognized voice emotion: ",
              "inst": "Describe the speaker's mood; in one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"Recognized voice emotion: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{SENTIMENT}",
              "inst": "Describe the speaker's mood; in one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"{SENTIMENT}\" the final suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Describe the speaker's mood; in one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"(\" as the left boundary and \")\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood. in one single word and must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, encode the SER content using \"SER\" as its identifier; a correct formatting instance is: {\"SER\": \"(feeling)\"}. ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F017.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "rendered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, rendered in one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the emotion of the speaker; rendered in one word. must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the SER classification in uppercase letters ",
          "lower_case": "Express the emotion of the speaker; rendered in one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Provide the detected emotion entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Express the emotion of the speaker; rendered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", preceded by \"Emotion result from audio: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTIONAL_TONE>",
              "inst": "Express the emotion of the speaker, rendered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"<EMOTIONAL_TONE>\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the emotion of the speaker. Rendered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix the result with \"<start>\" and suffix it with \"<end>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker; rendered in one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the answer using json code structure. Use \"emotion_output\" as the designated key for SER. The json result must follow this form: {\"emotion_output\": \"(feeling)\"}. ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F020.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling and summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Summarize the speaker's feeling; summed up in one word and only one answer allowed: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only: ",
          "lower_case": "Summarize the speaker's feeling. summed up in one word and only one answer allowed: \"happy\", \"sad\", \"angry\" or \"neutral\"; show only the lowercase emotion with no extra words. ",
          "prefix": [
            {
              "prefix": "<EMOTION_LABEL>",
              "inst": "Summarize the speaker's feeling. Summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; led by \"<EMOTION_LABEL>\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Summarize the speaker's feeling; summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"**speaker_emotion**\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the speaker's feeling. Summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put the result within the boundaries of \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, summed up in one word and only one answer allowed: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object and the SER information must be placed under \"SER\". Refer to this sample output: {\"SER\": \"(feeling)\"} ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood; named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's mood and named in one word. Select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Express the speaker's mood; named in one word. select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the detected emotion contains only lowercase characters ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Express the speaker's mood and named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Led by \"Perceived emotional tone: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Express the speaker's mood; named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"*VOICE_EMOTION*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's mood. Named in one word. Select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<start>\" and \"<end>\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, named in one word. select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", transform the response into json format; the output variable for SER is expected to be labeled \"emotion_output\", for example: {\"emotion_output\": \"(emotional tone)\"}. ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker; explained in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Output the SER result in uppercase format only: ",
          "lower_case": "Express the emotion of the speaker and explained in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\"; show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "*Speaker_Emotion*",
              "inst": "Express the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". add \"*Speaker_Emotion*\" at the very top: "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion*",
              "inst": "Express the emotion of the speaker; explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*emotion*\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Express the emotion of the speaker. Explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make use of \"\"\" and \"\"\" to surround the result entirely. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker and explained in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure and record SER using \"SER\" as the key in the json structure. the output should resemble: {\"SER\": \"(affect)\"}: ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_F031.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling. write in one word; provide only one choice: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return uppercase-only emotion recognition output ",
          "lower_case": "Summarize the speaker's feeling and write in one word; provide only one choice: \"happy\", \"sad\", \"angry\" or \"neutral\". output the detected emotion as lowercase text: ",
          "prefix": [
            {
              "prefix": "Identified emotion label: ",
              "inst": "Summarize the speaker's feeling. Write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prepend \"Identified emotion label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Label*",
              "inst": "Summarize the speaker's feeling, write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"*Emotion_Label*\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Summarize the speaker's feeling. Write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"_\" and \"_\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling and write in one word; provide only one choice: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", convert the result into a json-compatible structure, ensure that SER is stored under the key \"emotion_label\". The appropriate response template: {\"emotion_label\": \"(perceived emotion)\"} ",
              "key": "emotion_label",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M001.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion, summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Describe the speaker's emotion; summed in one word and selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters. ",
          "lower_case": "Describe the speaker's emotion, summed in one word and selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\"; output the detected emotion as lowercase text ",
          "prefix": [
            {
              "prefix": "Predicted sentiment state: ",
              "inst": "Describe the speaker's emotion; summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". START WITH \"Predicted sentiment state: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION]",
              "inst": "Describe the speaker's emotion. Summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and place \"[EMOTION]\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Describe the speaker's emotion. Summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", make sure the result is framed by \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, summed in one word and selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the response using json syntax; use \"predicted_emotion\" as the designated key for SER, a demonstration of the expected format: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M003.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "only use one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion, only use one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion and only use one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the recognized emotion in all uppercase letters ",
          "lower_case": "State the speaker's emotion; only use one word. select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". Give the emotion recognition output only in lowercase form ",
          "prefix": [
            {
              "prefix": "<EMOTIONAL_TONE>",
              "inst": "State the speaker's emotion, only use one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"<EMOTIONAL_TONE>\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_LABEL]",
              "inst": "State the speaker's emotion and only use one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And end the result by inserting \"[EMOTION_LABEL]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "State the speaker's emotion, only use one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Contain the result within the symbols \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; only use one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Produce a response that adheres to json syntax. The output variable for SER is expected to be labeled \"emotion_tag\". refer to this sample output: {\"emotion_tag\": \"(mood)\"}. ",
              "key": "emotion_tag",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M004.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion. Expressed in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's emotion. Expressed in one word. Pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "State the speaker's emotion and expressed in one word. Pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "The detected emotional state is: ",
              "inst": "State the speaker's emotion and expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". prepended with \"The detected emotional state is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "State the speaker's emotion; expressed in one word. pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"*perceived_emotion*\" after the result body "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "State the speaker's emotion; expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; represent the result inside the bounds of \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion, expressed in one word. Pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the result into a json-compatible structure, use \"emotion_tag\" as the json label for SER; follow this example to structure the data: {\"emotion_tag\": \"(perceived emotion)\"} ",
              "key": "emotion_tag",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M006.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "in precisely one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling; in precisely one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's feeling, in precisely one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes ",
          "lower_case": "State the speaker's feeling and in precisely one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\". Produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "[Emotion_Output]",
              "inst": "State the speaker's feeling and in precisely one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"[Emotion_Output]\" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_tone**",
              "inst": "State the speaker's feeling. In precisely one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and have \"**emotional_tone**\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "State the speaker's feeling; in precisely one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"<start>\" in the front and \"<end>\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling; in precisely one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting, the SER information must be placed under \"emotion_output\"; the data should be formatted like this: {\"emotion_output\": \"(emotion)\"}. ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M007.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood and addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood, addressed in one word; select exactly one valid emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters: ",
          "lower_case": "State the speaker's mood; addressed in one word; select exactly one valid emotion: \"happy\", \"sad\", \"angry\" or \"neutral\"; output the emotion text fully lowercase: ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "State the speaker's mood and addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"[AFFECT]\" at the front. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_state*",
              "inst": "State the speaker's mood; addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"*emotional_state*\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "State the speaker's mood, addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and guard the result with \"'\" on the left and \"'\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; addressed in one word; select exactly one valid emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Encode the result as a json object. record SER using \"speaker_emotion\" as the key in the json structure. a correct formatting instance is: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M008.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion, describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's emotion; describe in one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Identify the speaker's emotion and describe in one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\". respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "*Affect*",
              "inst": "Identify the speaker's emotion; describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"*Affect*\" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{FEELING}",
              "inst": "Identify the speaker's emotion. Describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finalize it by adding \"{FEELING}\" to the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's emotion; describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the output between \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, describe in one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style and the json attribute for SER is \"speaker_emotion\". You can format it as follows: {\"speaker_emotion\": \"(mood)\"}: ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M009.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker, call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the emotion of the speaker and call it in one word and choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Make the emotion recognition result all uppercase ",
          "lower_case": "Identify the emotion of the speaker. Call it in one word and choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\" and ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "{Mood}",
              "inst": "Identify the emotion of the speaker, call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", start it with \"{Mood}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "**feeling**",
              "inst": "Identify the emotion of the speaker; call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"**feeling**\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the emotion of the speaker; call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bracket the result inside \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker. Call it in one word and choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result within a json structure and the json attribute for SER is \"detected_emotion\" and the output should resemble: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M010.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "state in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, state in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker. State in one word. choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return just the emotion label with no lowercase letters ",
          "lower_case": "Tell the emotion of the speaker. state in one word. Choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Tell the emotion of the speaker; state in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix with \"**Emotion**\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotional_State*",
              "inst": "Tell the emotion of the speaker and state in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"*Emotional_State*\" the final suffix "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the emotion of the speaker. State in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; include the result within \"{\" and \"}\" without any modifications: "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. State in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json and make sure the SER output is labeled \"emotion_output\". A valid format example: {\"emotion_output\": \"(affect)\"}: ",
              "key": "emotion_output",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M011.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker and summarized in one word; the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce the emotion label with all letters in uppercase: ",
          "lower_case": "Describe the emotion of the speaker; summarized in one word; the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "The classified sentiment is: ",
              "inst": "Describe the emotion of the speaker and summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". initiated by \"The classified sentiment is: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[Speaker_Emotion]",
              "inst": "Describe the emotion of the speaker. Summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"[Speaker_Emotion]\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Describe the emotion of the speaker, summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". include the result within \"<BOS>\" and \"<EOS>\" without any modifications. "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker, summarized in one word; the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", output the information using json formatting rules and use \"speaker_emotion\" as the json label for SER and the json object should be in this pattern: {\"speaker_emotion\": \"(feeling)\"}. ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M012.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "write in one word. Choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, write in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling. Write in one word. Choose exactly one from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Specify the speaker's feeling and write in one word. Choose exactly one from \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters. ",
          "prefix": [
            {
              "prefix": "*feeling*",
              "inst": "Specify the speaker's feeling; write in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and having \"*feeling*\" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "*Feeling*",
              "inst": "Specify the speaker's feeling and write in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and follow the content with \"*Feeling*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling; write in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the output between \"***\" and \"***\": "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and write in one word. choose exactly one from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and express the final output in proper json and use \"predicted_emotion\" as the json label for SER and consider this sample format: {\"predicted_emotion\": \"(feeling)\"}. ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M013.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "in just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and in just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the emotion of the speaker. in just one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure all emotion labels are uppercase. ",
          "lower_case": "Explain the emotion of the speaker and in just one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase characters in the emotion result ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Explain the emotion of the speaker. In just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"Detected emotion output: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "*Sentiment*",
              "inst": "Explain the emotion of the speaker; in just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and keep \"*Sentiment*\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Explain the emotion of the speaker; in just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result fully with \"{\" as the left boundary and \"}\" as the right. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker. In just one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style, use \"emotion_output\" as the json label for SER. The json representation should be like: {\"emotion_output\": \"(emotional tone)\"} ",
              "key": "emotion_output",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M014.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood, reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood, reply in one word; restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and detect the emotion and format all letters as uppercase ",
          "lower_case": "Express the speaker's mood, reply in one word; restricted to \"happy\", \"sad\", \"angry\" or \"neutral\"; convert the detected emotion entirely to lowercase: ",
          "prefix": [
            {
              "prefix": "*affect*",
              "inst": "Express the speaker's mood; reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", begin with \"*affect*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Express the speaker's mood, reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"**speaker_emotion**\" to the end without changes. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's mood and reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"<text>\" and \"</text>\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood, reply in one word; restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; give the result back in proper json notation; SER should appear under the json key \"sentiment\", follow this example to structure the data: {\"sentiment\": \"(emotion)\"}: ",
              "key": "sentiment",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M015.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's feeling",
        "base_constrain": "summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's feeling. Summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the speaker's feeling and summed up in one word, choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present the SER label in uppercase letters only: ",
          "lower_case": "Tell the speaker's feeling; summed up in one word, choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the detected emotion contains only lowercase characters: ",
          "prefix": [
            {
              "prefix": "*emotional_tone*",
              "inst": "Tell the speaker's feeling. Summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Commence with \"*emotional_tone*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Mood>",
              "inst": "Tell the speaker's feeling and summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and finish the output with \"<Mood>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's feeling. Summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert \"_\" before the result and \"_\" after it "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's feeling; summed up in one word, choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Return the structured data as a json-formatted string. Encode the SER content using \"sentiment\" as its identifier. The data should be formatted like this: {\"sentiment\": \"(perceived emotion)\"} ",
              "key": "sentiment",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M016.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Tell the emotion of the speaker and kept to one word, select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return just the emotion label with no lowercase letters ",
          "lower_case": "Tell the emotion of the speaker; kept to one word, select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning. ",
          "prefix": [
            {
              "prefix": "Detected emotion output: ",
              "inst": "Tell the emotion of the speaker and kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Detected emotion output: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "*predicted_emotion*",
              "inst": "Tell the emotion of the speaker; kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make \"*predicted_emotion*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Tell the emotion of the speaker; kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", embed the result between \"(\" and \")\" markers "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Kept to one word, select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; display the result in json formatting style. Represent SER in the json with the key \"emotion\", keep your output consistent with: {\"emotion\": \"(emotion)\"} ",
              "key": "emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M018.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. Expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood and expressed in one word and output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; convert the predicted emotion entirely to uppercase ",
          "lower_case": "Point out the speaker's mood. expressed in one word and output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Present the recognized emotion in lowercase letters only ",
          "prefix": [
            {
              "prefix": "{emotion_tag}",
              "inst": "Point out the speaker's mood. Expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"{emotion_tag}\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<Feeling>",
              "inst": "Point out the speaker's mood; expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"<Feeling>\" as a suffix. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Point out the speaker's mood. Expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", delimit the result using \"$\" in the front and \"$\" at the back. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and expressed in one word and output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format everything using strict json notation; link the key \"sentiment\" directly to the SER data and this is an appropriate format: {\"sentiment\": \"(mood)\"}: ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M020.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood and explained in one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; produce uppercase-only emotion text. ",
          "lower_case": "Explain the speaker's mood and explained in one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", give the speech emotion recognition result entirely in lowercase. ",
          "prefix": [
            {
              "prefix": "Speech-derived emotion: ",
              "inst": "Explain the speaker's mood, explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; add \"Speech-derived emotion: \" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Explain the speaker's mood, explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and suffix the output with \"<emotion_tag>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Explain the speaker's mood, explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"<BOS>\" and \"<EOS>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, explained in one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Display the result in json formatting style, when structuring the result, use \"emotion_tag\" for the SER section. A demonstration of the expected format: {\"emotion_tag\": \"(emotion)\"}. ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M021.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's mood, clarified in one word and select one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only: ",
          "lower_case": "Point out the speaker's mood and clarified in one word and select one of \"happy\", \"sad\", \"angry\" or \"neutral\". Give only the emotion classification using lowercase letters: ",
          "prefix": [
            {
              "prefix": "*Emotion_Tag*",
              "inst": "Point out the speaker's mood. Clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"*Emotion_Tag*\" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "<SPEAKER_EMOTION>",
              "inst": "Point out the speaker's mood and clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"<SPEAKER_EMOTION>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Point out the speaker's mood and clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and delimit the result using \"**\" in the front and \"**\" at the back: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood; clarified in one word and select one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format the result into json style. Ensure that SER is stored under the key \"speaker_emotion\", the data should be formatted like this: {\"speaker_emotion\": \"(feeling)\"}: ",
              "key": "speaker_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M022.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's mood",
        "base_constrain": "simply in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's mood, simply in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's mood; simply in one word. Chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". return the SER classification in uppercase letters: ",
          "lower_case": "State the speaker's mood, simply in one word. Chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text: ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "State the speaker's mood, simply in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived emotional tone: \" as a prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "State the speaker's mood; simply in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and write \"{EMOTION_TAG}\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's mood. Simply in one word. Chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Use \"~\" and \"~\" to contain the result as a whole "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's mood; simply in one word. chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encode the result as a json object, structure your json so that SER is labeled as \"sentiment\" and a proper example would be: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M023.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker; articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and articulated in one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the returned emotion has only uppercase characters: ",
          "lower_case": "Tell the emotion of the speaker; articulated in one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Tell the emotion of the speaker, articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Emotion result from audio: \" lead: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_tag]",
              "inst": "Tell the emotion of the speaker, articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"[emotion_tag]\" at the output's conclusion: "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Tell the emotion of the speaker and articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; frame the result with a leading \"\"\" and trailing \"\"\". "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker and articulated in one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the result into a json-compatible structure, encode the SER content using \"predicted_emotion\" as its identifier. For example: {\"predicted_emotion\": \"(emotional tone)\"}: ",
              "key": "predicted_emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M024.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling. captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling and captured in one word and return a value chosen from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the emotion result as uppercase letters only ",
          "lower_case": "Express the speaker's feeling; captured in one word and return a value chosen from \"happy\", \"sad\", \"angry\" or \"neutral\", show only the lowercase emotion output: ",
          "prefix": [
            {
              "prefix": "The emotion from the speech: ",
              "inst": "Express the speaker's feeling and captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"The emotion from the speech: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*affect*",
              "inst": "Express the speaker's feeling and captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and complete the result using \"*affect*\" "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Express the speaker's feeling. Captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix the result with \"~\" and suffix it with \"~\": "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling, captured in one word and return a value chosen from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and show the result using key-value pairs in json and bind the task SER to the key \"speaker_emotion\"; the json object should be in this pattern: {\"speaker_emotion\": \"(mood)\"}. ",
              "key": "speaker_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M025.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the speaker's emotion",
        "base_constrain": "say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the speaker's emotion and say it in exactly one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the speaker's emotion and say it in exactly one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the predicted emotion entirely to uppercase: ",
          "lower_case": "Tell the speaker's emotion; say it in exactly one word. Must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "{Feeling}",
              "inst": "Tell the speaker's emotion and say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Feeling}\" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{Emotion_Tag}",
              "inst": "Tell the speaker's emotion; say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And make \"{Emotion_Tag}\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Tell the speaker's emotion and say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". put \"_\" and \"_\" around the result as delimiters "
            }
          ],
          "json": [
            {
              "inst": "Tell the speaker's emotion and say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style. \"emotion_output\" should be the identifier for the SER content; keep your output consistent with: {\"emotion_output\": \"(perceived emotion)\"}: ",
              "key": "emotion_output",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M026.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion, summarized in one word, output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and make the emotion recognition result all uppercase ",
          "lower_case": "Express the speaker's emotion; summarized in one word, output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\"; only output the emotion label in lowercase format. ",
          "prefix": [
            {
              "prefix": "{emotion_result}",
              "inst": "Express the speaker's emotion; summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". using \"{emotion_result}\" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Sentiment]",
              "inst": "Express the speaker's emotion, summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make sure it ends with \"[Sentiment]\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's emotion. Summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Enclose the result using \"<text>\" at the start and \"</text>\" at the end: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Summarized in one word, output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and display the result in json formatting style; bind the task SER to the key \"emotional_state\". for reference, your output might look like: {\"emotional_state\": \"(feeling)\"}. ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M027.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker. just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the emotion of the speaker. Just one word; select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "State the emotion of the speaker; just one word; select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\". ensure the output emotion contains only lowercase letters. ",
          "prefix": [
            {
              "prefix": "The classified emotion label: ",
              "inst": "State the emotion of the speaker and just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; at the start, put \"The classified emotion label: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_label**",
              "inst": "State the emotion of the speaker. Just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and add \"**emotion_label**\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the emotion of the speaker, just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"<text>\" and \"</text>\" to contain the result as a whole. "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker, just one word; select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; provide the answer inside a json container, the field related to SER must be labeled with \"emotion\", for reference, your output might look like: {\"emotion\": \"(emotional tone)\"}: ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M028.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker and expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the emotion of the speaker and expressed in one word and must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". present the SER label in uppercase letters only ",
          "lower_case": "Explain the emotion of the speaker, expressed in one word and must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text ",
          "prefix": [
            {
              "prefix": "The speaker's mood is: ",
              "inst": "Explain the emotion of the speaker and expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", having \"The speaker's mood is: \" at the beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Explain the emotion of the speaker and expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"**Emotion_Output**\" to the end without changes "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Explain the emotion of the speaker, expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<text>\" before and \"</text>\" after the result. "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker; expressed in one word and must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and assign \"emotion_label\" as the property key for SER related content and the output should resemble: {\"emotion_label\": \"(emotional tone)\"} ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M029.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the emotion of the speaker",
        "base_constrain": "just one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the emotion of the speaker and just one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the emotion of the speaker and just one word. The emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "State the emotion of the speaker. just one word. The emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", convert the recognized emotion into lowercase text. ",
          "prefix": [
            {
              "prefix": "{feeling}",
              "inst": "State the emotion of the speaker and just one word. The emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make \"{feeling}\" the first thing in the output "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_tag*",
              "inst": "State the emotion of the speaker. Just one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and add \"*emotion_tag*\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "State the emotion of the speaker. Just one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"<BOS>\" and append \"<EOS>\" to the result: "
            }
          ],
          "json": [
            {
              "inst": "State the emotion of the speaker; just one word. the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return it structured as a json object. The result corresponding to SER should be mapped to \"emotion_tag\", please use a format similar to: {\"emotion_tag\": \"(emotion)\"} ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M030.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings. Respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings; respond in one word; the response must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make sure the entire predicted emotion is in uppercase ",
          "lower_case": "Describe the speaker's feelings, respond in one word; the response must be \"happy\", \"sad\", \"angry\" or \"neutral\" and deliver the emotion output as lowercase only: ",
          "prefix": [
            {
              "prefix": "**Affect**",
              "inst": "Describe the speaker's feelings. Respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; adding \"**Affect**\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "<Emotion_Result>",
              "inst": "Describe the speaker's feelings; respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"<Emotion_Result>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Describe the speaker's feelings. respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and put \"\"\" and \"\"\" around the result as delimiters. "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings. Respond in one word; the response must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; return the structured data as a json-formatted string. The designated key for SER should remain \"emotion_output\"; the json representation should be like: {\"emotion_output\": \"(feeling)\"} ",
              "key": "emotion_output",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M031.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "captured in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, captured in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker and captured in one word. Output a single value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce uppercase-only emotion text ",
          "lower_case": "Tell the emotion of the speaker; captured in one word. output a single value from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide only lowercase text for the emotion result: ",
          "prefix": [
            {
              "prefix": "**PREDICTED_EMOTION**",
              "inst": "Tell the emotion of the speaker. Captured in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"**PREDICTED_EMOTION**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Sentiment*",
              "inst": "Tell the emotion of the speaker. Captured in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and ensure \"*Sentiment*\" is the last string. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Tell the emotion of the speaker, captured in one word. Output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"{\" and \"}\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker, captured in one word. output a single value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure. The json attribute for SER is \"SER\", a compliant example would appear like: {\"SER\": \"(perceived emotion)\"} ",
              "key": "SER",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M032.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "in exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and in exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Point out the speaker's feeling and in exactly one word, the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; format the emotion label so that all text is uppercase: ",
          "lower_case": "Point out the speaker's feeling; in exactly one word, the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\". output the emotion text fully lowercase ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Point out the speaker's feeling, in exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Recognized emotional category: \" opening the output. "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotional_state**",
              "inst": "Point out the speaker's feeling. In exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"**emotional_state**\" after everything else "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Point out the speaker's feeling. In exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"<wrap>\" on the left and \"</wrap>\" on the right: "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling and in exactly one word, the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the response using json syntax; use \"detected_emotion\" as the designated key for SER and your final output should take the form: {\"detected_emotion\": \"(emotion)\"}. ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_1/Ses05M_script03_1_M033.wav",
      "text": "Happy",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood, with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood, with one single word. restricted to \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; output only the emotion label in uppercase form: ",
          "lower_case": "Explain the speaker's mood; with one single word. Restricted to \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning: ",
          "prefix": [
            {
              "prefix": "*predicted_emotion*",
              "inst": "Explain the speaker's mood. With one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"*predicted_emotion*\" opening the output: "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_output]",
              "inst": "Explain the speaker's mood and with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"[emotion_output]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Explain the speaker's mood; with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and make sure the result is framed by \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood; with one single word. Restricted to \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format; place the result of SER beneath the key \"emotion_tag\" and please use a format similar to: {\"emotion_tag\": \"(feeling)\"}. ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F001.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion; in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion and in only one word, must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and produce only uppercase text from the SER result. ",
          "lower_case": "Express the speaker's emotion and in only one word, must be one of \"happy\", \"sad\", \"angry\" or \"neutral\" and make sure the entire emotion result is in lowercase: ",
          "prefix": [
            {
              "prefix": "[affect]",
              "inst": "Express the speaker's emotion and in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and fronted by \"[affect]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[Emotion_Label]",
              "inst": "Express the speaker's emotion and in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"[Emotion_Label]\" at the end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Express the speaker's emotion, in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"<text>\" and \"</text>\" as the enclosing characters for the result "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, in only one word, must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and render the answer using json code structure; the SER result must be identified using the key \"SER\", please use a format similar to: {\"SER\": \"(emotion)\"}. ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F002.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling and chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling. Chosen in one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with uppercase-only predicted emotion text ",
          "lower_case": "Specify the speaker's feeling, chosen in one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; produce only lowercase text from the SER result. ",
          "prefix": [
            {
              "prefix": "Perceived emotional tone: ",
              "inst": "Specify the speaker's feeling, chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Perceived emotional tone: \" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotional_state}",
              "inst": "Specify the speaker's feeling and chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And apply \"{emotional_state}\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the speaker's feeling. Chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", tag the result with opening \"{\" and closing \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; chosen in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format everything using strict json notation. Encode the SER content using \"predicted_emotion\" as its identifier and the json representation should be like: {\"predicted_emotion\": \"(mood)\"}. ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F004.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "concluded with one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker. concluded with one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the emotion of the speaker. Concluded with one word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide only uppercase characters in the emotion label ",
          "lower_case": "Summarize the emotion of the speaker. Concluded with one word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion result as lowercase letters only: ",
          "prefix": [
            {
              "prefix": "Speech tone analysis result: ",
              "inst": "Summarize the emotion of the speaker and concluded with one word. select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Speech tone analysis result: \" as the first line "
            }
          ],
          "suffix": [
            {
              "suffix": "{speaker_emotion}",
              "inst": "Summarize the emotion of the speaker; concluded with one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and place \"{speaker_emotion}\" as a suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Summarize the emotion of the speaker. Concluded with one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the result using \"~\" in the front and \"~\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; concluded with one word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". format your result exactly as a json object; when structuring the result, use \"emotional_state\" for the SER section and your final output should take the form: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F005.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "in just one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and in just one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; in just one word. Provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Give only the predicted emotion using uppercase letters. ",
          "lower_case": "State the speaker's feeling and in just one word. provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "<EMOTION_LABEL>",
              "inst": "State the speaker's feeling. In just one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". With \"<EMOTION_LABEL>\" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTION_TAG**",
              "inst": "State the speaker's feeling; in just one word. provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"**EMOTION_TAG**\" at the very end: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "State the speaker's feeling. In just one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". place the result inside a pair of \"<\" and \">\" tags: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling, in just one word. Provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format the result into json style; when structuring the result, use \"sentiment\" for the SER section and consider this sample format: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F006.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker, summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the emotion of the speaker; summed up in one word, choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the predicted emotion in uppercase without extra formatting ",
          "lower_case": "Express the emotion of the speaker and summed up in one word, choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\". output only the lowercase emotion recognition result ",
          "prefix": [
            {
              "prefix": "{Emotion_Tag}",
              "inst": "Express the emotion of the speaker. summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"{Emotion_Tag}\" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "[predicted_emotion]",
              "inst": "Express the emotion of the speaker; summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and make \"[predicted_emotion]\" the final token: "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Express the emotion of the speaker, summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"<s>\" before and \"</s>\" after. "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker and summed up in one word, choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data; make sure the SER output is labeled \"emotion\". The data should be formatted like this: {\"emotion\": \"(mood)\"}. ",
              "key": "emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F009.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the emotion of the speaker",
        "base_constrain": "clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the emotion of the speaker. Clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the emotion of the speaker and clarified in one word and only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and deliver the SER output entirely uppercase: ",
          "lower_case": "Identify the emotion of the speaker; clarified in one word and only select from \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Identify the emotion of the speaker and clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Recognized feeling is: \" at the start "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_STATE*",
              "inst": "Identify the emotion of the speaker. Clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"*EMOTIONAL_STATE*\" as the closing segment. "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Identify the emotion of the speaker, clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; box the result using \"***\" and \"***\" as the enclosing symbols "
            }
          ],
          "json": [
            {
              "inst": "Identify the emotion of the speaker and clarified in one word and only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return it structured as a json object. Format the SER data using \"emotional_state\" as its key name and the data should be formatted like this: {\"emotional_state\": \"(mood)\"}: ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F012.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "named in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling and named in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling; named in one word. provide one selection from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the detected emotion output only in uppercase form ",
          "lower_case": "Point out the speaker's feeling. named in one word. Provide one selection from \"happy\", \"sad\", \"angry\" or \"neutral\" and produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "*SPEAKER_EMOTION*",
              "inst": "Point out the speaker's feeling. Named in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Begin the output using \"*SPEAKER_EMOTION*\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**EMOTIONAL_STATE**",
              "inst": "Point out the speaker's feeling; named in one word. Provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and add \"**EMOTIONAL_STATE**\" at the end "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Point out the speaker's feeling; named in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Insert the result inside the brackets \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling. Named in one word. provide one selection from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your result exactly as a json object and link the key \"emotional_state\" directly to the SER data and a correctly structured entry is: {\"emotional_state\": \"(mood)\"} ",
              "key": "emotional_state",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F015.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "clarified in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling; clarified in one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's feeling; clarified in one word. provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; deliver the SER output entirely uppercase. ",
          "lower_case": "Express the speaker's feeling, clarified in one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\", provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "**Affect**",
              "inst": "Express the speaker's feeling. clarified in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**Affect**\" set at the top: "
            }
          ],
          "suffix": [
            {
              "suffix": "**Perceived_Emotion**",
              "inst": "Express the speaker's feeling and clarified in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end by \"**Perceived_Emotion**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Express the speaker's feeling. Clarified in one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and contain the result within the symbols \"$\" and \"$\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling. Clarified in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json, when structuring the result, use \"emotional_state\" for the SER section and this is an appropriate format: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F017.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's emotion",
        "base_constrain": "clarified in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's emotion and clarified in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "State the speaker's emotion, clarified in one word. only select from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Present the SER label in uppercase letters only: ",
          "lower_case": "State the speaker's emotion. Clarified in one word. Only select from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "{Voice_Emotion}",
              "inst": "State the speaker's emotion and clarified in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"{Voice_Emotion}\" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*speaker_emotion*",
              "inst": "State the speaker's emotion, clarified in one word. Only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And ensure \"*speaker_emotion*\" follows at the end: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "State the speaker's emotion and clarified in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", frame the result with a leading \"~\" and trailing \"~\". "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's emotion; clarified in one word. only select from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object. Please assign the key \"predicted_emotion\" to the SER field, the expected structure looks like this: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F018.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood, in one single word; selectable options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Specify the speaker's mood; in one single word; selectable options are \"happy\", \"sad\", \"angry\" or \"neutral\" and present the recognized emotion in lowercase letters only. ",
          "prefix": [
            {
              "prefix": "{speaker_emotion}",
              "inst": "Specify the speaker's mood, in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Starting with \"{speaker_emotion}\". "
            }
          ],
          "suffix": [
            {
              "suffix": "*perceived_emotion*",
              "inst": "Specify the speaker's mood; in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And mark the end of the result with \"*perceived_emotion*\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's mood, in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; guard the result with \"#\" on the left and \"#\" on the right. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood and in one single word; selectable options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", produce the output adhering to json format. represent SER in the json with the key \"sentiment\" and the json representation should be like: {\"sentiment\": \"(emotional tone)\"} ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F023.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's feeling",
        "base_constrain": "in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's feeling and in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's feeling and in just one word and must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Express the speaker's feeling; in just one word and must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\". detect the emotion and format the result as lowercase ",
          "prefix": [
            {
              "prefix": "{Emotion_Label}",
              "inst": "Express the speaker's feeling, in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; using \"{Emotion_Label}\" as a heading: "
            }
          ],
          "suffix": [
            {
              "suffix": "[Feeling]",
              "inst": "Express the speaker's feeling and in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"[Feeling]\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Express the speaker's feeling; in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; encapsulate the output between \"_\" and \"_\". "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's feeling; in just one word and must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", render the answer using json code structure, the result corresponding to SER should be mapped to \"emotion_label\", one possible output form: {\"emotion_label\": \"(mood)\"}. ",
              "key": "emotion_label",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F026.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the emotion of the speaker",
        "base_constrain": "presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the emotion of the speaker; presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the emotion of the speaker; presented in one word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the emotion result as uppercase letters only. ",
          "lower_case": "Describe the emotion of the speaker. Presented in one word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "[emotional_state]",
              "inst": "Describe the emotion of the speaker and presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". with \"[emotional_state]\" opening up the text "
            }
          ],
          "suffix": [
            {
              "suffix": "<VOICE_EMOTION>",
              "inst": "Describe the emotion of the speaker; presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and let \"<VOICE_EMOTION>\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Describe the emotion of the speaker. Presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; tag the result with opening \"{\" and closing \"}\" "
            }
          ],
          "json": [
            {
              "inst": "Describe the emotion of the speaker and presented in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", provide the output in a structured json layout; the SER result must be identified using the key \"emotion\"; the output should resemble: {\"emotion\": \"(emotional tone)\"}. ",
              "key": "emotion",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F028.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker; answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the emotion of the speaker. answer in one word and must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". detect the emotion and format all letters as uppercase. ",
          "lower_case": "Specify the emotion of the speaker, answer in one word and must pick from \"happy\", \"sad\", \"angry\" or \"neutral\" and format the emotion label so that all text is lowercase: ",
          "prefix": [
            {
              "prefix": "[SPEAKER_EMOTION]",
              "inst": "Specify the emotion of the speaker and answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"[SPEAKER_EMOTION]\" introduced first "
            }
          ],
          "suffix": [
            {
              "suffix": "[Voice_Emotion]",
              "inst": "Specify the emotion of the speaker and answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and append the suffix \"[Voice_Emotion]\" to it. "
            }
          ],
          "wrap": [
            {
              "lrt": "{|}",
              "inst": "Specify the emotion of the speaker, answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", bind the result using \"{\" and \"}\" as wrappers "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker and answer in one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert your output into a json-compatible format and the SER value should be indexed by \"sentiment\". Here's how a typical entry should look: {\"sentiment\": \"(mood)\"} ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood. Simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood. Simply in one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", generate the emotion result only in uppercase characters: ",
          "lower_case": "Point out the speaker's mood and simply in one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "**emotion**",
              "inst": "Point out the speaker's mood. simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", adding \"**emotion**\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Sentiment**",
              "inst": "Point out the speaker's mood and simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and place \"**Sentiment**\" after everything else. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Point out the speaker's mood, simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encapsulate the output between \"<text>\" and \"</text>\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood, simply in one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and provide the answer inside a json container and represent the result of SER using the key \"SER\"; one possible output form: {\"SER\": \"(feeling)\"}: ",
              "key": "SER",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "in a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood. In a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's mood, in a single word. Select a single emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase ",
          "lower_case": "Express the speaker's mood, in a single word. Select a single emotion from \"happy\", \"sad\", \"angry\" or \"neutral\"; return lowercase-only SER output. ",
          "prefix": [
            {
              "prefix": "*sentiment*",
              "inst": "Express the speaker's mood. In a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"*sentiment*\" set as the introduction "
            }
          ],
          "suffix": [
            {
              "suffix": "**speaker_emotion**",
              "inst": "Express the speaker's mood, in a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and let \"**speaker_emotion**\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<BOS>|<EOS>",
              "inst": "Express the speaker's mood, in a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; place \"<BOS>\" before and \"<EOS>\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood and in a single word. Select a single emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and output using a clean and valid json layout; represent SER in the json with the key \"emotion_tag\" and here's how a typical entry should look: {\"emotion_tag\": \"(emotion)\"}: ",
              "key": "emotion_tag",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood and say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Identify the speaker's mood and say it in exactly one word. Must be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Show the detected emotion fully in uppercase characters: ",
          "lower_case": "Identify the speaker's mood; say it in exactly one word. must be one of \"happy\", \"sad\", \"angry\" or \"neutral\", provide the detected emotion entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "[Voice_Emotion]",
              "inst": "Identify the speaker's mood; say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefixed by \"[Voice_Emotion]\" "
            }
          ],
          "suffix": [
            {
              "suffix": "{FEELING}",
              "inst": "Identify the speaker's mood and say it in exactly one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure \"{FEELING}\" is the last string: "
            }
          ],
          "wrap": [
            {
              "lrt": "~|~",
              "inst": "Identify the speaker's mood, say it in exactly one word. Must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and represent the result inside the bounds of \"~\" and \"~\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, say it in exactly one word. must be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert your output into a json-compatible format, SER must be stored in the json under the key \"predicted_emotion\" and keep your output consistent with: {\"predicted_emotion\": \"(feeling)\"}: ",
              "key": "predicted_emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F037.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's mood and expressed in one word and pick a value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", format the emotion label so that all text is uppercase ",
          "lower_case": "Explain the speaker's mood and expressed in one word and pick a value from \"happy\", \"sad\", \"angry\" or \"neutral\". Produce lowercase-only emotion label text ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Explain the speaker's mood; expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin it with \"Emotion result from audio: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Emotion_Result*",
              "inst": "Explain the speaker's mood, expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"*Emotion_Result*\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Explain the speaker's mood. Expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place the result inside a pair of \"<s>\" and \"</s>\" tags. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood, expressed in one word and pick a value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Make sure the result is encapsulated in json. Attach \"emotion\" to the result of SER in the final output, refer to this sample output: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F038.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion; declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's emotion; declared in one word, select only one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide only uppercase characters in the emotion label: ",
          "lower_case": "Describe the speaker's emotion; declared in one word, select only one: \"happy\", \"sad\", \"angry\" or \"neutral\", respond with the emotion written in lowercase only. ",
          "prefix": [
            {
              "prefix": "Recognized affective category: ",
              "inst": "Describe the speaker's emotion and declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prefix with \"Recognized affective category: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**affect**",
              "inst": "Describe the speaker's emotion, declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"**affect**\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's emotion; declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; set \"<start>\" and \"<end>\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion; declared in one word, select only one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and produce the output adhering to json format and assign \"sentiment\" as the property key for SER related content; an illustration of the format would be: {\"sentiment\": \"(affect)\"}: ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F039.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion. Summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion; summed up in one word; must return \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Express the speaker's emotion and summed up in one word; must return \"happy\", \"sad\", \"angry\" or \"neutral\"; respond with the emotion written in lowercase only ",
          "prefix": [
            {
              "prefix": "[EMOTION_LABEL]",
              "inst": "Express the speaker's emotion. Summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"[EMOTION_LABEL]\" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "[predicted_emotion]",
              "inst": "Express the speaker's emotion and summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and tag the result by adding \"[predicted_emotion]\" to its end. "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Express the speaker's emotion. Summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Delimit the content using \"<start>\" and \"<end>\" as wrappers: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. Summed up in one word; must return \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", print the result using json object formatting and assign \"emotional_state\" as the property key for SER related content, here is a sample representation: {\"emotional_state\": \"(affect)\"}. ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "in just one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood and in just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood; in just one word. return the correct emotion: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion result only in uppercase characters. ",
          "lower_case": "Describe the speaker's mood, in just one word. Return the correct emotion: \"happy\", \"sad\", \"angry\" or \"neutral\", convert and return the emotion fully lowercase ",
          "prefix": [
            {
              "prefix": "[AFFECT]",
              "inst": "Describe the speaker's mood; in just one word. return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and prefix it with \"[AFFECT]\": "
            }
          ],
          "suffix": [
            {
              "suffix": "[EMOTION_OUTPUT]",
              "inst": "Describe the speaker's mood. In just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And add \"[EMOTION_OUTPUT]\" to the end without changes: "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's mood. In just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Set \"<\" and \">\" as the enclosing characters for the result: "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood; in just one word. Return the correct emotion: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; render the result into json-structured data, the json representation of SER must be keyed as \"detected_emotion\", here is a sample representation: {\"detected_emotion\": \"(perceived emotion)\"}: ",
              "key": "detected_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the emotion of the speaker",
        "base_constrain": "just use one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the emotion of the speaker. Just use one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the emotion of the speaker. just use one word. the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", only output the emotion in uppercase format ",
          "lower_case": "Specify the emotion of the speaker and just use one word. The emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\", provide just the lowercase version of the detected emotion. ",
          "prefix": [
            {
              "prefix": "Predicted emotional output: ",
              "inst": "Specify the emotion of the speaker, just use one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; having \"Predicted emotional output: \" lead: "
            }
          ],
          "suffix": [
            {
              "suffix": "<mood>",
              "inst": "Specify the emotion of the speaker and just use one word. the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and use \"<mood>\" as the closing segment "
            }
          ],
          "wrap": [
            {
              "lrt": "\"|\"",
              "inst": "Specify the emotion of the speaker, just use one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encase the result between \"\"\" and \"\"\" "
            }
          ],
          "json": [
            {
              "inst": "Specify the emotion of the speaker, just use one word. The emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and convert the output directly into json; please tag the SER information with the key \"emotion\". here's how a typical entry should look: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F042.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker, expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker. Expressed in one word; output should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Reply with uppercase-only predicted emotion text. ",
          "lower_case": "Tell the emotion of the speaker and expressed in one word; output should be one of \"happy\", \"sad\", \"angry\" or \"neutral\", output the SER result in lowercase format only ",
          "prefix": [
            {
              "prefix": "<EMOTION>",
              "inst": "Tell the emotion of the speaker; expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and kicking off with \"<EMOTION>\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[speaker_emotion]",
              "inst": "Tell the emotion of the speaker, expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"[speaker_emotion]\" after everything else: "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Tell the emotion of the speaker. expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"#\" and \"#\": "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker; expressed in one word; output should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output using a clean and valid json layout. for the SER entry, use \"emotion_label\" as its key, consider this sample format: {\"emotion_label\": \"(emotional tone)\"}. ",
              "key": "emotion_label",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F043.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling; write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling. Write in one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and reply with uppercase-only predicted emotion text: ",
          "lower_case": "Identify the speaker's feeling; write in one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\" and return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "The emotional tone detected: ",
              "inst": "Identify the speaker's feeling; write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"The emotional tone detected: \" at the beginning "
            }
          ],
          "suffix": [
            {
              "suffix": "{FEELING}",
              "inst": "Identify the speaker's feeling and write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"{FEELING}\" the final token. "
            }
          ],
          "wrap": [
            {
              "lrt": "$|$",
              "inst": "Identify the speaker's feeling and write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result between the symbols \"$\" and \"$\": "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling and write in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", present the output strictly in json format; allocate the key \"sentiment\" for the data derived from SER. This is an appropriate format: {\"sentiment\": \"(affect)\"}: ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_F044.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "state in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. state in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the speaker's feeling. state in one word. choose a single valid option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only: ",
          "lower_case": "Summarize the speaker's feeling; state in one word. Choose a single valid option from \"happy\", \"sad\", \"angry\" or \"neutral\", return just the emotion label with no uppercase letters: ",
          "prefix": [
            {
              "prefix": "<SPEAKER_EMOTION>",
              "inst": "Summarize the speaker's feeling. State in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and front-loaded with \"<SPEAKER_EMOTION>\": "
            }
          ],
          "suffix": [
            {
              "suffix": "<EMOTION_RESULT>",
              "inst": "Summarize the speaker's feeling. State in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"<EMOTION_RESULT>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Summarize the speaker's feeling and state in one word. Choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"(\" as the left boundary and \")\" as the right "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling and state in one word. choose a single valid option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your answer following json standards; when structuring the result, use \"emotion_label\" for the SER section; you are expected to return: {\"emotion_label\": \"(affect)\"}. ",
              "key": "emotion_label",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M008.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's feeling",
        "base_constrain": "call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's feeling, call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's feeling. Call it in one word; provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the recognized emotion into uppercase text ",
          "lower_case": "Point out the speaker's feeling and call it in one word; provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\" and give the speech emotion recognition result entirely in lowercase: ",
          "prefix": [
            {
              "prefix": "{EMOTION_RESULT}",
              "inst": "Point out the speaker's feeling. Call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"{EMOTION_RESULT}\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotional_State**",
              "inst": "Point out the speaker's feeling and call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And follow the content with \"**Emotional_State**\": "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's feeling and call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", enclose the result using \"(\" at the start and \")\" at the end "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's feeling, call it in one word; provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; format everything using strict json notation. The output variable for SER is expected to be labeled \"emotion_result\", format your response exactly as: {\"emotion_result\": \"(perceived emotion)\"}: ",
              "key": "emotion_result",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M009.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion and elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's emotion and elaborated in one word, the answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; return the SER output as uppercase text only. ",
          "lower_case": "Point out the speaker's emotion; elaborated in one word, the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure the returned emotion has only lowercase characters ",
          "prefix": [
            {
              "prefix": "Recognized feeling is: ",
              "inst": "Point out the speaker's emotion; elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", led by \"Recognized feeling is: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "*Predicted_Emotion*",
              "inst": "Point out the speaker's emotion and elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and attach \"*Predicted_Emotion*\" at the output's conclusion. "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Point out the speaker's emotion, elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"(\" and \")\": "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion and elaborated in one word, the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; output the information using json formatting rules and use \"sentiment\" as the json label for SER; the output should resemble: {\"sentiment\": \"(affect)\"}. ",
              "key": "sentiment",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M010.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "reply in one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood, reply in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood; reply in one word. Provide an emotion value from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Ensure the detected result contains only uppercase characters: ",
          "lower_case": "Identify the speaker's mood and reply in one word. Provide an emotion value from \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion with no extra words ",
          "prefix": [
            {
              "prefix": "*emotion*",
              "inst": "Identify the speaker's mood; reply in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". preceded by \"*emotion*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "<FEELING>",
              "inst": "Identify the speaker's mood. Reply in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"<FEELING>\" be the trailing symbol "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Identify the speaker's mood and reply in one word. Provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result with the symbol \"<start>\" and \"<end>\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and reply in one word. provide an emotion value from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and structure the final output as a json object and use \"emotion_output\" as the json label for SER. A correct formatting instance is: {\"emotion_output\": \"(emotion)\"}: ",
              "key": "emotion_output",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M011.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's emotion",
        "base_constrain": "state it in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's emotion. state it in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Point out the speaker's emotion, state it in one word. The selected emotion must be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Point out the speaker's emotion and state it in one word. the selected emotion must be \"happy\", \"sad\", \"angry\" or \"neutral\". give the speech emotion recognition result entirely in lowercase ",
          "prefix": [
            {
              "prefix": "Detected affective state: ",
              "inst": "Point out the speaker's emotion. state it in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and begin with \"Detected affective state: \" "
            }
          ],
          "suffix": [
            {
              "suffix": "[PREDICTED_EMOTION]",
              "inst": "Point out the speaker's emotion, state it in one word. the selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And let \"[PREDICTED_EMOTION]\" be the trailing symbol: "
            }
          ],
          "wrap": [
            {
              "lrt": "<wrap>|</wrap>",
              "inst": "Point out the speaker's emotion and state it in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and enclose the result using \"<wrap>\" at the start and \"</wrap>\" at the end. "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's emotion; state it in one word. The selected emotion must be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json and the json attribute for SER is \"predicted_emotion\"; refer to this sample output: {\"predicted_emotion\": \"(mood)\"}: ",
              "key": "predicted_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M015.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Tell the emotion of the speaker",
        "base_constrain": "chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Tell the emotion of the speaker. chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Tell the emotion of the speaker, chosen in one word and pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Provide the predicted emotion in uppercase without extra formatting. ",
          "lower_case": "Tell the emotion of the speaker and chosen in one word and pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion output: ",
          "prefix": [
            {
              "prefix": "Predicted speaker emotion: ",
              "inst": "Tell the emotion of the speaker, chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and adding \"Predicted speaker emotion: \" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Output**",
              "inst": "Tell the emotion of the speaker; chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And attach \"**Emotion_Output**\" at the conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Tell the emotion of the speaker and chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place the result inside a pair of \"<text>\" and \"</text>\" tags "
            }
          ],
          "json": [
            {
              "inst": "Tell the emotion of the speaker. Chosen in one word and pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; print the result using json object formatting. Use \"speaker_emotion\" as the designated key for SER. use the following format in your response: {\"speaker_emotion\": \"(emotion)\"}. ",
              "key": "speaker_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M020.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the emotion of the speaker",
        "base_constrain": "conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the emotion of the speaker; conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Summarize the emotion of the speaker, conveyed in one word; return a single selection: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only: ",
          "lower_case": "Summarize the emotion of the speaker. Conveyed in one word; return a single selection: \"happy\", \"sad\", \"angry\" or \"neutral\" and generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "*AFFECT*",
              "inst": "Summarize the emotion of the speaker, conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefixed by \"*AFFECT*\" "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Summarize the emotion of the speaker, conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and label the end of the result with \"[emotion_result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Summarize the emotion of the speaker and conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result with the symbol \"[\" and \"]\". "
            }
          ],
          "json": [
            {
              "inst": "Summarize the emotion of the speaker; conveyed in one word; return a single selection: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards; use \"emotion_result\" as the designated key for SER. You can format it as follows: {\"emotion_result\": \"(mood)\"}: ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M023.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's feeling",
        "base_constrain": "with one single word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's feeling. with one single word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's feeling; with one single word. select a value strictly from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the output emotion label contains only uppercase letters ",
          "lower_case": "Identify the speaker's feeling, with one single word. Select a value strictly from \"happy\", \"sad\", \"angry\" or \"neutral\", ensure the output emotion contains only lowercase letters: ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Identify the speaker's feeling, with one single word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; kicking off with \"Speech emotion detected as: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTIONAL_TONE*",
              "inst": "Identify the speaker's feeling, with one single word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and place \"*EMOTIONAL_TONE*\" at the very end. "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's feeling; with one single word. select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result fully with \"_\" as the left boundary and \"_\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's feeling. With one single word. Select a value strictly from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Convert the output directly into json. The output variable for SER is expected to be labeled \"sentiment\"; one possible output form: {\"sentiment\": \"(emotional tone)\"} ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M024.wav",
      "text": "Neutral",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's emotion",
        "base_constrain": "in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's emotion, in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Explain the speaker's emotion; in only one word, the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and give the detected emotion output only in uppercase form. ",
          "lower_case": "Explain the speaker's emotion, in only one word, the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\"; provide the detected emotion written entirely in lowercase letters. ",
          "prefix": [
            {
              "prefix": "Classification result (emotion): ",
              "inst": "Explain the speaker's emotion. In only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Classification result (emotion): \" at the very top "
            }
          ],
          "suffix": [
            {
              "suffix": "<emotion_tag>",
              "inst": "Explain the speaker's emotion and in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and follow the content with \"<emotion_tag>\". "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Explain the speaker's emotion; in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and mark the result using \"<\" before and \">\" after. "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's emotion, in only one word, the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Serialize the result into json form and attach \"emotional_state\" to the result of SER in the final output. a correct formatting instance is: {\"emotional_state\": \"(affect)\"}: ",
              "key": "emotional_state",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M025.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Summarize the speaker's feeling",
        "base_constrain": "expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Summarize the speaker's feeling. Expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Summarize the speaker's feeling. Expressed in one word; pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase: ",
          "lower_case": "Summarize the speaker's feeling; expressed in one word; pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Summarize the speaker's feeling. Expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Identified emotional tone: \" at the start: "
            }
          ],
          "suffix": [
            {
              "suffix": "{emotion_result}",
              "inst": "Summarize the speaker's feeling, expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". and let \"{emotion_result}\" be the trailing symbol. "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Summarize the speaker's feeling and expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and set \"<s>\" and \"</s>\" as the enclosing characters for the result. "
            }
          ],
          "json": [
            {
              "inst": "Summarize the speaker's feeling, expressed in one word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". return it structured as a json object; the SER result must be identified using the key \"emotion_tag\" and for example: {\"emotion_tag\": \"(feeling)\"} ",
              "key": "emotion_tag",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M026.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "just use one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood, just use one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's mood; just use one word. The answer should be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". provide the detected emotion entirely in uppercase. ",
          "lower_case": "Specify the speaker's mood; just use one word. the answer should be selected from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion recognition output entirely lowercase ",
          "prefix": [
            {
              "prefix": "Final emotion classification: ",
              "inst": "Specify the speaker's mood; just use one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Having \"Final emotion classification: \" lead "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_tone*",
              "inst": "Specify the speaker's mood; just use one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"*emotional_tone*\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's mood. just use one word. The answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", use \"*\" and \"*\" to bracket the result. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, just use one word. the answer should be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is formatted as valid json and \"emotion_result\" should be the identifier for the SER content and this is an appropriate format: {\"emotion_result\": \"(affect)\"} ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M027.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the emotion of the speaker",
        "base_constrain": "summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the emotion of the speaker; summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the emotion of the speaker. Summarize in one word and the output should be exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; provide the detected emotion entirely in uppercase. ",
          "lower_case": "Express the emotion of the speaker and summarize in one word and the output should be exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "Speech emotion detected as: ",
              "inst": "Express the emotion of the speaker, summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"Speech emotion detected as: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "{EMOTION_TAG}",
              "inst": "Express the emotion of the speaker and summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and ensure the final part is \"{EMOTION_TAG}\" "
            }
          ],
          "wrap": [
            {
              "lrt": "(|)",
              "inst": "Express the emotion of the speaker and summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; ensure the result is wrapped using \"(\" and \")\". "
            }
          ],
          "json": [
            {
              "inst": "Express the emotion of the speaker. Summarize in one word and the output should be exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and format your result exactly as a json object and use \"emotion_label\" as the json label for SER and a correctly structured entry is: {\"emotion_label\": \"(feeling)\"}: ",
              "key": "emotion_label",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M028.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion and say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Express the speaker's emotion, say it in exactly one word, the result should be one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and generate the emotion label in uppercase text only ",
          "lower_case": "Express the speaker's emotion and say it in exactly one word, the result should be one of \"happy\", \"sad\", \"angry\" or \"neutral\"; make the emotion recognition result all lowercase. ",
          "prefix": [
            {
              "prefix": "<Feeling>",
              "inst": "Express the speaker's emotion and say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Adding \"<Feeling>\" at the front "
            }
          ],
          "suffix": [
            {
              "suffix": "*AFFECT*",
              "inst": "Express the speaker's emotion and say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and write \"*AFFECT*\" after the result body: "
            }
          ],
          "wrap": [
            {
              "lrt": "'|'",
              "inst": "Express the speaker's emotion; say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; embed the result between \"'\" and \"'\" markers. "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion. say it in exactly one word, the result should be one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format everything using strict json notation. \"emotional_state\" should be the identifier for the SER content and one possible output form: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M029.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Point out the speaker's mood",
        "base_constrain": "reply in one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Point out the speaker's mood and reply in one word. must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Point out the speaker's mood. Reply in one word. must choose one among \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Detect the emotion and format all letters as uppercase ",
          "lower_case": "Point out the speaker's mood. Reply in one word. Must choose one among \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "Predicted affect category: ",
              "inst": "Point out the speaker's mood, reply in one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", launching with \"Predicted affect category: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**AFFECT**",
              "inst": "Point out the speaker's mood and reply in one word. must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and finish the output with \"**AFFECT**\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "Point out the speaker's mood and reply in one word. must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", place \"<s>\" before and \"</s>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "Point out the speaker's mood and reply in one word. Must choose one among \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", return the structured data as a json-formatted string and the label \"sentiment\" must correspond to the SER section. Your result should mirror this: {\"sentiment\": \"(mood)\"}. ",
              "key": "sentiment",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M030.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling and respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "State the speaker's feeling. Respond in one word and return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give only the predicted emotion using uppercase letters: ",
          "lower_case": "State the speaker's feeling. Respond in one word and return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\". Ensure all emotion labels are lowercase ",
          "prefix": [
            {
              "prefix": "**EMOTIONAL_TONE**",
              "inst": "State the speaker's feeling and respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". start it with \"**EMOTIONAL_TONE**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "**Affect**",
              "inst": "State the speaker's feeling, respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And use \"**Affect**\" to finish the sequence "
            }
          ],
          "wrap": [
            {
              "lrt": "<s>|</s>",
              "inst": "State the speaker's feeling and respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and place \"<s>\" before and \"</s>\" after the result "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling and respond in one word and return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", give the result back in proper json notation, use \"emotion\" as the designated key for SER, the appropriate response template: {\"emotion\": \"(feeling)\"}: ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M031.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's mood",
        "base_constrain": "written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's mood, written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's mood. Written in one word; must output exactly one: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and provide the recognized emotion written entirely in uppercase letters ",
          "lower_case": "Describe the speaker's mood; written in one word; must output exactly one: \"happy\", \"sad\", \"angry\" or \"neutral\" and output only the recognized emotion in lowercase form ",
          "prefix": [
            {
              "prefix": "Recognized sentiment label: ",
              "inst": "Describe the speaker's mood; written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", add \"Recognized sentiment label: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "<predicted_emotion>",
              "inst": "Describe the speaker's mood and written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and include \"<predicted_emotion>\" as the last element "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Describe the speaker's mood; written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; delimit the result using \"<start>\" in the front and \"<end>\" at the back "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's mood and written in one word; must output exactly one: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and print the result using json object formatting, write the SER result with \"SER\" as its property name, you are expected to return: {\"SER\": \"(affect)\"} ",
              "key": "SER",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M032.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's feelings",
        "base_constrain": "in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's feelings; in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Describe the speaker's feelings, in a single word; pick exactly one option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", make sure the entire predicted emotion is in uppercase: ",
          "lower_case": "Describe the speaker's feelings; in a single word; pick exactly one option from \"happy\", \"sad\", \"angry\" or \"neutral\", produce the emotion output with all words in lowercase. ",
          "prefix": [
            {
              "prefix": "**Emotional_Tone**",
              "inst": "Describe the speaker's feelings and in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepended with \"**Emotional_Tone**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotion_label*",
              "inst": "Describe the speaker's feelings and in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and use \"*emotion_label*\" to finish the sequence: "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Describe the speaker's feelings, in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", represent the result inside the bounds of \"*\" and \"*\". "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's feelings and in a single word; pick exactly one option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; convert the output directly into json, the designated key for SER should remain \"sentiment\" and please follow the template: {\"sentiment\": \"(emotional tone)\"}: ",
              "key": "sentiment",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M033.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's emotion",
        "base_constrain": "presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's emotion. Presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's emotion, presented in one word, return exactly one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and ensure the detected result contains only uppercase characters: ",
          "lower_case": "Identify the speaker's emotion. presented in one word, return exactly one of \"happy\", \"sad\", \"angry\" or \"neutral\" and produce only lowercase text from the SER result: ",
          "prefix": [
            {
              "prefix": "Emotion result from audio: ",
              "inst": "Identify the speaker's emotion and presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; preceded by \"Emotion result from audio: \". "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Identify the speaker's emotion, presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and have \"**emotion_output**\" conclude the result "
            }
          ],
          "wrap": [
            {
              "lrt": "_|_",
              "inst": "Identify the speaker's emotion; presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and encapsulate the result between \"_\" and \"_\" "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's emotion, presented in one word, return exactly one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format your answer following json standards, the json representation of SER must be keyed as \"SER\". The json object should be in this pattern: {\"SER\": \"(emotion)\"}: ",
              "key": "SER",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M034.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's emotion",
        "base_constrain": "only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's emotion, only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Express the speaker's emotion, only use one word; choose a value only from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; give the predicted emotion entirely in uppercase ",
          "lower_case": "Express the speaker's emotion. Only use one word; choose a value only from \"happy\", \"sad\", \"angry\" or \"neutral\", output only the lowercase emotion recognition result. ",
          "prefix": [
            {
              "prefix": "**EMOTION_OUTPUT**",
              "inst": "Express the speaker's emotion; only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"**EMOTION_OUTPUT**\" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**Mood**",
              "inst": "Express the speaker's emotion, only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and apply \"**Mood**\" to the output's end: "
            }
          ],
          "wrap": [
            {
              "lrt": "**|**",
              "inst": "Express the speaker's emotion and only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; attach \"**\" to the beginning and \"**\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's emotion, only use one word; choose a value only from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", display the result in json formatting style. The output variable for SER is expected to be labeled \"emotion\", format your response exactly as: {\"emotion\": \"(feeling)\"} ",
              "key": "emotion",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M035.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Express the speaker's mood",
        "base_constrain": "articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Express the speaker's mood and articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Express the speaker's mood and articulated in one word; the emotion must be selected from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the returned emotion has only uppercase characters ",
          "lower_case": "Express the speaker's mood; articulated in one word; the emotion must be selected from \"happy\", \"sad\", \"angry\" or \"neutral\" and provide the emotion result in lowercase without extra formatting. ",
          "prefix": [
            {
              "prefix": "Identified emotion category: ",
              "inst": "Express the speaker's mood, articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Using \"Identified emotion category: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Express the speaker's mood, articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and attach \"[emotion_result]\" at the output's conclusion "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Express the speaker's mood and articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and surround the result with the markers \"#\" and \"#\" "
            }
          ],
          "json": [
            {
              "inst": "Express the speaker's mood. articulated in one word; the emotion must be selected from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". convert your output into a json-compatible format, for the SER entry, use \"emotion_label\" as its key and for reference, your output might look like: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M036.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "using only one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, using only one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Specify the speaker's feeling and using only one word. return one of the following: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Deliver the emotion recognition output as uppercase only. ",
          "lower_case": "Specify the speaker's feeling, using only one word. Return one of the following: \"happy\", \"sad\", \"angry\" or \"neutral\" and provide only lowercase text for the emotion result ",
          "prefix": [
            {
              "prefix": "**Emotion**",
              "inst": "Specify the speaker's feeling, using only one word. return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"**Emotion**\" as the heading "
            }
          ],
          "suffix": [
            {
              "suffix": "**Emotion_Tag**",
              "inst": "Specify the speaker's feeling, using only one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and mark the end of the result with \"**Emotion_Tag**\". "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Specify the speaker's feeling, using only one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; wrap the result fully with \"***\" as the left boundary and \"***\" as the right: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; using only one word. Return one of the following: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Format everything using strict json notation; the field related to SER must be labeled with \"emotion_label\", this is an appropriate format: {\"emotion_label\": \"(emotion)\"}: ",
              "key": "emotion_label",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M037.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the emotion of the speaker",
        "base_constrain": "state it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the emotion of the speaker, state it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Explain the emotion of the speaker and state it in one word and choose one correct option: \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", reply with the emotion result using uppercase letters only. ",
          "lower_case": "Explain the emotion of the speaker. State it in one word and choose one correct option: \"happy\", \"sad\", \"angry\" or \"neutral\" and return lowercase-only SER output: ",
          "prefix": [
            {
              "prefix": "Emotion category identified: ",
              "inst": "Explain the emotion of the speaker and state it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", with \"Emotion category identified: \" as the prefix: "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Explain the emotion of the speaker; state it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and keep \"*EMOTION_OUTPUT*\" as the final annotation "
            }
          ],
          "wrap": [
            {
              "lrt": "<start>|<end>",
              "inst": "Explain the emotion of the speaker. State it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", contain the result within the symbols \"<start>\" and \"<end>\": "
            }
          ],
          "json": [
            {
              "inst": "Explain the emotion of the speaker, state it in one word and choose one correct option: \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", encode the result as a json object; when formatting, associate SER with \"detected_emotion\", the desired structure is as shown: {\"detected_emotion\": \"(emotion)\"}: ",
              "key": "detected_emotion",
              "value": "emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M038.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Describe the speaker's emotion",
        "base_constrain": "say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Describe the speaker's emotion. Say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Describe the speaker's emotion, say it in exactly one word; output a single option from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Convert the recognized emotion into uppercase text. ",
          "lower_case": "Describe the speaker's emotion and say it in exactly one word; output a single option from \"happy\", \"sad\", \"angry\" or \"neutral\". Show the emotion label fully in lowercase characters ",
          "prefix": [
            {
              "prefix": "[FEELING]",
              "inst": "Describe the speaker's emotion and say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"[FEELING]\" as a prefix. "
            }
          ],
          "suffix": [
            {
              "suffix": "*emotional_state*",
              "inst": "Describe the speaker's emotion, say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and close the output by appending \"*emotional_state*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Describe the speaker's emotion, say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"<\" and \">\" markers "
            }
          ],
          "json": [
            {
              "inst": "Describe the speaker's emotion, say it in exactly one word; output a single option from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", format the outcome as a json-compliant object, the SER information must be placed under \"emotion_result\". The output must match this structure: {\"emotion_result\": \"(mood)\"}. ",
              "key": "emotion_result",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M039.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "in precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood. In precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". ",
          "upper_case": "Identify the speaker's mood, in precisely one word and must pick from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; ensure the emotion recognition result is all uppercase characters ",
          "lower_case": "Identify the speaker's mood and in precisely one word and must pick from \"happy\", \"sad\", \"angry\" or \"neutral\", reply with the lowercase version of the recognized emotion ",
          "prefix": [
            {
              "prefix": "Recognized emotional category: ",
              "inst": "Identify the speaker's mood. In precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; prepend \"Recognized emotional category: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "<feeling>",
              "inst": "Identify the speaker's mood and in precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and make sure it ends with \"<feeling>\" "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "Identify the speaker's mood, in precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", mark the result using \"<text>\" before and \"</text>\" after. "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood and in precisely one word and must pick from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", wrap the result in a standard json structure. The SER information must be placed under \"detected_emotion\" and for example: {\"detected_emotion\": \"(mood)\"}: ",
              "key": "detected_emotion",
              "value": "mood"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M040.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling. Only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling; only use one word and choose between \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; reply with the uppercase version of the detected emotion. ",
          "lower_case": "Specify the speaker's feeling. Only use one word and choose between \"happy\", \"sad\", \"angry\" or \"neutral\". Generate the SER result in lowercase text only ",
          "prefix": [
            {
              "prefix": "**AFFECT**",
              "inst": "Specify the speaker's feeling, only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", prefix with \"**AFFECT**\": "
            }
          ],
          "suffix": [
            {
              "suffix": "*Sentiment*",
              "inst": "Specify the speaker's feeling. Only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And place \"*Sentiment*\" directly after the result. "
            }
          ],
          "wrap": [
            {
              "lrt": "*|*",
              "inst": "Specify the speaker's feeling. only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and embed the result between \"*\" and \"*\" markers "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling and only use one word and choose between \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; produce a response that adheres to json syntax, structure your json so that SER is labeled as \"emotional_state\", use the following format in your response: {\"emotional_state\": \"(emotional tone)\"} ",
              "key": "emotional_state",
              "value": "emotional tone"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M041.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's mood",
        "base_constrain": "written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's mood and written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Specify the speaker's mood; written in one word; provide one of \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\"; respond with the recognized emotion written in uppercase only: ",
          "lower_case": "Specify the speaker's mood. Written in one word; provide one of \"happy\", \"sad\", \"angry\" or \"neutral\", return the speech emotion in lowercase letters. ",
          "prefix": [
            {
              "prefix": "The speaker's emotion is: ",
              "inst": "Specify the speaker's mood; written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and using \"The speaker's emotion is: \" as a heading "
            }
          ],
          "suffix": [
            {
              "suffix": "*VOICE_EMOTION*",
              "inst": "Specify the speaker's mood; written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and end the result by inserting \"*VOICE_EMOTION*\": "
            }
          ],
          "wrap": [
            {
              "lrt": "<|>",
              "inst": "Specify the speaker's mood. Written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Place \"<\" before and \">\" after the result: "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's mood, written in one word; provide one of \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", organize the result in a json-style dictionary; the field related to SER must be labeled with \"emotional_state\" and follow this example to structure the data: {\"emotional_state\": \"(feeling)\"}. ",
              "key": "emotional_state",
              "value": "feeling"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M042.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "State the speaker's feeling",
        "base_constrain": "in one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "State the speaker's feeling. In one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "State the speaker's feeling; in one single word and only valid options are \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\" and return the emotion result as uppercase letters only ",
          "lower_case": "State the speaker's feeling; in one single word and only valid options are \"happy\", \"sad\", \"angry\" or \"neutral\", return the emotion label in lowercase without altering meaning ",
          "prefix": [
            {
              "prefix": "<predicted_emotion>",
              "inst": "State the speaker's feeling, in one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"<predicted_emotion>\" set as the introduction. "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotional_tone]",
              "inst": "State the speaker's feeling; in one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". And keep \"[emotional_tone]\" as the final annotation. "
            }
          ],
          "wrap": [
            {
              "lrt": "<text>|</text>",
              "inst": "State the speaker's feeling, in one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the entire result using \"<text>\" as prefix and \"</text>\" as suffix: "
            }
          ],
          "json": [
            {
              "inst": "State the speaker's feeling. in one single word and only valid options are \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and wrap the result in a standard json structure and please tag the SER information with the key \"predicted_emotion\", your result should mirror this: {\"predicted_emotion\": \"(perceived emotion)\"}: ",
              "key": "predicted_emotion",
              "value": "perceived emotion"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M043.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Specify the speaker's feeling",
        "base_constrain": "reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Specify the speaker's feeling, reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" ",
          "upper_case": "Specify the speaker's feeling and reply in one word, the emotion result should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", return the emotion output in uppercase without punctuation changes. ",
          "lower_case": "Specify the speaker's feeling; reply in one word, the emotion result should be \"happy\", \"sad\", \"angry\" or \"neutral\". Show only the lowercase emotion output. ",
          "prefix": [
            {
              "prefix": "Predicted emotional tone: ",
              "inst": "Specify the speaker's feeling. Reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; beginning with \"Predicted emotional tone: \": "
            }
          ],
          "suffix": [
            {
              "suffix": "[emotion_result]",
              "inst": "Specify the speaker's feeling. Reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", and close the output by appending \"[emotion_result]\". "
            }
          ],
          "wrap": [
            {
              "lrt": "#|#",
              "inst": "Specify the speaker's feeling. reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and bind the result using \"#\" and \"#\" as wrappers. "
            }
          ],
          "json": [
            {
              "inst": "Specify the speaker's feeling; reply in one word, the emotion result should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; make sure the result is encapsulated in json, record SER using \"speaker_emotion\" as the key in the json structure; a correct formatting instance is: {\"speaker_emotion\": \"(affect)\"}: ",
              "key": "speaker_emotion",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M044.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Explain the speaker's mood",
        "base_constrain": "with one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Explain the speaker's mood and with one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Explain the speaker's mood. With one single word; choose an emotion from \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\", produce uppercase-only emotion text ",
          "lower_case": "Explain the speaker's mood and with one single word; choose an emotion from \"happy\", \"sad\", \"angry\" or \"neutral\", deliver the emotion output as lowercase only ",
          "prefix": [
            {
              "prefix": "Determined mood from audio: ",
              "inst": "Explain the speaker's mood and with one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and with \"Determined mood from audio: \" at the start. "
            }
          ],
          "suffix": [
            {
              "suffix": "*EMOTION_OUTPUT*",
              "inst": "Explain the speaker's mood. With one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and and make \"*EMOTION_OUTPUT*\" the final suffix: "
            }
          ],
          "wrap": [
            {
              "lrt": "***|***",
              "inst": "Explain the speaker's mood and with one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and attach \"***\" to the beginning and \"***\" to the end of the result: "
            }
          ],
          "json": [
            {
              "inst": "Explain the speaker's mood. With one single word; choose an emotion from \"Happy\", \"Sad\", \"Angry\" or \"Neutral\" and return the data inside a properly formed json, assign \"emotion_result\" as the property key for SER related content. format your response exactly as: {\"emotion_result\": \"(affect)\"}. ",
              "key": "emotion_result",
              "value": "affect"
            }
          ]
        }
      }
    },
    {
      "path": "/path/to/IEMOCAP_full_release/Session5/sentences/wav/Ses05M_script03_2/Ses05M_script03_2_M045.wav",
      "text": "Angry",
      "task": "emotion_recognition",
      "instructions": {
        "base_description": "Identify the speaker's mood",
        "base_constrain": "named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"",
        "variations": {
          "constrain": "Identify the speaker's mood; named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\": ",
          "upper_case": "Identify the speaker's mood and named in one word, the emotion should be \"HAPPY\", \"SAD\", \"ANGRY\" or \"NEUTRAL\". Return the recognized emotion in all uppercase letters: ",
          "lower_case": "Identify the speaker's mood. Named in one word, the emotion should be \"happy\", \"sad\", \"angry\" or \"neutral\"; produce lowercase-only emotion label text. ",
          "prefix": [
            {
              "prefix": "Identified emotional tone: ",
              "inst": "Identify the speaker's mood and named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; with \"Identified emotional tone: \" at the very beginning: "
            }
          ],
          "suffix": [
            {
              "suffix": "**emotion_output**",
              "inst": "Identify the speaker's mood. Named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\"; and use \"**emotion_output**\" as the closing segment: "
            }
          ],
          "wrap": [
            {
              "lrt": "[|]",
              "inst": "Identify the speaker's mood, named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\", include the result within \"[\" and \"]\" without any modifications "
            }
          ],
          "json": [
            {
              "inst": "Identify the speaker's mood, named in one word, the emotion should be \"Happy\", \"Sad\", \"Angry\" or \"Neutral\". Ensure the result is formatted as valid json, please tag the SER information with the key \"predicted_emotion\"; a demonstration of the expected format: {\"predicted_emotion\": \"(affect)\"}. ",
              "key": "predicted_emotion",
              "value": "affect"
            }
          ]
        }
      }
    }
  ]
}